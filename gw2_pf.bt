//------------------------------------------------
//--- 010 Editor v15.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
LittleEndian();

struct
{
    char   magic[2];
    uint16 version;
    uint16 zero;
    uint16 headerSize;
    char   type[4];
} headerDat;

struct ChunkHeader
{
char magic[4];
uint32 chunkSize;
uint16 version;
uint16 headerSize;
uint32 offsetToOffsetTable;
};


struct ChunkData
{
    ChunkHeader chunkHeader;
    local uint32 nbOfOffsetsData=0;

    if(chunkHeader.offsetToOffsetTable!=0)
    {
        ubyte data[chunkHeader.offsetToOffsetTable];
        uint32 nbOfOffsets;
        nbOfOffsetsData=nbOfOffsets;
        uint32 offsets[nbOfOffsets];
        ubyte unknown[(chunkHeader.chunkSize - 8 - chunkHeader.offsetToOffsetTable - 4 - (nbOfOffsets * 4))];

    }else{
        ubyte data[chunkHeader.chunkSize - 8];
    }
   
};



while(true){

ChunkData chunkData;
   
    }
