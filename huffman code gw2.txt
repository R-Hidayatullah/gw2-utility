huffman code gw2


__int64 __fastcall sub_14046F220(__int64 a1, __int64 a2)
{
  unsigned int v4; // r13d
  unsigned int v5; // r8d
  unsigned int v6; // r10d
  int v7; // r9d
  unsigned int v8; // r13d
  unsigned int v9; // eax
  int v10; // r8d
  unsigned int *v11; // rax
  unsigned int v12; // r8d
  int v13; // eax
  unsigned __int64 v14; // rax
  __int64 v15; // rcx
  unsigned __int64 v16; // rcx
  void *v17; // rsp
  void *v18; // rsp
  unsigned int v19; // r14d
  unsigned int *v20; // rdi
  __int64 v21; // rdx
  __int64 v22; // rbx
  unsigned int v23; // edx
  unsigned int *v24; // rax
  __int64 v25; // rdi
  unsigned int v26; // r14d
  unsigned int v27; // r9d
  int v28; // r9d
  unsigned int *v29; // rax
  unsigned int v30; // r8d
  unsigned int v31; // edi
  __int64 v32; // r14
  unsigned int v33; // esi
  unsigned int v34; // ebx
  __int64 v35; // r15
  unsigned int v36; // r14d
  char v37; // al
  unsigned int v38; // edx
  int v39; // edi
  unsigned int v40; // r13d
  __int64 v41; // rbx
  unsigned int v42; // r14d
  unsigned int *v43; // rdx
  unsigned int *v44; // r14
  __int64 v46; // rcx
  __int64 v47; // rcx
  unsigned int v48; // r9d
  unsigned int v49; // ebx
  unsigned int v50; // edx
  unsigned int v51; // r11d
  unsigned int v52; // r10d
  __int64 v53; // rcx
  __int64 v54; // rdx
  _DWORD *v55; // r8
  __int64 v56; // rcx
  unsigned int v58; // [rsp+30h] [rbp+0h] BYREF
  unsigned int v59; // [rsp+38h] [rbp+8h] BYREF
  unsigned int v60; // [rsp+40h] [rbp+10h]
  unsigned int *v61; // [rsp+48h] [rbp+18h]
  int v62; // [rsp+50h] [rbp+20h]
  unsigned int v63; // [rsp+54h] [rbp+24h]
  _DWORD v64[32]; // [rsp+60h] [rbp+30h] BYREF
  _DWORD v65[32]; // [rsp+E0h] [rbp+B0h] BYREF

  sub_14024CE90();
  *(_DWORD *)(a1 + 2336) = 1;
  *(_QWORD *)(a1 + 2352) = 0LL;
  *(_QWORD *)(a1 + 2344) = 0LL;
  v4 = *(_DWORD *)(a2 + 20);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 16);
  v7 = HIWORD(v5) | (v4 << 16);
  v8 = HIWORD(v4);
  v63 = v8;
  *(_DWORD *)(a2 + 20) = v7;
  if ( v6 < 0x10 )
  {
    v11 = *(unsigned int **)a2;
    if ( *(_QWORD *)a2 == *(_QWORD *)(a2 + 8) )
    {
      v9 = 0;
      v10 = 0;
    }
    else
    {
      v12 = *v11;
      *(_QWORD *)a2 = v11 + 1;
      v13 = v7 | (v12 >> (32 - (16 - v6)));
      v10 = v12 << (16 - v6);
      *(_DWORD *)(a2 + 20) = v13;
      v9 = v6 + 16;
    }
  }
  else
  {
    v9 = v6 - 16;
    v10 = v5 << 16;
  }
  *(_DWORD *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 16) = v9;
  v14 = 4LL * v8;
  v15 = v14 + 15;
  if ( v14 + 15 < v14 )
    v15 = 0xFFFFFFFFFFFFFF0LL;
  v16 = v15 & 0xFFFFFFFFFFFFFFF0uLL;
  v17 = alloca(v16);
  v18 = alloca(v16);
  v58 = 0;
  v19 = 0;
  v20 = &v58;
  v61 = &v58;
  sub_14024FE30(v65, 128LL);
  LOBYTE(v21) = -1;
  sub_14024FE00(v64, v21, 128LL);
  v22 = v8 - 1;
  if ( v8 )
  {
    while ( 1 )
    {
      v23 = *(_DWORD *)(a2 + 20);
      v24 = (unsigned int *)&unk_141B81220;
      if ( v23 < 0xA0000000 )
      {
        do
          v24 += 2;
        while ( v23 < *v24 );
      }
      v25 = ((char *)v24 - (char *)&unk_141B81220 + 24) >> 3;
      v26 = byte_141B81290[v24[1] - ((v23 - *v24) >> (32 - v25))];
      if ( (unsigned int)v25 < 0x20 )
      {
        if ( !(_DWORD)v25 )
          goto LABEL_15;
      }
      else
      {
        sub_1402898B0(
          "bitCount < 8 * sizeof(m_rackData0)",
          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
          60LL);
      }
      *(_DWORD *)(a2 + 20) = (*(_DWORD *)(a2 + 20) << v25) | (*(_DWORD *)(a2 + 24) >> (32 - v25));
LABEL_15:
      v27 = *(_DWORD *)(a2 + 16);
      if ( (unsigned int)v25 > v27 )
      {
        v29 = *(unsigned int **)a2;
        if ( *(_QWORD *)a2 == *(_QWORD *)(a2 + 8) )
        {
          *(_DWORD *)(a2 + 24) = 0;
          v28 = 0;
        }
        else
        {
          v30 = *v29;
          *(_QWORD *)a2 = v29 + 1;
          *(_DWORD *)(a2 + 20) |= v30 >> (32 - (v25 - v27));
          *(_DWORD *)(a2 + 24) = v30 << (v25 - v27);
          v28 = v27 - v25 + 32;
        }
      }
      else
      {
        *(_DWORD *)(a2 + 24) <<= v25;
        v28 = v27 - v25;
      }
      *(_DWORD *)(a2 + 16) = v28;
      v31 = v26 >> 5;
      v32 = v26 & 0x1F;
      if ( v31 > (unsigned int)v22 )
      {
        sub_14024FE30(a1, 2048LL);
        sub_14024FE30(a1 + 2048, 288LL);
        v46 = *(_QWORD *)(a1 + 2344);
        if ( v46 )
          sub_14027D7E0(v46, 0LL, 0LL);
        *(_QWORD *)(a1 + 2344) = 0LL;
        *(_QWORD *)(a1 + 2352) = 0LL;
        return a1;
      }
      if ( (_DWORD)v32 || v8 < 2 )
      {
        v43 = v61;
        v65[v32] += v31 + 1;
        v58 += v31 + 1;
        v44 = &v64[v32];
        while ( 1 )
        {
          if ( (unsigned int)v22 >= v8 )
          {
            sub_1402898B0(
              "symbol < totalSymbolCount",
              "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpHuff.cpp",
              469LL);
            v43 = v61;
          }
          v43[v22] = *v44;
          *v44 = v22;
          v22 = (unsigned int)(v22 - 1);
          if ( !v31-- )
            break;
          if ( (_DWORD)v22 == -1 )
            goto LABEL_25;
        }
      }
      else
      {
        v22 = -1 - v31 + (unsigned int)v22;
      }
      if ( (_DWORD)v22 == -1 )
      {
LABEL_25:
        v19 = v58;
        v20 = v61;
        break;
      }
    }
  }
  if ( v8 && !v19 )
  {
    v20[v8 - 1] = v64[0];
    v64[0] = v8 - 1;
    v65[0] = 1;
    v58 = 1;
  }
  sub_14024FE30(a1, 2048LL);
  v33 = 0;
  v34 = 0;
  LODWORD(v35) = 0;
  v60 = 0;
  do
  {
    v36 = v64[(unsigned int)v35];
    if ( v36 != -1 )
    {
      v37 = 8 - v35;
      v38 = 1 << v35;
      v62 = 1 << v35;
      v59 = 8 - v35;
      while ( v33 < v38 && v36 < v8 )
      {
        v39 = 1 << v37;
        if ( 1 << v37 )
        {
          v40 = v33 << v37;
          do
          {
            v41 = --v39 | v40;
            if ( (unsigned int)v41 >= 0x100 )
              sub_1402898B0(
                "hashSlot < HASH_SIZE",
                "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpHuff.cpp",
                504LL);
            *(_DWORD *)(a1 + 8 * v41) = v35;
            *(_DWORD *)(a1 + 8 * v41 + 4) = v36;
          }
          while ( v39 );
          v34 = v60;
          v38 = v62;
          v8 = v63;
        }
        v20 = v61;
        ++v34;
        --v33;
        v60 = v34;
        v36 = v61[v36];
        v37 = v59;
        if ( v36 == -1 )
          goto LABEL_41;
      }
      sub_14024FE30(a1, 2048LL);
      sub_14024FE30(a1 + 2048, 288LL);
      v47 = *(_QWORD *)(a1 + 2344);
      if ( v47 )
        sub_14027D7E0(v47, 0LL, 0LL);
      *(_QWORD *)(a1 + 2344) = 0LL;
      *(_QWORD *)(a1 + 2352) = 0LL;
      return a1;
    }
LABEL_41:
    v35 = (unsigned int)(v35 + 1);
    v33 = 2 * v33 + 1;
  }
  while ( (unsigned int)v35 <= 8 );
  v42 = v58;
  if ( v34 <= v58 )
  {
    if ( v34 == v58 )
      return a1;
  }
  else
  {
    sub_1402898B0(
      "processed <= symbolCount",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpHuff.cpp",
      511LL);
  }
  sub_1402FFA30(a1 + 2336, v42 - v34);
  v48 = 0;
  v49 = 0;
  if ( (unsigned int)v35 <= 0x1F )
  {
    while ( 1 )
    {
      v50 = v64[v35];
      if ( v50 != -1 )
        break;
LABEL_64:
      v35 = (unsigned int)(v35 + 1);
      v33 = 2 * v33 + 1;
      if ( (unsigned int)v35 > 0x1F )
        return a1;
    }
    while ( 1 )
    {
      v51 = v48;
      v52 = v33;
      if ( v33 >= 1 << v35 || v50 >= v8 )
        break;
      v59 = v48;
      *(_DWORD *)(a1 + 8 * ((unsigned __int64)v33 >> ((unsigned __int8)v35 - 8))) = -1;
      if ( v48 >= *(_DWORD *)(a1 + 2356) )
      {
        sub_140244E10(
          (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
          683,
          (unsigned int)"Index: {}, Count: {}",
          (unsigned int)&v59,
          a1 + 2356);
        JUMPOUT(0x14046F855LL);
      }
      --v33;
      v53 = v48++;
      *(_DWORD *)(*(_QWORD *)(a1 + 2344) + 4 * v53) = v50;
      v50 = v20[v50];
      if ( v50 == -1 )
      {
        v54 = v49++;
        v55 = (_DWORD *)(a1 + 12 * v54);
        v55[512] = v52 << (32 - v35);
        v55[513] = v51;
        v55[514] = v35;
        goto LABEL_64;
      }
    }
    sub_14024FE30(a1, 2048LL);
    sub_14024FE30(a1 + 2048, 288LL);
    v56 = *(_QWORD *)(a1 + 2344);
    if ( v56 )
      sub_14027D7E0(v56, 0LL, 0LL);
    *(_QWORD *)(a1 + 2344) = 0LL;
    *(_QWORD *)(a1 + 2352) = 0LL;
  }
  return a1;
}


__int64 sub_14024CE90()
{
  __int64 v1; // rax

  if ( dword_1426A57E0 > *(_DWORD *)(*((_QWORD *)NtCurrentTeb()->ThreadLocalStoragePointer + (unsigned int)TlsIndex)
                                   + 40LL) )
  {
    Init_thread_header(&dword_1426A57E0);
    if ( dword_1426A57E0 == -1 )
    {
      dword_142584518 = -1;
      off_142584510 = off_1418B0880;
      v1 = sub_14027DF70();
      dword_142584518 = sub_14027E310(v1, &off_142584510);
      off_142584510 = off_1418B09C0;
      Init_thread_footer(&dword_1426A57E0);
    }
  }
  return (unsigned int)dword_142584518;
}


.rdata:0000000141B8128D                 db    0
.rdata:0000000141B8128E                 db    0
.rdata:0000000141B8128F                 db    0
.rdata:0000000141B81290 ; unsigned __int8 byte_141B81290[768]
.rdata:0000000141B81290 byte_141B81290  db 8, 9, 0Ah, 0, 7, 0Bh, 0Ch, 6, 29h, 2Ah, 0E0h, 4, 5
.rdata:0000000141B81290                                         ; DATA XREF: sub_14046F220+147↑o
.rdata:0000000141B81290                                         ; sub_14046F220+25D↑o
.rdata:0000000141B8129D                 db 20h, 28h, 2Bh, 2Ch, 40h, 4Ah, 3, 0Dh, 25h, 26h, 27h
.rdata:0000000141B812A8                 db 48h, 49h, 24h, 47h, 4Bh, 4Ch, 69h, 6Ah, 23h, 46h, 60h
.rdata:0000000141B812B3                 db 63h, 67h, 68h, 88h, 89h, 0A0h, 0E8h, 1, 2, 2Dh, 43h
.rdata:0000000141B812BE                 db 44h, 45h, 65h, 66h, 80h, 87h, 8Ah, 0A8h, 0A9h, 0C0h
.rdata:0000000141B812C8                 db 0C9h, 0E9h, 0Eh, 4Dh, 64h, 6Bh, 6Ch, 84h, 85h, 8Bh
.rdata:0000000141B812D2                 db 0A4h, 0A5h, 0AAh, 0C8h, 0E5h, 83h, 86h, 0A6h, 0A7h
.rdata:0000000141B812DB                 db 0C7h, 0CAh, 0E7h, 22h, 2Eh, 8Ch, 0C4h, 0E4h, 0E6h, 4Eh
.rdata:0000000141B812E5                 db 6Dh, 0C6h, 0ECh, 0Fh, 10h, 11h, 8Dh, 0ABh, 0ACh, 0CCh
.rdata:0000000141B812EF                 db 0EAh, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah, 1Bh
.rdata:0000000141B812FA                 db 1Ch, 1Dh, 1Eh, 1Fh, 21h, 2Fh, 30h, 31h, 32h, 33h, 34h
.rdata:0000000141B81305                 db 35h, 36h, 37h, 38h, 39h, 3Ah, 3Bh, 3Ch, 3Dh, 3Eh, 3Fh
.rdata:0000000141B81310                 db 41h, 42h, 4Fh, 50h, 51h, 52h, 53h, 54h, 55h, 56h, 57h
.rdata:0000000141B8131B                 db 58h, 59h, 5Ah, 5Bh, 5Ch, 5Dh, 5Eh, 5Fh, 61h, 62h, 6Eh
.rdata:0000000141B81326                 db 6Fh, 70h, 71h, 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h
.rdata:0000000141B81331                 db 7Ah, 7Bh, 7Ch, 7Dh, 7Eh, 7Fh, 81h, 82h, 8Eh, 8Fh, 90h
.rdata:0000000141B8133C                 db 91h, 92h, 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh
.rdata:0000000141B81347                 db 9Ch, 9Dh, 9Eh, 9Fh, 0A1h, 0A2h, 0A3h, 0ADh, 0AEh, 0AFh
.rdata:0000000141B81351                 db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.rdata:0000000141B8135A                 db 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C1h, 0C2h
.rdata:0000000141B81363                 db 0C3h, 0C5h, 0CBh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h
.rdata:0000000141B8136C                 db 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh
.rdata:0000000141B81375                 db 0DCh, 0DDh, 0DEh, 0DFh, 0E1h, 0E2h, 0E3h, 0EBh, 0EDh
.rdata:0000000141B8137E                 db 0EEh, 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h
.rdata:0000000141B81387                 db 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
.rdata:0000000141B81390                 db 4, 2 dup(0Ah), 7, 2 dup(6), 5, 4, 3 dup(3), 2 dup(4)
.rdata:0000000141B8139D                 db 7, 0Bh, 3 dup(0Fh), 0Eh dup(10h), 6, 10h, 0Dh, 9, 8
.rdata:0000000141B813B5                 db 3 dup(7), 6, 2 dup(5), 2 dup(6), 0Ah, 0Dh, 11h dup(10h)
.rdata:0000000141B813D0                 db 6, 2 dup(10h), 3 dup(0Ah), 9, 8, 2 dup(7), 6, 2 dup(8)
.rdata:0000000141B813DD                 db 0Bh, 0Eh, 11h dup(10h), 9, 2 dup(10h), 9, 0Bh, 2 dup(0Ah)
.rdata:0000000141B813F7                 db 2 dup(9), 2 dup(8), 2 dup(0Bh), 0Eh, 12h dup(10h), 0Ah
.rdata:0000000141B81411                 db 2 dup(10h), 0Ch, 2 dup(0Bh), 0Ch, 0Ah, 2 dup(9), 0Ah
.rdata:0000000141B8141B                 db 0Bh, 0Dh, 0Fh, 12h dup(10h), 9, 3 dup(10h), 2 dup(0Bh)
.rdata:0000000141B81436                 db 2 dup(0Ch), 2 dup(0Ah), 0Bh, 2 dup(0Fh), 13h dup(10h)
.rdata:0000000141B81450                 db 0Ah, 3 dup(10h), 0Dh, 10h, 0Eh, 0Ch, 0Bh, 0Ah, 0Ch
.rdata:0000000141B8145B                 db 10h, 0Fh, 13h dup(10h), 5, 3 dup(10h), 0Dh, 0Bh, 0Dh
.rdata:0000000141B81477                 db 0Ch, 9, 0Ah, 0Fh, 10h, 0Eh, 13h dup(10h), 9, 1Bh, 1Ah
.rdata:0000000141B81493                 db 2 dup(0Fh), 0Eh, 0Bh, 8, 7, 6, 5, 7, 6, 0Eh, 17h, 57h
.rdata:0000000141B814A0                 db 56h, 55h, 9Fh, 9Eh, 9Dh, 9Ch, 9Bh, 9Ah, 99h, 98h, 97h
.rdata:0000000141B814AB                 db 96h, 95h, 94h, 93h, 92h, 0Dh, 91h, 1Dh, 17h, 11h, 0Dh
.rdata:0000000141B814B6                 db 0Ch, 0Bh, 0Ch, 0Ah, 9, 0Bh, 0Ah, 19h, 1Ch, 90h, 8Fh
.rdata:0000000141B814C1                 db 8Eh, 8Dh, 8Ch, 8Bh, 8Ah, 89h, 88h, 87h, 86h, 85h, 84h
.rdata:0000000141B814CC                 db 83h, 82h, 81h, 80h, 9, 7Fh, 7Eh, 18h, 17h, 2 dup(16h)
.rdata:0000000141B814D7                 db 10h, 0Ah, 9, 8, 0Fh, 0Eh, 16h, 2Fh, 7Dh, 7Ch, 7Bh, 7Ah
.rdata:0000000141B814E3                 db 79h, 78h, 77h, 76h, 75h, 74h, 73h, 72h, 71h, 70h, 6Fh
.rdata:0000000141B814EE                 db 6Eh, 6Dh, 15h, 6Ch, 6Bh, 14h, 2 dup(15h), 14h, 13h
.rdata:0000000141B814F8                 db 12h, 0Dh, 0Ch, 14h, 13h, 2Eh, 6Ah, 69h, 68h, 67h, 66h
.rdata:0000000141B81503                 db 65h, 64h, 63h, 62h, 61h, 60h, 5Fh, 5Eh, 5Dh, 5Ch, 5Bh
.rdata:0000000141B8150E                 db 5Ah, 59h, 13h, 58h, 57h, 15h, 12h, 11h, 14h, 12h, 11h
.rdata:0000000141B81519                 db 10h, 11h, 10h, 1Bh, 54h, 56h, 55h, 54h, 53h, 52h, 51h
.rdata:0000000141B81524                 db 50h, 4Fh, 4Eh, 4Dh, 4Ch, 4Bh, 4Ah, 49h, 48h, 47h, 46h
.rdata:0000000141B8152F                 db 45h, 0Fh, 44h, 43h, 42h, 0Fh, 0Eh, 13h, 12h, 10h, 0Fh
.rdata:0000000141B8153A                 db 0Dh, 53h, 52h, 41h, 40h, 3Fh, 3Eh, 3Dh, 3Ch, 3Bh, 3Ah
.rdata:0000000141B81545                 db 39h, 38h, 37h, 36h, 35h, 34h, 33h, 32h, 31h, 30h, 2Fh
.rdata:0000000141B81550                 db 0Eh, 2Eh, 2Dh, 2Ch, 1Ah, 2Bh, 2Dh, 11h, 0Ch, 0Dh, 10h
.rdata:0000000141B8155B                 db 2Ah, 51h, 29h, 28h, 27h, 26h, 25h, 24h, 23h, 22h, 21h
.rdata:0000000141B81566                 db 20h, 1Fh, 1Eh, 1Dh, 1Ch, 1Bh, 1Ah, 19h, 18h, 17h, 8
.rdata:0000000141B81571                 db 16h, 15h, 14h, 19h, 0Bh, 18h, 0Fh, 0Eh, 0Ch, 50h, 13h
.rdata:0000000141B8157C                 db 2Ch, 12h, 11h, 10h, 0Fh, 0Eh, 0Dh, 0Ch, 0Bh, 0Ah, 9
.rdata:0000000141B81587                 db 8, 7, 6, 5, 4, 3, 2, 1, 0
.rdata:0000000141B81590 aDPerforceLiveN_193 db 'D:\Perforce\Live\NAEU\v2\Code\Arena\Services\Compress\CmpHuff.cpp'
.rdata:0000000141B81590                                         ; DATA XREF: sub_14046F220+325↑o
.rdata:0000000141B81590                                         ; sub_14046F220+395↑o ...
.rdata:0000000141B815D1                 db 0
.rdata:0000000141B815D2                 align 8
.rdata:0000000141B815D8 aCount7         db 'count <= 7',0       ; DATA XREF: sub_14046FF20+29↑o
.rdata:0000000141B815D8                                         ; sub_140470290+14D↑o
.rdata:0000000141B815E3                 align 8
.rdata:0000000141B815E8 aBitcount0x1f   db 'bitCount <= 0x1f',0 ; DATA XREF: sub_14046FF20+47↑o
.rdata:0000000141B815E8                                         ; sub_140470290+16C↑o
.rdata:0000000141B815F9                 align 20h
.rdata:0000000141B81600 aBitcountMaxPos db 'bitCount < MAX_POSSIBLE_BITS',0
.rdata:0000000141B81600                                         ; DATA XREF: sub_14046F860+14B↑o
.rdata:0000000141B8161D                 align 20h
.rdata:0000000141B81620 aGroupcount0    db '!groupCount[0]',0   ; DATA XREF: sub_14046F860+1DE↑o
.rdata:0000000141B8162F                 align 10h
.rdata:0000000141B81630 aSymbolTotalsym db 'symbol < totalSymbolCount',0
.rdata:0000000141B81630                                         ; DATA XREF: sub_14046F220+3E6↑o
.rdata:0000000141B8164A                 align 10h
.rdata:0000000141B81650 aHashslotHashSi db 'hashSlot < HASH_SIZE',0
.rdata:0000000141B81650                                         ; DATA XREF: sub_14046F220+32C↑o
.rdata:0000000141B81650                                         ; sub_141102FD0+BC↑o
.rdata:0000000141B81665                 align 8
.rdata:0000000141B81668 aProcessedSymbo db 'processed <= symbolCount',0
.rdata:0000000141B81668                                         ; DATA XREF: sub_14046F220+39C↑o
.rdata:0000000141B81681                 align 10h
.rdata:0000000141B81690 unk_141B81690   db    0                 ; DATA XREF: sub_140470500+3F↑o



__int64 __fastcall sub_140466300(_BYTE *a1, int a2, __int64 a3, __int64 a4, unsigned int a5)
{
  unsigned int v5; // eax
  unsigned int v7; // r8d
  unsigned int *v8; // r12
  unsigned int v9; // r11d
  int v10; // r9d
  unsigned int v11; // edi
  unsigned int v12; // r8d
  unsigned int v13; // r11d
  unsigned int *v14; // rax
  unsigned int v15; // r8d
  unsigned int v16; // r10d
  unsigned int v17; // r10d
  unsigned int v18; // r10d
  _QWORD *v19; // r15
  int v20; // r9d
  unsigned int v21; // r11d
  int v22; // r8d
  unsigned int *v23; // rax
  unsigned int v24; // r8d
  char v25; // al
  int v26; // r13d
  _BYTE *v27; // rsi
  _BYTE *v28; // rdi
  unsigned int v29; // r11d
  unsigned int v30; // r8d
  unsigned int v31; // r10d
  int v32; // r9d
  unsigned int v33; // r11d
  unsigned int v34; // eax
  int v35; // r8d
  unsigned int *v36; // rax
  unsigned int v37; // r8d
  int v38; // eax
  unsigned int v39; // edx
  unsigned __int64 v40; // rax
  unsigned int v41; // esi
  unsigned int v42; // r14d
  unsigned int *v43; // rax
  __int64 v44; // rcx
  unsigned int v45; // r9d
  unsigned int *v46; // rax
  unsigned int v47; // r9d
  unsigned int *v48; // rax
  unsigned int v49; // r8d
  __int64 v50; // rcx
  unsigned int v51; // esi
  int v52; // r15d
  unsigned int v53; // edx
  unsigned int v54; // eax
  int v55; // r10d
  int v56; // eax
  unsigned int *v57; // rax
  unsigned int v58; // r8d
  char v59; // al
  unsigned int v60; // edx
  unsigned __int64 v61; // rax
  int v62; // esi
  unsigned int v63; // r14d
  unsigned int v64; // r13d
  unsigned int *v65; // rax
  __int64 v66; // rcx
  unsigned int v67; // r9d
  unsigned int *v68; // rax
  unsigned int *v69; // rax
  unsigned int v70; // r8d
  int v71; // r14d
  unsigned int v72; // r15d
  unsigned int v73; // edx
  int v74; // r10d
  unsigned int *v75; // rax
  unsigned int v76; // r8d
  int v77; // ecx
  unsigned int v78; // ecx
  __int64 v79; // rdx
  __int64 v80; // rcx
  unsigned int v81; // esi
  int v82; // r15d
  unsigned int v83; // edx
  unsigned int v84; // eax
  int v85; // r10d
  int v86; // eax
  unsigned int *v87; // rax
  unsigned int v88; // r8d
  char v89; // al
  unsigned int v90; // edx
  unsigned __int64 v91; // rax
  int v92; // esi
  unsigned int v93; // r14d
  unsigned int v94; // r15d
  unsigned int *v95; // rax
  __int64 v96; // rcx
  unsigned int v97; // r9d
  unsigned int *v98; // rax
  unsigned int *v99; // rax
  unsigned int v100; // r8d
  unsigned int v101; // r14d
  int v102; // r12d
  unsigned int v103; // edx
  int v104; // r10d
  unsigned int *v105; // rax
  unsigned int v106; // r8d
  char *i; // rcx
  char v108; // al
  int v110; // [rsp+30h] [rbp-D0h]
  int v111; // [rsp+38h] [rbp-C8h] BYREF
  unsigned int v112; // [rsp+40h] [rbp-C0h]
  int v113; // [rsp+44h] [rbp-BCh]
  unsigned int v114; // [rsp+48h] [rbp-B8h]
  int v115; // [rsp+4Ch] [rbp-B4h]
  _BYTE *v116; // [rsp+50h] [rbp-B0h]
  __int64 v117; // [rsp+58h] [rbp-A8h]
  __int64 v118; // [rsp+60h] [rbp-A0h]
  _QWORD *v119; // [rsp+68h] [rbp-98h]
  _DWORD v120[512]; // [rsp+70h] [rbp-90h] BYREF
  unsigned int v121; // [rsp+870h] [rbp+770h] BYREF
  __int64 v122; // [rsp+998h] [rbp+898h]
  __int64 v123; // [rsp+9A0h] [rbp+8A0h] BYREF
  _DWORD v124[512]; // [rsp+9B0h] [rbp+8B0h] BYREF
  unsigned int v125; // [rsp+11B0h] [rbp+10B0h] BYREF
  __int64 v126; // [rsp+12D8h] [rbp+11D8h]
  __int64 v127; // [rsp+12E0h] [rbp+11E0h] BYREF
  _DWORD v128[512]; // [rsp+12F0h] [rbp+11F0h] BYREF
  unsigned int v129; // [rsp+1AF0h] [rbp+19F0h] BYREF
  __int64 v130; // [rsp+1C18h] [rbp+1B18h]
  unsigned int v131[3]; // [rsp+1C24h] [rbp+1B24h] BYREF

  v5 = *(_DWORD *)(a3 + 20);
  v7 = *(_DWORD *)(a3 + 24);
  v8 = (unsigned int *)(a3 + 16);
  v9 = *(_DWORD *)(a3 + 16);
  v117 = a4;
  v10 = (16 * v5) | (v7 >> 28);
  v11 = v5 >> 28;
  v118 = (__int64)a1;
  *(_DWORD *)(a3 + 20) = v10;
  if ( v9 < 4 )
  {
    v14 = *(unsigned int **)a3;
    if ( *(_QWORD *)a3 != *(_QWORD *)(a3 + 8) )
    {
      v15 = *v14;
      *(_QWORD *)a3 = v14 + 1;
      v16 = v15 >> (32 - (4 - v9));
      v12 = v15 << (4 - v9);
      v17 = v10 | v16;
      *(_DWORD *)(a3 + 24) = v12;
      v13 = v9 + 28;
      v10 = v17;
      goto LABEL_7;
    }
    v13 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    v12 = 0;
  }
  else
  {
    v12 = 16 * v7;
    *(_DWORD *)(a3 + 24) = v12;
    v13 = v9 - 4;
  }
  v17 = v10;
LABEL_7:
  v18 = v17 >> 28;
  *v8 = v13;
  v19 = (_QWORD *)(a3 + 8);
  v119 = (_QWORD *)(a3 + 8);
  v114 = v11 + 1;
  v20 = (v12 >> 28) | (16 * v10);
  *(_DWORD *)(a3 + 20) = v20;
  if ( v13 < 4 )
  {
    v23 = *(unsigned int **)a3;
    if ( *(_QWORD *)a3 == *v19 )
    {
      v21 = 0;
      v22 = 0;
    }
    else
    {
      v24 = *v23;
      *(_QWORD *)a3 = v23 + 1;
      v25 = 4 - v13;
      v21 = v13 + 28;
      *(_DWORD *)(a3 + 20) = v20 | (v24 >> (32 - v25));
      v22 = v24 << v25;
    }
  }
  else
  {
    v21 = v13 - 4;
    v22 = 16 * v12;
  }
  *(_DWORD *)(a3 + 24) = v22;
  v26 = 0;
  v113 = 0;
  v27 = &a1[a2];
  *v8 = v21;
  v110 = 0;
  v112 = v18 + 1;
  v28 = a1;
  v116 = v27;
  if ( a1 != v27 )
  {
LABEL_13:
    sub_14046F220((__int64)v128, a3);
    sub_14046F220((__int64)v124, a3);
    sub_14046F220((__int64)v120, a3);
    v29 = *(_DWORD *)(a3 + 20);
    v30 = *(_DWORD *)(a3 + 24);
    v31 = *v8;
    v32 = (16 * v29) | (v30 >> 28);
    v33 = v29 >> 28;
    *(_DWORD *)(a3 + 20) = v32;
    if ( v31 < 4 )
    {
      v36 = *(unsigned int **)a3;
      if ( *(_QWORD *)a3 == *v19 )
      {
        v34 = 0;
        v35 = 0;
      }
      else
      {
        v37 = *v36;
        *(_QWORD *)a3 = v36 + 1;
        *(_DWORD *)(a3 + 20) = v32 | (v37 >> (32 - (4 - v31)));
        v34 = v31 + 28;
        v35 = v37 << (4 - v31);
      }
    }
    else
    {
      v34 = v31 - 4;
      v35 = 16 * v30;
    }
    *(_DWORD *)(a3 + 24) = v35;
    *v8 = v34;
    v38 = (v33 + 1) << 12;
    while ( 1 )
    {
      v115 = v38 - 1;
      if ( v28 == v27 )
      {
LABEL_120:
        if ( v122 )
          sub_14027D7E0(v122, 0LL, 0LL);
        v122 = 0LL;
        v123 = 0LL;
        if ( v126 )
          sub_14027D7E0(v126, 0LL, 0LL);
        v126 = 0LL;
        v127 = 0LL;
        if ( v130 )
          sub_14027D7E0(v130, 0LL, 0LL);
        if ( v28 != v27 )
        {
          v19 = v119;
          goto LABEL_13;
        }
        return 1LL;
      }
      v39 = *(_DWORD *)(a3 + 20);
      v40 = (unsigned __int64)v39 >> 24;
      v41 = v128[2 * v40];
      v42 = v128[2 * v40 + 1];
      if ( v41 == -1 )
      {
        v43 = &v129;
        if ( v39 < v129 )
        {
          do
            v43 += 3;
          while ( v39 < *v43 );
        }
        v41 = v43[2];
        v44 = v43[1] - ((v39 - *v43) >> (32 - v41));
        v111 = v44;
        if ( (unsigned int)v44 >= v131[0] )
        {
          sub_140244E10(
            (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
            690,
            (unsigned int)"Index: {}, Count: {}",
            (unsigned int)&v111,
            (__int64)v131);
          __debugbreak();
        }
        v42 = *(_DWORD *)(v130 + 4 * v44);
      }
      if ( v41 < 0x20 )
      {
        if ( !v41 )
          goto LABEL_29;
      }
      else
      {
        sub_1402898B0(
          "bitCount < 8 * sizeof(m_rackData0)",
          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
          60LL);
      }
      *(_DWORD *)(a3 + 20) = (*(_DWORD *)(a3 + 20) << v41) | (*(_DWORD *)(a3 + 24) >> (32 - v41));
LABEL_29:
      v45 = *v8;
      if ( v41 > *v8 )
      {
        v48 = *(unsigned int **)a3;
        if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
        {
          *(_DWORD *)(a3 + 24) = 0;
          v46 = (unsigned int *)(a3 + 16);
          v47 = 0;
        }
        else
        {
          v49 = *v48;
          *(_QWORD *)a3 = v48 + 1;
          *(_DWORD *)(a3 + 20) |= v49 >> (32 - (v41 - v45));
          v46 = v8;
          *(_DWORD *)(a3 + 24) = v49 << (v41 - v45);
          v47 = v45 - v41 + 32;
        }
      }
      else
      {
        v46 = v8;
        *(_DWORD *)(a3 + 24) <<= v41;
        v47 = v45 - v41;
      }
      *v46 = v47;
      if ( v42 >= 0x11D )
      {
        v50 = v42 - 285;
        v51 = byte_141B80D00[v50 + 128];
        v52 = byte_141B80BA0[v50];
        if ( byte_141B80D00[v50 + 128] )
        {
          v53 = *(_DWORD *)(a3 + 20);
          v52 |= v53 >> (32 - v51);
          if ( v51 >= 0x20 )
          {
            sub_1402898B0(
              "bitCount < 8 * sizeof(m_rackData0)",
              "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
              60LL);
            v53 = *(_DWORD *)(a3 + 20);
            v47 = *(_DWORD *)(a3 + 16);
          }
          v54 = *(_DWORD *)(a3 + 24);
          v55 = (v53 << v51) | (v54 >> (32 - v51));
          *(_DWORD *)(a3 + 20) = v55;
          if ( v51 <= v47 )
          {
            v56 = v54 << v51;
            v47 -= v51;
            *v8 = v47;
            goto LABEL_43;
          }
          v57 = *(unsigned int **)a3;
          if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
          {
            v56 = 0;
            *(_DWORD *)(a3 + 16) = 0;
            v47 = 0;
LABEL_43:
            *(_DWORD *)(a3 + 24) = v56;
          }
          else
          {
            v58 = *v57;
            *(_QWORD *)a3 = v57 + 1;
            v59 = v51 - v47;
            v47 = v47 - v51 + 32;
            *(_DWORD *)(a3 + 20) = v55 | (v58 >> (32 - v59));
            *v8 = v47;
            *(_DWORD *)(a3 + 24) = v58 << v59;
          }
        }
        v60 = *(_DWORD *)(a3 + 20);
        v61 = (unsigned __int64)v60 >> 24;
        v62 = v52 + v112;
        v63 = v120[2 * v61];
        v64 = v120[2 * v61 + 1];
        if ( v63 == -1 )
        {
          v65 = &v121;
          if ( v60 < v121 )
          {
            do
              v65 += 3;
            while ( v60 < *v65 );
          }
          v63 = v65[2];
          v66 = v65[1] - ((v60 - *v65) >> (32 - v63));
          v111 = v66;
          if ( (unsigned int)v66 >= HIDWORD(v123) )
          {
            sub_140244E10(
              (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
              690,
              (unsigned int)"Index: {}, Count: {}",
              (unsigned int)&v111,
              (__int64)&v123 + 4);
            JUMPOUT(0x140466EB6LL);
          }
          v47 = *(_DWORD *)(a3 + 16);
          v64 = *(_DWORD *)(v122 + 4 * v66);
        }
        if ( v63 >= 0x20 )
        {
          sub_1402898B0(
            "bitCount < 8 * sizeof(m_rackData0)",
            "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
            60LL);
          v47 = *(_DWORD *)(a3 + 16);
          goto LABEL_52;
        }
        if ( v63 )
LABEL_52:
          *(_DWORD *)(a3 + 20) = (*(_DWORD *)(a3 + 20) << v63) | (*(_DWORD *)(a3 + 24) >> (32 - v63));
        if ( v63 > v47 )
        {
          v69 = *(unsigned int **)a3;
          if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
          {
            *(_DWORD *)(a3 + 24) = 0;
            v68 = (unsigned int *)(a3 + 16);
            v67 = 0;
          }
          else
          {
            v70 = *v69;
            *(_QWORD *)a3 = v69 + 1;
            *(_DWORD *)(a3 + 20) |= v70 >> (32 - (v63 - v47));
            v68 = v8;
            *(_DWORD *)(a3 + 24) = v70 << (v63 - v47);
            v67 = v47 - v63 + 32;
          }
        }
        else
        {
          *(_DWORD *)(a3 + 24) <<= v63;
          v67 = v47 - v63;
          v68 = v8;
        }
        *v68 = v67;
        if ( v64 >= 0x3C )
          v71 = ((v64 & 2) + 4) << ((v64 >> 2) - 2);
        else
          v71 = (unsigned __int16)word_141B80B60[(unsigned __int64)v64 >> 1];
        v72 = byte_141B80D00[v64];
        if ( byte_141B80D00[v64] )
        {
          v71 |= *(_DWORD *)(a3 + 20) >> (32 - v72);
          if ( v72 >= 0x20 )
          {
            sub_1402898B0(
              "bitCount < 8 * sizeof(m_rackData0)",
              "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
              60LL);
            v67 = *(_DWORD *)(a3 + 16);
          }
          v73 = *(_DWORD *)(a3 + 24);
          v74 = (v73 >> (32 - v72)) | (*(_DWORD *)(a3 + 20) << v72);
          *(_DWORD *)(a3 + 20) = v74;
          if ( v72 > v67 )
          {
            v75 = *(unsigned int **)a3;
            if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
            {
              *(_DWORD *)(a3 + 24) = 0;
              *(_DWORD *)(a3 + 16) = 0;
            }
            else
            {
              v76 = *v75;
              *(_QWORD *)a3 = v75 + 1;
              *(_DWORD *)(a3 + 20) = v74 | (v76 >> (32 - (v72 - v67)));
              *(_DWORD *)(a3 + 16) = v67 - v72 + 32;
              *(_DWORD *)(a3 + 24) = v76 << (v72 - v67);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 24) = v73 << v72;
            *(_DWORD *)(a3 + 16) = v67 - v72;
          }
        }
        v77 = -v71;
        if ( (v64 & 1) == 0 )
          v77 = v71;
        v78 = v110 + v77;
        if ( &v28[v62] > v116 || v78 + v62 > a5 )
          goto LABEL_128;
        if ( v78 - v113 <= v112 + 255 || v113 - v78 <= v112 + 255 )
          v26 = v78 + v62;
        else
          v26 = v62 + v110;
        v110 = v26;
        v113 = v78;
        if ( v62 )
        {
          v79 = v117 + v78 - (_QWORD)v28;
          do
          {
            *v28 = v28[v79];
            ++v28;
            --v62;
          }
          while ( v62 );
        }
        goto LABEL_119;
      }
      if ( v42 < 0x100 )
      {
        ++v26;
        *v28 = v42;
        v110 = v26;
        ++v28;
        goto LABEL_119;
      }
      v80 = v42 - 256;
      v81 = byte_141B80D00[v80 + 128];
      v82 = byte_141B80BA0[v80];
      if ( byte_141B80D00[v80 + 128] )
      {
        v83 = *(_DWORD *)(a3 + 20);
        v82 |= v83 >> (32 - v81);
        if ( v81 >= 0x20 )
        {
          sub_1402898B0(
            "bitCount < 8 * sizeof(m_rackData0)",
            "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
            60LL);
          v83 = *(_DWORD *)(a3 + 20);
          v47 = *(_DWORD *)(a3 + 16);
        }
        v84 = *(_DWORD *)(a3 + 24);
        v85 = (v83 << v81) | (v84 >> (32 - v81));
        *(_DWORD *)(a3 + 20) = v85;
        if ( v81 > v47 )
        {
          v87 = *(unsigned int **)a3;
          if ( *(_QWORD *)a3 != *(_QWORD *)(a3 + 8) )
          {
            v88 = *v87;
            *(_QWORD *)a3 = v87 + 1;
            v89 = v81 - v47;
            v47 = v47 - v81 + 32;
            *(_DWORD *)(a3 + 20) = v85 | (v88 >> (32 - v89));
            *v8 = v47;
            *(_DWORD *)(a3 + 24) = v88 << v89;
            goto LABEL_91;
          }
          v86 = 0;
          *(_DWORD *)(a3 + 16) = 0;
          v47 = 0;
        }
        else
        {
          v86 = v84 << v81;
          v47 -= v81;
          *v8 = v47;
        }
        *(_DWORD *)(a3 + 24) = v86;
      }
LABEL_91:
      v90 = *(_DWORD *)(a3 + 20);
      v91 = (unsigned __int64)v90 >> 24;
      v92 = v82 + v114;
      v93 = v124[2 * v91];
      v94 = v124[2 * v91 + 1];
      if ( v93 == -1 )
      {
        v95 = &v125;
        if ( v90 < v125 )
        {
          do
            v95 += 3;
          while ( v90 < *v95 );
        }
        v93 = v95[2];
        v96 = v95[1] - ((v90 - *v95) >> (32 - v93));
        v111 = v96;
        if ( (unsigned int)v96 >= HIDWORD(v127) )
        {
          sub_140244E10(
            (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
            690,
            (unsigned int)"Index: {}, Count: {}",
            (unsigned int)&v111,
            (__int64)&v127 + 4);
          __debugbreak();
        }
        v47 = *(_DWORD *)(a3 + 16);
        v94 = *(_DWORD *)(v126 + 4 * v96);
      }
      if ( v93 >= 0x20 )
      {
        sub_1402898B0(
          "bitCount < 8 * sizeof(m_rackData0)",
          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
          60LL);
        v47 = *(_DWORD *)(a3 + 16);
LABEL_99:
        *(_DWORD *)(a3 + 20) = (*(_DWORD *)(a3 + 20) << v93) | (*(_DWORD *)(a3 + 24) >> (32 - v93));
        goto LABEL_100;
      }
      if ( v93 )
        goto LABEL_99;
LABEL_100:
      if ( v93 > v47 )
      {
        v99 = *(unsigned int **)a3;
        if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
        {
          *(_DWORD *)(a3 + 24) = 0;
          v98 = (unsigned int *)(a3 + 16);
          v97 = 0;
        }
        else
        {
          v100 = *v99;
          *(_QWORD *)a3 = v99 + 1;
          *(_DWORD *)(a3 + 20) |= v100 >> (32 - (v93 - v47));
          v98 = v8;
          *(_DWORD *)(a3 + 24) = v100 << (v93 - v47);
          v97 = v47 - v93 + 32;
        }
      }
      else
      {
        *(_DWORD *)(a3 + 24) <<= v93;
        v97 = v47 - v93;
        v98 = v8;
      }
      *v98 = v97;
      v101 = byte_141B80CE0[v94];
      v102 = (unsigned __int16)word_141B80B60[v94];
      if ( byte_141B80CE0[v94] )
      {
        v102 |= *(_DWORD *)(a3 + 20) >> (32 - v101);
        if ( v101 >= 0x20 )
        {
          sub_1402898B0(
            "bitCount < 8 * sizeof(m_rackData0)",
            "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
            60LL);
          v97 = *(_DWORD *)(a3 + 16);
        }
        v103 = *(_DWORD *)(a3 + 24);
        v104 = (v103 >> (32 - v101)) | (*(_DWORD *)(a3 + 20) << v101);
        *(_DWORD *)(a3 + 20) = v104;
        if ( v101 > v97 )
        {
          v105 = *(unsigned int **)a3;
          if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
          {
            *(_DWORD *)(a3 + 24) = 0;
            *(_DWORD *)(a3 + 16) = 0;
          }
          else
          {
            v106 = *v105;
            *(_QWORD *)a3 = v105 + 1;
            *(_DWORD *)(a3 + 20) = v104 | (v106 >> (32 - (v101 - v97)));
            *(_DWORD *)(a3 + 16) = v97 - v101 + 32;
            *(_DWORD *)(a3 + 24) = v106 << (v101 - v97);
          }
        }
        else
        {
          *(_DWORD *)(a3 + 24) = v103 << v101;
          *(_DWORD *)(a3 + 16) = v97 - v101;
        }
      }
      if ( &v28[v92] > v116 || v102 >= (__int64)&v28[-v118] )
      {
LABEL_128:
        if ( v122 )
          sub_14027D7E0(v122, 0LL, 0LL);
        v122 = 0LL;
        v123 = 0LL;
        if ( v126 )
          sub_14027D7E0(v126, 0LL, 0LL);
        v126 = 0LL;
        v127 = 0LL;
        if ( v130 )
          sub_14027D7E0(v130, 0LL, 0LL);
        return 0LL;
      }
      v26 += v92;
      v110 = v26;
      for ( i = &v28[-v102 - 1]; v92; --v92 )
      {
        v108 = *i++;
        *v28++ = v108;
      }
LABEL_119:
      v38 = v115;
      v8 = (unsigned int *)(a3 + 16);
      v27 = v116;
      if ( !v115 )
        goto LABEL_120;
    }
  }
  return 1LL;
}


__int64 __fastcall sub_140463910(
        char *a1,
        size_t Size,
        char *Src,
        unsigned int a4,
        unsigned __int64 a5,
        unsigned int a6)
{
  unsigned __int64 v6; // rsi
  size_t v8; // rdi
  char *v10; // rcx
  unsigned int v11; // edx
  unsigned int v13; // esi
  int v14; // edx
  unsigned int v15; // esi
  unsigned int v16; // ecx
  int v17; // eax
  int v18; // eax
  _QWORD v19[2]; // [rsp+30h] [rbp-48h] BYREF
  int v20; // [rsp+40h] [rbp-38h]
  int v21; // [rsp+44h] [rbp-34h]
  int v22; // [rsp+48h] [rbp-30h]

  v6 = a4;
  v8 = (unsigned int)Size;
  if ( a4 > (unsigned int)Size )
    sub_1402898B0(
      "compressedBytes <= outputBytes",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpApi.cpp",
      111LL);
  if ( !a5 && a6 )
    sub_1402898B0(
      "oldSourceData || !oldSourceBytes",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpApi.cpp",
      112LL);
  if ( &a1[v8] > Src && &Src[v6] > a1 )
    sub_1402898B0(
      "((unsigned_ptr)outputData + outputBytes <= (unsigned_ptr)compressedData) || ((unsigned_ptr)compressedData + compre"
      "ssedBytes <= (unsigned_ptr)outputData)",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpApi.cpp",
      116LL);
  if ( (unsigned __int64)&a1[v8] > a5 && a5 + a6 > (unsigned __int64)a1 )
    sub_1402898B0(
      "((unsigned_ptr)outputData + outputBytes <= (unsigned_ptr)oldSourceData) || ((unsigned_ptr)oldSourceData + oldSourc"
      "eBytes <= (unsigned_ptr)outputData)",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpApi.cpp",
      118LL);
  if ( (unsigned int)v6 <= (unsigned int)v8 )
  {
    if ( (_DWORD)v6 == (_DWORD)v8 )
    {
      j_memcpy(a1, Src, v8);
      return 1LL;
    }
  }
  else
  {
    sub_1402898B0(
      "compressedBytes <= outputBytes",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpApi.cpp",
      122LL);
  }
  v19[0] = Src;
  v10 = &Src[4 * (v6 >> 2)];
  v19[1] = v10;
  if ( Src == v10 )
  {
    v11 = 0;
  }
  else
  {
    v11 = *(_DWORD *)Src;
    Src += 4;
    v19[0] = Src;
  }
  v13 = v11;
  v14 = 16 * v11;
  v15 = v13 >> 28;
  v21 = v14;
  if ( Src == v10 )
  {
    v22 = 0;
    v20 = 0;
  }
  else
  {
    v16 = *(_DWORD *)Src;
    v17 = *(_DWORD *)Src >> 28;
    v19[0] = Src + 4;
    v22 = 16 * v16;
    v21 = v14 | v17;
    v20 = 28;
  }
  if ( !v15 )
  {
    v18 = sub_140468330(a1, (unsigned int)v8, v19);
LABEL_27:
    if ( !v18 )
      goto LABEL_28;
    return 1LL;
  }
  if ( v15 == 1 )
  {
    v18 = sub_140466300(a1, v8, (__int64)v19, a5, a6);
    goto LABEL_27;
  }
LABEL_28:
  sub_140272850(2LL, "CmpDecompress(): corrupt data, Method = %d ", v15);
  return 0LL;
}


void __fastcall sub_1404513B0(__int64 a1)
{
  __int64 v2; // rcx
  __int64 v3; // rdx
  unsigned int *v4; // r8
  __int64 v5; // [rsp+20h] [rbp-28h]
  __int64 v6; // [rsp+28h] [rbp-20h]
  unsigned int v7; // [rsp+30h] [rbp-18h]
  unsigned int v8; // [rsp+38h] [rbp-10h]

  v2 = *(_QWORD *)(a1 + 64);
  if ( (unsigned int)sub_140463910(
                       *(char **)(v2 + 40),
                       *(unsigned int *)(v2 + 48),
                       *(char **)(v2 + 56),
                       *(_DWORD *)(v2 + 64),
                       *(_QWORD *)(v2 + 24),
                       *(_DWORD *)(v2 + 32)) )
  {
    v3 = 2LL;
  }
  else
  {
    v4 = *(unsigned int **)(a1 + 64);
    v8 = v4[3];
    v7 = v4[16];
    LODWORD(v6) = v4[8];
    LODWORD(v5) = v4[2];
    sub_1402729C0(
      2LL,
      L"Patch-application failed for 0x%08x:0x%08x->0x%08x [src: %u; patch: %u; dst: %u]",
      *v4,
      v4[1],
      v5,
      v6,
      v7,
      v8);
    Atomic_exchange32(a1 + 28, 3LL);
    v3 = 3LL;
  }
  Atomic_exchange32(a1 + 24, v3);
  EnterCriticalSection(&stru_142814360);
  if ( qword_1428143A0 )
    (*(void (__fastcall **)(__int64, _QWORD, _QWORD))(*(_QWORD *)qword_1428143A0 + 32LL))(qword_1428143A0, 0LL, 0LL);
  LeaveCriticalSection(&stru_142814360);
}


void __fastcall sub_14044ECD0(__int64 a1)
{
  if ( !a1 )
    sub_1402898B0("data != nullptr", "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Asset\\AssetInt.h", 68LL);
  sub_1404513B0(a1);
}


void __fastcall sub_140451750(_QWORD *a1, __int64 a2)
{
  unsigned int v4; // esi
  int v5; // eax
  unsigned int v6; // r8d

  if ( *(_QWORD *)(a2 + 40) )
    sub_1402898B0(
      "!context->dst.data",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Asset\\Downloader\\AssetDownloaderCommon.cpp",
      524LL);
  if ( !*(_QWORD *)(a2 + 56) )
    sub_1402898B0(
      "context->patch.data",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Asset\\Downloader\\AssetDownloaderCommon.cpp",
      525LL);
  if ( !*(_QWORD *)(a2 + 24) )
    sub_1402898B0(
      "context->src.data",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Asset\\Downloader\\AssetDownloaderCommon.cpp",
      526LL);
  a1[8] = a2;
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 48) = v4;
  v5 = sub_14024CF50();
  *(_QWORD *)(a2 + 40) = sub_14027DF80(1, v4, 0, 0, 0LL, 0, v5);
  v6 = *(_DWORD *)(a1[8] + 64LL);
  if ( v6 <= v4 )
  {
    a1[7] = a1;
    a1[6] = sub_14044ECD0;
    sub_14044E090(a1 + 4);
  }
  else
  {
    sub_140272850(2LL, "Delta-decompression failed -- patch-data is larger than uncompressed (%u > %u)", v6, v4);
    Atomic_exchange32((char *)a1 + 28, 3LL);
    Atomic_exchange32(a1 + 3, 3LL);
    EnterCriticalSection(&stru_142814360);
    if ( qword_1428143A0 )
      (*(void (__fastcall **)(__int64, _QWORD, _QWORD))(*(_QWORD *)qword_1428143A0 + 32LL))(qword_1428143A0, 0LL, 0LL);
    LeaveCriticalSection(&stru_142814360);
  }
}


.rdata:0000000141B80BBF                 db    0
.rdata:0000000141B80BC0 ; unsigned __int8 byte_141B80BC0[320]
.rdata:0000000141B80BC0 byte_141B80BC0  db 0, 1, 2, 3, 2 dup(4), 2 dup(5), 4 dup(6), 4 dup(7)
.rdata:0000000141B80BC0                                         ; DATA XREF: sub_140464630+11↑o
.rdata:0000000141B80BC0                                         ; sub_140464630+45↑o
.rdata:0000000141B80BD0                 db 8 dup(8), 8 dup(9), 0, 1, 2, 3, 4, 5, 6, 7, 2 dup(8)
.rdata:0000000141B80BEA                 db 2 dup(9), 2 dup(0Ah), 2 dup(0Bh), 4 dup(0Ch), 4 dup(0Dh)
.rdata:0000000141B80BF8                 db 4 dup(0Eh), 4 dup(0Fh), 8 dup(10h), 8 dup(11h), 8 dup(12h)
.rdata:0000000141B80C18                 db 8 dup(13h), 10h dup(14h), 10h dup(15h), 10h dup(16h)
.rdata:0000000141B80C50                 db 10h dup(17h), 20h dup(18h), 20h dup(19h), 20h dup(1Ah)
.rdata:0000000141B80CC0                 db 1Fh dup(1Bh), 1Ch, 4 dup(0), 2 dup(1), 2 dup(2), 2 dup(3)
.rdata:0000000141B80CEA                 db 2 dup(4), 2 dup(5), 2 dup(6), 2 dup(7), 2 dup(8), 2 dup(9)
.rdata:0000000141B80CF6                 db 2 dup(0Ah), 2 dup(0Bh), 2 dup(0Ch), 2 dup(0Dh), 2 dup(0Eh)
.rdata:0000000141B80D00 unk_141B80D00   db    0                 ; DATA XREF: sub_140468B70:loc_140468BC1↑o
.rdata:0000000141B80D01                 db    0


__int64 __fastcall sub_1404646B0(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, unsigned int a5)
{
  unsigned int v5; // eax
  int *v7; // r8
  unsigned int v8; // eax
  int v9; // edx
  int v10; // ecx
  int v11; // edi
  __int64 v12; // rdx
  __int64 v13; // rdx
  _QWORD *v14; // r12
  unsigned int v15; // eax
  unsigned int v16; // eax
  __m128i *v17; // rdi
  __m128i *v18; // rsi
  __m128i i; // xmm0
  __int64 v20; // rcx
  unsigned int v21; // eax
  unsigned int v22; // eax
  __m128i *v23; // rdi
  __m128i *v24; // rsi
  __m128i i6; // xmm0
  __int64 i7; // rcx
  unsigned int v27; // eax
  unsigned int v28; // eax
  __m128i *v29; // rdi
  __m128i *v30; // rsi
  __m128i i4; // xmm0
  __int64 i5; // rcx
  unsigned int v33; // eax
  unsigned int v34; // eax
  __m128i *v35; // rdi
  __m128i *v36; // rsi
  __m128i i2; // xmm0
  __int64 i3; // rcx
  unsigned int v39; // eax
  unsigned int v40; // eax
  __m128i *v41; // rdi
  __m128i *v42; // rsi
  __m128i nn; // xmm0
  __int64 i1; // rcx
  unsigned int v45; // eax
  unsigned int v46; // eax
  __m128i *v47; // rdi
  __m128i *v48; // rsi
  __m128i kk; // xmm0
  __int64 mm; // rcx
  unsigned int v51; // eax
  unsigned int v52; // eax
  __m128i *v53; // rdi
  __m128i *v54; // rsi
  __m128i jj; // xmm0
  __int64 v56; // rcx
  unsigned int v57; // eax
  unsigned int v58; // eax
  __m128i *v59; // rdi
  __m128i *v60; // rsi
  __m128i n; // xmm0
  __int64 ii; // rcx
  _QWORD *v63; // rax
  unsigned int v64; // eax
  unsigned int v65; // eax
  __m128i *v66; // rdi
  __m128i *v67; // rsi
  __m128i k; // xmm0
  __int64 m; // rcx
  unsigned int v70; // eax
  unsigned int v71; // eax
  __m128i *v72; // rdi
  __m128i *v73; // rsi
  __m128i j; // xmm0
  unsigned int v75; // r8d
  BOOL v76; // r13d
  unsigned int v77; // r14d
  unsigned int v78; // r12d
  int v79; // r15d
  unsigned int v80; // esi
  __int64 v81; // rax
  int v82; // esi
  __int64 v83; // rdi
  int v84; // ecx
  unsigned int v85; // esi
  unsigned int v86; // ecx
  __int64 v87; // rsi
  __int64 v88; // rdi
  __int64 v89; // r14
  int v90; // eax
  unsigned int v91; // edi
  unsigned int v92; // eax
  _WORD *v93; // r14
  unsigned __int16 *v94; // r15
  unsigned int *v95; // r12
  _WORD *v96; // r13
  __int64 v97; // rax
  int v98; // ecx
  __int64 v99; // rcx
  __int64 v100; // rcx
  unsigned int *v101; // rsi
  unsigned int v102; // edi
  unsigned int v103; // esi
  unsigned int v104; // eax
  int v105; // eax
  unsigned int v106; // edi
  unsigned int v107; // eax
  _WORD *v108; // r14
  unsigned __int16 *v109; // r15
  unsigned int *v110; // r12
  _WORD *v111; // r13
  __int64 v112; // rax
  int v113; // ecx
  __int64 v114; // rcx
  __int64 v115; // rcx
  unsigned int *v116; // rsi
  unsigned int v117; // edi
  unsigned int v118; // esi
  unsigned int v119; // eax
  int v120; // eax
  __int64 v121; // rdi
  __int64 v122; // rsi
  __int64 v123; // r14
  unsigned int v124; // ecx
  int v125; // edi
  __int64 v126; // rdi
  unsigned int v127; // edi
  unsigned int v128; // eax
  _WORD *v129; // r14
  unsigned __int16 *v130; // r15
  unsigned int *v131; // r12
  _WORD *v132; // r13
  __int64 v133; // rax
  int v134; // ecx
  __int64 v135; // rcx
  __int64 v136; // rcx
  unsigned int *v137; // rsi
  unsigned int v138; // edi
  unsigned int v139; // esi
  unsigned int v140; // eax
  int v141; // eax
  unsigned int v142; // edi
  unsigned int v143; // eax
  _WORD *v144; // r14
  unsigned __int16 *v145; // r15
  unsigned int *v146; // r12
  _WORD *v147; // r13
  __int64 v148; // rax
  int v149; // ecx
  __int64 v150; // rcx
  __int64 v151; // rcx
  unsigned int *v152; // rsi
  unsigned int v153; // edi
  unsigned int v154; // esi
  unsigned int v155; // eax
  int v156; // eax
  int v157; // eax
  __int64 result; // rax
  _QWORD *v159; // [rsp+50h] [rbp-B0h]
  unsigned int v160; // [rsp+58h] [rbp-A8h]
  unsigned int v161; // [rsp+60h] [rbp-A0h] BYREF
  int v162; // [rsp+68h] [rbp-98h] BYREF
  __int64 v163; // [rsp+70h] [rbp-90h]
  __int64 v164; // [rsp+78h] [rbp-88h] BYREF
  int v165; // [rsp+80h] [rbp-80h]
  unsigned int v166; // [rsp+84h] [rbp-7Ch]
  unsigned int v167; // [rsp+88h] [rbp-78h] BYREF
  int v168; // [rsp+90h] [rbp-70h] BYREF
  __int64 v169; // [rsp+98h] [rbp-68h]
  __int64 v170; // [rsp+A0h] [rbp-60h]
  int v171; // [rsp+A8h] [rbp-58h] BYREF
  __int64 v172; // [rsp+B0h] [rbp-50h]
  __int64 v173; // [rsp+B8h] [rbp-48h]
  BOOL v174; // [rsp+C0h] [rbp-40h]
  __int64 v175; // [rsp+C4h] [rbp-3Ch] BYREF
  int v176; // [rsp+CCh] [rbp-34h]
  int v177; // [rsp+D0h] [rbp-30h]
  int v178; // [rsp+D8h] [rbp-28h] BYREF
  int v179; // [rsp+E0h] [rbp-20h] BYREF
  int v180; // [rsp+E4h] [rbp-1Ch]
  __int64 v181; // [rsp+E8h] [rbp-18h]
  unsigned int v182; // [rsp+F0h] [rbp-10h]
  __int64 v183; // [rsp+F8h] [rbp-8h]
  _BYTE v184[16]; // [rsp+100h] [rbp+0h] BYREF
  __int64 v185; // [rsp+110h] [rbp+10h]
  __int64 v186; // [rsp+128h] [rbp+28h]
  _DWORD v187[10]; // [rsp+138h] [rbp+38h] BYREF
  int v188; // [rsp+160h] [rbp+60h] BYREF
  _WORD *v189; // [rsp+168h] [rbp+68h]
  __int64 v190; // [rsp+170h] [rbp+70h]
  int v191; // [rsp+178h] [rbp+78h]
  int v192; // [rsp+180h] [rbp+80h] BYREF
  unsigned __int16 *v193; // [rsp+188h] [rbp+88h]
  __int64 v194; // [rsp+190h] [rbp+90h]
  int v195; // [rsp+198h] [rbp+98h]
  int v196; // [rsp+1A0h] [rbp+A0h] BYREF
  unsigned int *v197; // [rsp+1A8h] [rbp+A8h]
  __int64 v198; // [rsp+1B0h] [rbp+B0h] BYREF
  int v199; // [rsp+1B8h] [rbp+B8h]
  _DWORD v200[314]; // [rsp+1C0h] [rbp+C0h] BYREF
  _DWORD v201[32]; // [rsp+6A8h] [rbp+5A8h] BYREF
  _DWORD v202[124]; // [rsp+728h] [rbp+628h] BYREF
  int v203; // [rsp+918h] [rbp+818h]
  _BYTE v204[40]; // [rsp+920h] [rbp+820h] BYREF

  v5 = *(_DWORD *)(a1 + 16);
  v166 = a3;
  v7 = (int *)(a1 + 20);
  v181 = a2;
  v183 = a4;
  v182 = a5;
  if ( v5 >= 4 )
  {
    v8 = v5 - 4;
    *(_DWORD *)(a1 + 16) = v8;
    v9 = *v7 | (2 << v8);
  }
  else
  {
    if ( *(_QWORD *)a1 != *(_QWORD *)(a1 + 8) )
    {
      **(_DWORD **)a1 = *v7 | (2u >> (4 - v5));
      *(_QWORD *)a1 += 4LL;
    }
    v8 = *(_DWORD *)(a1 + 16) + 28;
    *(_DWORD *)(a1 + 16) = v8;
    v9 = 2 << v8;
  }
  *v7 = v9;
  if ( v8 >= 4 )
  {
    v10 = v8 - 4;
    v11 = v9 | (5 << (v8 - 4));
  }
  else
  {
    if ( *(_QWORD *)a1 != *(_QWORD *)(a1 + 8) )
    {
      **(_DWORD **)a1 = v9 | (5u >> (4 - v8));
      *(_QWORD *)a1 += 4LL;
    }
    v10 = *(_DWORD *)(a1 + 16) + 28;
    v11 = 5 << (*(_BYTE *)(a1 + 16) + 28);
  }
  *(_DWORD *)(a1 + 16) = v10;
  *v7 = v11;
  sub_14024CE90();
  v188 = 1;
  v190 = 0LL;
  v189 = 0LL;
  v191 = 128;
  sub_14024CE90();
  v192 = 1;
  v194 = 0LL;
  v193 = 0LL;
  v195 = 128;
  sub_14024CE90();
  v196 = 1;
  v198 = 0LL;
  v197 = 0LL;
  v199 = 64;
  sub_14026B670(&v188, 0x4000LL);
  v12 = (unsigned int)v194;
  v191 = 4096;
  if ( (unsigned int)v194 <= HIDWORD(v194) + 6144 )
    v12 = (unsigned int)(HIDWORD(v194) + 6144);
  sub_14026B670(&v192, v12);
  v13 = (unsigned int)v198;
  if ( (unsigned int)v198 <= HIDWORD(v198) + 6144 )
    v13 = (unsigned int)(HIDWORD(v198) + 6144);
  sub_140294530(&v196, v13);
  HIDWORD(v190) = 0;
  HIDWORD(v194) = 0;
  HIDWORD(v198) = 0;
  v203 = 0;
  sub_14024FE30(v200, 1256LL);
  sub_14024FE30(v201, 128LL);
  sub_14024FE30(v202, 496LL);
  if ( a5 <= 0x200 )
  {
    v159 = (_QWORD *)sub_14027D6D0(56LL);
    v14 = v159;
    if ( v159 )
    {
      *v159 = &off_141B80EC0;
      v15 = sub_14024F0B0();
      sub_140463BF0(v159 + 1, 512LL, 1LL, v15);
      v16 = sub_14024F0B0();
      sub_140463BF0(v159 + 4, 512LL, 1LL, v16);
      v17 = (__m128i *)v159[2];
      v18 = v17 + 128;
      if ( (unsigned int)sub_14027D5D0() )
      {
        for ( i = _mm_load_si128((const __m128i *)&xmmword_141B81210); v17 != v18; ++v17 )
          _mm_stream_si128(v17, i);
      }
      else
      {
        v20 = 512LL;
        if ( v17 <= v18 )
        {
          while ( v20 )
          {
            v17->m128i_i32[0] = -513;
            v17 = (__m128i *)((char *)v17 + 4);
            --v20;
          }
        }
      }
      goto LABEL_120;
    }
LABEL_119:
    v159 = 0LL;
    v14 = 0LL;
    goto LABEL_120;
  }
  if ( a5 > 0x400 )
  {
    if ( a5 > 0x800 )
    {
      if ( a5 > 0x1000 )
      {
        if ( a5 > 0x2000 )
        {
          if ( a5 > 0x4000 )
          {
            if ( a5 > 0x10000 )
            {
              if ( a5 > 0x20000 )
              {
                v63 = (_QWORD *)sub_14027D6D0(56LL);
                v159 = v63;
                v14 = v63;
                if ( a5 > 0x100000 )
                {
                  if ( !v63 )
                    goto LABEL_119;
                  *v63 = &off_141B80FE0;
                  v70 = sub_14024F0B0();
                  sub_140463BF0(v14 + 1, 0x1000000LL, 1LL, v70);
                  v71 = sub_14024F0B0();
                  sub_140463BF0(v14 + 4, a5, 1LL, v71);
                  v72 = (__m128i *)v14[2];
                  v73 = v72 + 0x400000;
                  if ( (unsigned int)sub_14027D5D0() )
                  {
                    for ( j = _mm_load_si128((const __m128i *)&xmmword_141939DC0); v72 != v73; ++v72 )
                      _mm_stream_si128(v72, j);
                  }
                  else if ( v72 <= v73 )
                  {
                    memset(v72, -1, 0x4000000uLL);
                  }
                }
                else
                {
                  if ( !v63 )
                    goto LABEL_119;
                  *v63 = &off_141B80FC0;
                  v64 = sub_14024F0B0();
                  sub_140463BF0(v14 + 1, 0x100000LL, 1LL, v64);
                  v65 = sub_14024F0B0();
                  sub_140463BF0(v14 + 4, 0x100000LL, 1LL, v65);
                  v66 = (__m128i *)v14[2];
                  v67 = v66 + 0x40000;
                  if ( (unsigned int)sub_14027D5D0() )
                  {
                    for ( k = _mm_load_si128((const __m128i *)&xmmword_141B81180); v66 != v67; ++v66 )
                      _mm_stream_si128(v66, k);
                  }
                  else if ( v66 <= v67 )
                  {
                    for ( m = 0x100000LL; m; --m )
                    {
                      v66->m128i_i32[0] = -1048577;
                      v66 = (__m128i *)((char *)v66 + 4);
                    }
                  }
                }
              }
              else
              {
                v159 = (_QWORD *)sub_14027D6D0(56LL);
                v14 = v159;
                if ( !v159 )
                  goto LABEL_119;
                *v159 = &off_141B80FA0;
                v57 = sub_14024F0B0();
                sub_140463BF0(v159 + 1, 0x20000LL, 1LL, v57);
                v58 = sub_14024F0B0();
                sub_140463BF0(v159 + 4, 0x20000LL, 1LL, v58);
                v59 = (__m128i *)v159[2];
                v60 = v59 + 0x8000;
                if ( (unsigned int)sub_14027D5D0() )
                {
                  for ( n = _mm_load_si128((const __m128i *)&xmmword_141B81190); v59 != v60; ++v59 )
                    _mm_stream_si128(v59, n);
                }
                else if ( v59 <= v60 )
                {
                  for ( ii = 0x20000LL; ii; --ii )
                  {
                    v59->m128i_i32[0] = -131073;
                    v59 = (__m128i *)((char *)v59 + 4);
                  }
                }
              }
            }
            else
            {
              v159 = (_QWORD *)sub_14027D6D0(56LL);
              v14 = v159;
              if ( !v159 )
                goto LABEL_119;
              *v159 = &off_141B80F80;
              v51 = sub_14024F0B0();
              sub_140463BF0(v159 + 1, 0x10000LL, 1LL, v51);
              v52 = sub_14024F0B0();
              sub_140463BF0(v159 + 4, 0x10000LL, 1LL, v52);
              v53 = (__m128i *)v159[2];
              v54 = v53 + 0x4000;
              if ( (unsigned int)sub_14027D5D0() )
              {
                for ( jj = _mm_load_si128((const __m128i *)&xmmword_141B811A0); v53 != v54; ++v53 )
                  _mm_stream_si128(v53, jj);
              }
              else
              {
                v56 = 0x10000LL;
                if ( v53 <= v54 )
                {
                  while ( v56 )
                  {
                    v53->m128i_i32[0] = -65537;
                    v53 = (__m128i *)((char *)v53 + 4);
                    --v56;
                  }
                }
              }
            }
          }
          else
          {
            v159 = (_QWORD *)sub_14027D6D0(56LL);
            v14 = v159;
            if ( !v159 )
              goto LABEL_119;
            *v159 = &off_141B80F60;
            v45 = sub_14024F0B0();
            sub_140463BF0(v159 + 1, 0x4000LL, 1LL, v45);
            v46 = sub_14024F0B0();
            sub_140463BF0(v159 + 4, 0x4000LL, 1LL, v46);
            v47 = (__m128i *)v159[2];
            v48 = v47 + 4096;
            if ( (unsigned int)sub_14027D5D0() )
            {
              for ( kk = _mm_load_si128((const __m128i *)&xmmword_141B811C0); v47 != v48; ++v47 )
                _mm_stream_si128(v47, kk);
            }
            else if ( v47 <= v48 )
            {
              for ( mm = 0x4000LL; mm; --mm )
              {
                v47->m128i_i32[0] = -16385;
                v47 = (__m128i *)((char *)v47 + 4);
              }
            }
          }
        }
        else
        {
          v159 = (_QWORD *)sub_14027D6D0(56LL);
          v14 = v159;
          if ( !v159 )
            goto LABEL_119;
          *v159 = &off_141B80F40;
          v39 = sub_14024F0B0();
          sub_140463BF0(v159 + 1, 0x2000LL, 1LL, v39);
          v40 = sub_14024F0B0();
          sub_140463BF0(v159 + 4, 0x2000LL, 1LL, v40);
          v41 = (__m128i *)v159[2];
          v42 = v41 + 2048;
          if ( (unsigned int)sub_14027D5D0() )
          {
            for ( nn = _mm_load_si128((const __m128i *)&xmmword_141B811D0); v41 != v42; ++v41 )
              _mm_stream_si128(v41, nn);
          }
          else if ( v41 <= v42 )
          {
            for ( i1 = 0x2000LL; i1; --i1 )
            {
              v41->m128i_i32[0] = -8193;
              v41 = (__m128i *)((char *)v41 + 4);
            }
          }
        }
      }
      else
      {
        v159 = (_QWORD *)sub_14027D6D0(56LL);
        v14 = v159;
        if ( !v159 )
          goto LABEL_119;
        *v159 = &off_141B80F20;
        v33 = sub_14024F0B0();
        sub_140463BF0(v159 + 1, 4096LL, 1LL, v33);
        v34 = sub_14024F0B0();
        sub_140463BF0(v159 + 4, 4096LL, 1LL, v34);
        v35 = (__m128i *)v159[2];
        v36 = v35 + 1024;
        if ( (unsigned int)sub_14027D5D0() )
        {
          for ( i2 = _mm_load_si128((const __m128i *)&xmmword_141B811E0); v35 != v36; ++v35 )
            _mm_stream_si128(v35, i2);
        }
        else if ( v35 <= v36 )
        {
          for ( i3 = 4096LL; i3; --i3 )
          {
            v35->m128i_i32[0] = -4097;
            v35 = (__m128i *)((char *)v35 + 4);
          }
        }
      }
    }
    else
    {
      v159 = (_QWORD *)sub_14027D6D0(56LL);
      v14 = v159;
      if ( !v159 )
        goto LABEL_119;
      *v159 = &off_141B80F00;
      v27 = sub_14024F0B0();
      sub_140463BF0(v159 + 1, 2048LL, 1LL, v27);
      v28 = sub_14024F0B0();
      sub_140463BF0(v159 + 4, 2048LL, 1LL, v28);
      v29 = (__m128i *)v159[2];
      v30 = v29 + 512;
      if ( (unsigned int)sub_14027D5D0() )
      {
        for ( i4 = _mm_load_si128((const __m128i *)&xmmword_141B811F0); v29 != v30; ++v29 )
          _mm_stream_si128(v29, i4);
      }
      else if ( v29 <= v30 )
      {
        for ( i5 = 2048LL; i5; --i5 )
        {
          v29->m128i_i32[0] = -2049;
          v29 = (__m128i *)((char *)v29 + 4);
        }
      }
    }
  }
  else
  {
    v159 = (_QWORD *)sub_14027D6D0(56LL);
    v14 = v159;
    if ( !v159 )
      goto LABEL_119;
    *v159 = &off_141B80EE0;
    v21 = sub_14024F0B0();
    sub_140463BF0(v159 + 1, 1024LL, 1LL, v21);
    v22 = sub_14024F0B0();
    sub_140463BF0(v159 + 4, 1024LL, 1LL, v22);
    v23 = (__m128i *)v159[2];
    v24 = v23 + 256;
    if ( (unsigned int)sub_14027D5D0() )
    {
      for ( i6 = _mm_load_si128((const __m128i *)&xmmword_141B81200); v23 != v24; ++v23 )
        _mm_stream_si128(v23, i6);
    }
    else if ( v23 <= v24 )
    {
      for ( i7 = 1024LL; i7; --i7 )
      {
        v23->m128i_i32[0] = -1025;
        v23 = (__m128i *)((char *)v23 + 4);
      }
    }
  }
LABEL_120:
  sub_140463C80(v204, v183, a5);
  (*(void (__fastcall **)(_QWORD *, __int64, _QWORD, _QWORD, unsigned int, _BYTE *))(*v14 + 24LL))(
    v14,
    v183,
    a5,
    0LL,
    a5,
    v204);
  sub_140463AF0(v184, v166);
  sub_140463C80(v187, v181, v166);
  v75 = v166;
  v174 = 0;
  v76 = 0;
  v176 = 0;
  v77 = 0;
  v161 = 0;
  v78 = 0;
  v177 = 0;
  v79 = 0;
  v180 = 0;
  LOBYTE(v80) = 0;
  v165 = 0;
  v178 = 0;
  v160 = 0;
  if ( v166 )
  {
    while ( 1 )
    {
      LODWORD(v175) = 0;
      v81 = *v159;
      v82 = v187[v80 & 7];
      v179 = 0;
      (*(void (__fastcall **)(_QWORD *, __int64, _QWORD, __int64, unsigned int, unsigned int, int, __int64 *, int *))(v81 + 8))(
        v159,
        v183,
        v182,
        v181,
        v75,
        v160,
        v187[((_BYTE)v160 - 2) & 7] - v82,
        &v175,
        &v179);
      v83 = v181;
      HIDWORD(v175) = 0;
      v167 = 0;
      v84 = v187[((_BYTE)v160 + 3) & 7] - v82;
      v85 = v160;
      sub_14046B8F0((unsigned int)v184, v181, v166, v160, v84, (__int64)&v175 + 4, (__int64)&v167);
      if ( v77 )
      {
        v86 = HIDWORD(v175);
        if ( (unsigned int)v175 > HIDWORD(v175) )
          v86 = v175;
        if ( v77 >= v86 )
        {
          if ( v76 )
          {
            v87 = v77 - 3;
            if ( (unsigned int)v87 >= 0x100 )
              sub_1402898B0(
                "length < arrsize(s_codeLength)",
                "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpDict.cpp",
                112LL);
            v88 = (unsigned int)byte_141B80BC0[v87 + 32] + 256;
            if ( v78 >= 0x20 )
            {
              v90 = sub_14027A120(v78);
              v89 = ((v78 >> (v90 - 1)) & 1) + 2 * v90;
            }
            else
            {
              v89 = byte_141B80BC0[v78];
            }
            if ( (unsigned int)v88 >= 0x13A )
              sub_1402898B0(
                "litLenCode < arrsize(m_litLenFreq)",
                "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpDict.cpp",
                469LL);
            if ( (unsigned int)v89 >= 0x20 )
              sub_1402898B0(
                "distCode < arrsize(m_distWindowFreq)",
                "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpDict.cpp",
                470LL);
            ++v200[v88];
            ++v201[v89];
            *(_WORD *)sub_14046D560(&v188) = v87 + 256;
            *(_WORD *)sub_14046D560(&v192) = v78;
            if ( (v190 & 0xFFF00000000LL) == 0 )
            {
              if ( HIDWORD(v190) == 0x10000 )
              {
                sub_14024E030();
                v162 = 3;
                v164 = 0LL;
                v163 = 0LL;
                sub_14046FA80(&v162, 314LL, v200, a1);
                sub_14024E030();
                v171 = 3;
                v173 = 0LL;
                v172 = 0LL;
                sub_14046FA80(&v171, 32LL, v201, a1);
                sub_14024CE90();
                v168 = 1;
                v170 = 0LL;
                v169 = 0LL;
                sub_14046FA80(&v168, 124LL, v202, a1);
                v91 = ((unsigned int)(HIDWORD(v190) + 4095) >> 12) - 1;
                if ( v91 >= 0x10 )
                  sub_1402898B0(
                    "totalCode < 0x10",
                    "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpDict.cpp",
                    356LL);
                if ( (v91 & 0xFFFFFFF0) != 0 )
                  sub_1402898B0(
                    "!(value & ~((1 << bitCount) - 1))",
                    "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
                    139LL);
                v92 = *(_DWORD *)(a1 + 16);
                if ( v92 >= 4 )
                {
                  *(_DWORD *)(a1 + 20) |= v91 << (v92 - 4);
                  *(_DWORD *)(a1 + 16) = v92 - 4;
                }
                else
                {
                  if ( *(_QWORD *)a1 != *(_QWORD *)(a1 + 8) )
                  {
                    **(_DWORD **)a1 = *(_DWORD *)(a1 + 20) | (v91 >> (4 - v92));
                    *(_QWORD *)a1 += 4LL;
                  }
                  *(_DWORD *)(a1 + 16) += 28;
                  *(_DWORD *)(a1 + 20) = v91 << *(_DWORD *)(a1 + 16);
                }
                v93 = v189;
                v94 = v193;
                v95 = v197;
                v96 = &v189[HIDWORD(v190)];
                if ( v189 != v96 )
                {
                  do
                  {
                    v97 = (unsigned __int16)*v93;
                    v98 = *v93 & 0xFF00;
                    if ( v98 )
                    {
                      if ( v98 == 256 )
                      {
                        sub_140468C90((unsigned int)(v97 - 256), 256LL, &v162, a1);
                        v100 = *v94++;
                        sub_140468A30(v100, &v171, a1);
                      }
                      else if ( v98 == 512 )
                      {
                        sub_140468C90((unsigned int)(v97 - 512), 285LL, &v162, a1);
                        v99 = *v95++;
                        sub_140468B70(v99, &v168, a1);
                      }
                    }
                    else
                    {
                      v167 = (unsigned __int16)*v93;
                      if ( (unsigned int)v97 >= HIDWORD(v164) )
                      {
                        sub_140244E10(
                          (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
                          690,
                          (unsigned int)"Index: {}, Count: {}",
                          (unsigned int)&v167,
                          (__int64)&v164 + 4);
                        __debugbreak();
                      }
                      v101 = (unsigned int *)(v163 + 8 * v97);
                      if ( *v101 >= 0x20 )
                        sub_1402898B0(
                          "code.bitCount < 8 * sizeof(code.value)",
                          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpHuff.h",
                          146LL);
                      v102 = v101[1];
                      v103 = *v101;
                      if ( v103 >= 0x20 )
                        sub_1402898B0(
                          "bitCount < 8 * sizeof(value)",
                          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
                          138LL);
                      if ( ((-1 << v103) & v102) != 0 )
                        sub_1402898B0(
                          "!(value & ~((1 << bitCount) - 1))",
                          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
                          139LL);
                      v104 = *(_DWORD *)(a1 + 16);
                      if ( v104 >= v103 )
                      {
                        v105 = v104 - v103;
                        *(_DWORD *)(a1 + 16) = v105;
                        *(_DWORD *)(a1 + 20) |= v102 << v105;
                      }
                      else
                      {
                        if ( *(_QWORD *)a1 != *(_QWORD *)(a1 + 8) )
                        {
                          **(_DWORD **)a1 = *(_DWORD *)(a1 + 20) | (v102 >> (v103 - v104));
                          *(_QWORD *)a1 += 4LL;
                        }
                        *(_DWORD *)(a1 + 16) += 32 - v103;
                        *(_DWORD *)(a1 + 20) = v102 << *(_DWORD *)(a1 + 16);
                      }
                    }
                    ++v93;
                  }
                  while ( v93 != v96 );
                }
                HIDWORD(v190) = 0;
                HIDWORD(v194) = 0;
                HIDWORD(v198) = 0;
                v203 = 0;
                sub_14024FE30(v200, 1256LL);
                sub_14024FE30(v201, 128LL);
                sub_14024FE30(v202, 496LL);
                if ( v169 )
                  sub_14027D7E0(v169, 0LL, 0LL);
                v169 = 0LL;
                v170 = 0LL;
                if ( v172 )
                  sub_14027D7E0(v172, 0LL, 0LL);
                v172 = 0LL;
                v173 = 0LL;
                if ( v163 )
                  sub_14027D7E0(v163, 0LL, 0LL);
                goto LABEL_171;
              }
              if ( (unsigned int)(2 * (HIDWORD(v194) + HIDWORD(v198)) - v203) < 0x1400 )
              {
                v203 = HIDWORD(v194) + HIDWORD(v198);
              }
              else if ( HIDWORD(v190) )
              {
                sub_14024E030();
                v162 = 3;
                v164 = 0LL;
                v163 = 0LL;
                sub_14046FA80(&v162, 314LL, v200, a1);
                sub_14024E030();
                v168 = 3;
                v170 = 0LL;
                v169 = 0LL;
                sub_14046FA80(&v168, 32LL, v201, a1);
                sub_14024CE90();
                v171 = 1;
                v173 = 0LL;
                v172 = 0LL;
                sub_14046FA80(&v171, 124LL, v202, a1);
                v106 = ((unsigned int)(HIDWORD(v190) + 4095) >> 12) - 1;
                if ( v106 >= 0x10 )
                  sub_1402898B0(
                    "totalCode < 0x10",
                    "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpDict.cpp",
                    356LL);
                if ( (v106 & 0xFFFFFFF0) != 0 )
                  sub_1402898B0(
                    "!(value & ~((1 << bitCount) - 1))",
                    "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
                    139LL);
                v107 = *(_DWORD *)(a1 + 16);
                if ( v107 >= 4 )
                {
                  *(_DWORD *)(a1 + 20) |= v106 << (v107 - 4);
                  *(_DWORD *)(a1 + 16) = v107 - 4;
                }
                else
                {
                  if ( *(_QWORD *)a1 != *(_QWORD *)(a1 + 8) )
                  {
                    **(_DWORD **)a1 = *(_DWORD *)(a1 + 20) | (v106 >> (4 - v107));
                    *(_QWORD *)a1 += 4LL;
                  }
                  *(_DWORD *)(a1 + 16) += 28;
                  *(_DWORD *)(a1 + 20) = v106 << *(_DWORD *)(a1 + 16);
                }
                v108 = v189;
                v109 = v193;
                v110 = v197;
                v111 = &v189[HIDWORD(v190)];
                if ( v189 != v111 )
                {
                  do
                  {
                    v112 = (unsigned __int16)*v108;
                    v113 = *v108 & 0xFF00;
                    if ( v113 )
                    {
                      if ( v113 == 256 )
                      {
                        sub_140468C90((unsigned int)(v112 - 256), 256LL, &v162, a1);
                        v115 = *v109++;
                        sub_140468A30(v115, &v168, a1);
                      }
                      else if ( v113 == 512 )
                      {
                        sub_140468C90((unsigned int)(v112 - 512), 285LL, &v162, a1);
                        v114 = *v110++;
                        sub_140468B70(v114, &v171, a1);
                      }
                    }
                    else
                    {
                      v167 = (unsigned __int16)*v108;
                      if ( (unsigned int)v112 >= HIDWORD(v164) )
                      {
                        sub_140244E10(
                          (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
                          690,
                          (unsigned int)"Index: {}, Count: {}",
                          (unsigned int)&v167,
                          (__int64)&v164 + 4);
                        __debugbreak();
                      }
                      v116 = (unsigned int *)(v163 + 8 * v112);
                      if ( *v116 >= 0x20 )
                        sub_1402898B0(
                          "code.bitCount < 8 * sizeof(code.value)",
                          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpHuff.h",
                          146LL);
                      v117 = v116[1];
                      v118 = *v116;
                      if ( v118 >= 0x20 )
                        sub_1402898B0(
                          "bitCount < 8 * sizeof(value)",
                          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
                          138LL);
                      if ( ((-1 << v118) & v117) != 0 )
                        sub_1402898B0(
                          "!(value & ~((1 << bitCount) - 1))",
                          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
                          139LL);
                      v119 = *(_DWORD *)(a1 + 16);
                      if ( v119 >= v118 )
                      {
                        v120 = v119 - v118;
                        *(_DWORD *)(a1 + 16) = v120;
                        *(_DWORD *)(a1 + 20) |= v117 << v120;
                      }
                      else
                      {
                        if ( *(_QWORD *)a1 != *(_QWORD *)(a1 + 8) )
                        {
                          **(_DWORD **)a1 = *(_DWORD *)(a1 + 20) | (v117 >> (v118 - v119));
                          *(_QWORD *)a1 += 4LL;
                        }
                        *(_DWORD *)(a1 + 16) += 32 - v118;
                        *(_DWORD *)(a1 + 20) = v117 << *(_DWORD *)(a1 + 16);
                      }
                    }
                    ++v108;
                  }
                  while ( v108 != v111 );
                }
                HIDWORD(v190) = 0;
                HIDWORD(v194) = 0;
                HIDWORD(v198) = 0;
                v203 = 0;
                sub_14024FE30(v200, 1256LL);
                sub_14024FE30(v201, 128LL);
                sub_14024FE30(v202, 496LL);
                if ( v172 )
                  sub_14027D7E0(v172, 0LL, 0LL);
                v172 = 0LL;
                v173 = 0LL;
                if ( v169 )
                  sub_14027D7E0(v169, 0LL, 0LL);
                v169 = 0LL;
                v170 = 0LL;
                if ( v163 )
                {
                  sub_14027D7E0(v163, 0LL, 0LL);
                  v76 = v174;
                }
                else
                {
LABEL_171:
                  v76 = v174;
                }
              }
            }
          }
          else
          {
            v121 = v77 - 6;
            if ( (unsigned int)v121 >= 0x100 )
              sub_1402898B0(
                "length < arrsize(s_codeLength)",
                "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpDict.cpp",
                112LL);
            v122 = (unsigned int)byte_141B80BC0[v121 + 32] + 285;
            v123 = (unsigned int)sub_140464630(v78);
            if ( (unsigned int)v122 >= 0x13A )
              sub_1402898B0(
                "litLenCode < arrsize(m_litLenFreq)",
                "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpDict.cpp",
                441LL);
            if ( (unsigned int)v123 >= 0x7C )
              sub_1402898B0(
                "distCode < arrsize(m_distDeltaFreq)",
                "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpDict.cpp",
                442LL);
            ++v200[v122];
            ++v202[v123];
            *(_WORD *)sub_14046D560(&v188) = v121 + 512;
            sub_140294530(&v196, (unsigned int)(HIDWORD(v198) + 1));
            v124 = HIDWORD(v198) + 1;
            v178 = HIDWORD(v198) + 1;
            if ( (unsigned int)(HIDWORD(v198) + 1) < HIDWORD(v198) || v124 > (unsigned int)v198 )
            {
              sub_1402504A0(
                (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
                730,
                (unsigned int)"New Count: {}, Count: {}, Alloc: {}",
                (unsigned int)&v178,
                (__int64)&v198 + 4,
                (__int64)&v198);
              __debugbreak();
            }
            ++HIDWORD(v198);
            v197[v124 - 1] = v78;
            if ( (v190 & 0xFFF00000000LL) == 0 )
            {
              if ( HIDWORD(v190) == 0x10000 || (unsigned int)(2 * (HIDWORD(v194) + HIDWORD(v198)) - v203) >= 0x1400 )
                sub_14046CE20(&v188, a1);
              else
                v203 = HIDWORD(v194) + HIDWORD(v198);
            }
            v178 = v180;
          }
          v125 = v176;
          sub_14046DEF0((unsigned int)v184, v181, v166, v160, v176 - 1, (__int64)v187);
          v79 = v177;
          v80 = v125 + v160 - 1;
          v176 = 0;
          v77 = 0;
          goto LABEL_301;
        }
      }
      else if ( v175 )
      {
        goto LABEL_295;
      }
      v126 = *(unsigned __int8 *)(v160 - (v77 != 0) + v83);
      ++v200[v126];
      *(_WORD *)sub_14046D560(&v188) = v126;
      if ( (v190 & 0xFFF00000000LL) == 0 )
      {
        if ( HIDWORD(v190) == 0x10000 )
        {
          sub_14024E030();
          v162 = 3;
          v164 = 0LL;
          v163 = 0LL;
          sub_14046FA80(&v162, 314LL, v200, a1);
          sub_14024E030();
          v168 = 3;
          v170 = 0LL;
          v169 = 0LL;
          sub_14046FA80(&v168, 32LL, v201, a1);
          sub_14024CE90();
          v171 = 1;
          v173 = 0LL;
          v172 = 0LL;
          sub_14046FA80(&v171, 124LL, v202, a1);
          v127 = ((unsigned int)(HIDWORD(v190) + 4095) >> 12) - 1;
          if ( v127 >= 0x10 )
            sub_1402898B0(
              "totalCode < 0x10",
              "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpDict.cpp",
              356LL);
          if ( (v127 & 0xFFFFFFF0) != 0 )
            sub_1402898B0(
              "!(value & ~((1 << bitCount) - 1))",
              "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
              139LL);
          v128 = *(_DWORD *)(a1 + 16);
          if ( v128 >= 4 )
          {
            *(_DWORD *)(a1 + 20) |= v127 << (v128 - 4);
            *(_DWORD *)(a1 + 16) = v128 - 4;
          }
          else
          {
            if ( *(_QWORD *)a1 != *(_QWORD *)(a1 + 8) )
            {
              **(_DWORD **)a1 = *(_DWORD *)(a1 + 20) | (v127 >> (4 - v128));
              *(_QWORD *)a1 += 4LL;
            }
            *(_DWORD *)(a1 + 16) += 28;
            *(_DWORD *)(a1 + 20) = v127 << *(_DWORD *)(a1 + 16);
          }
          v129 = v189;
          v130 = v193;
          v131 = v197;
          v132 = &v189[HIDWORD(v190)];
          if ( v189 != v132 )
          {
            do
            {
              v133 = (unsigned __int16)*v129;
              v134 = *v129 & 0xFF00;
              if ( v134 )
              {
                if ( v134 == 256 )
                {
                  sub_140468C90((unsigned int)(v133 - 256), 256LL, &v162, a1);
                  v136 = *v130++;
                  sub_140468A30(v136, &v168, a1);
                }
                else if ( v134 == 512 )
                {
                  sub_140468C90((unsigned int)(v133 - 512), 285LL, &v162, a1);
                  v135 = *v131++;
                  sub_140468B70(v135, &v171, a1);
                }
              }
              else
              {
                v161 = (unsigned __int16)*v129;
                if ( (unsigned int)v133 >= HIDWORD(v164) )
                {
                  sub_140244E10(
                    (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
                    690,
                    (unsigned int)"Index: {}, Count: {}",
                    (unsigned int)&v161,
                    (__int64)&v164 + 4);
                  JUMPOUT(0x1404662F2LL);
                }
                v137 = (unsigned int *)(v163 + 8 * v133);
                if ( *v137 >= 0x20 )
                  sub_1402898B0(
                    "code.bitCount < 8 * sizeof(code.value)",
                    "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpHuff.h",
                    146LL);
                v138 = v137[1];
                v139 = *v137;
                if ( v139 >= 0x20 )
                  sub_1402898B0(
                    "bitCount < 8 * sizeof(value)",
                    "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
                    138LL);
                if ( ((-1 << v139) & v138) != 0 )
                  sub_1402898B0(
                    "!(value & ~((1 << bitCount) - 1))",
                    "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
                    139LL);
                v140 = *(_DWORD *)(a1 + 16);
                if ( v140 >= v139 )
                {
                  v141 = v140 - v139;
                  *(_DWORD *)(a1 + 16) = v141;
                  *(_DWORD *)(a1 + 20) |= v138 << v141;
                }
                else
                {
                  if ( *(_QWORD *)a1 != *(_QWORD *)(a1 + 8) )
                  {
                    **(_DWORD **)a1 = *(_DWORD *)(a1 + 20) | (v138 >> (v139 - v140));
                    *(_QWORD *)a1 += 4LL;
                  }
                  *(_DWORD *)(a1 + 16) += 32 - v139;
                  *(_DWORD *)(a1 + 20) = v138 << *(_DWORD *)(a1 + 16);
                }
              }
              ++v129;
            }
            while ( v129 != v132 );
            goto LABEL_255;
          }
          goto LABEL_256;
        }
        if ( (unsigned int)(2 * (HIDWORD(v198) + HIDWORD(v194)) - v203) < 0x1400 )
        {
          v203 = HIDWORD(v198) + HIDWORD(v194);
        }
        else if ( HIDWORD(v190) )
        {
          sub_14024E030();
          v162 = 3;
          v164 = 0LL;
          v163 = 0LL;
          sub_14046FA80(&v162, 314LL, v200, a1);
          sub_14024E030();
          v168 = 3;
          v170 = 0LL;
          v169 = 0LL;
          sub_14046FA80(&v168, 32LL, v201, a1);
          sub_14024CE90();
          v171 = 1;
          v173 = 0LL;
          v172 = 0LL;
          sub_14046FA80(&v171, 124LL, v202, a1);
          v142 = ((unsigned int)(HIDWORD(v190) + 4095) >> 12) - 1;
          if ( v142 >= 0x10 )
            sub_1402898B0(
              "totalCode < 0x10",
              "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpDict.cpp",
              356LL);
          if ( (v142 & 0xFFFFFFF0) != 0 )
            sub_1402898B0(
              "!(value & ~((1 << bitCount) - 1))",
              "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
              139LL);
          v143 = *(_DWORD *)(a1 + 16);
          if ( v143 >= 4 )
          {
            *(_DWORD *)(a1 + 20) |= v142 << (v143 - 4);
            *(_DWORD *)(a1 + 16) = v143 - 4;
          }
          else
          {
            if ( *(_QWORD *)a1 != *(_QWORD *)(a1 + 8) )
            {
              **(_DWORD **)a1 = *(_DWORD *)(a1 + 20) | (v142 >> (4 - v143));
              *(_QWORD *)a1 += 4LL;
            }
            *(_DWORD *)(a1 + 16) += 28;
            *(_DWORD *)(a1 + 20) = v142 << *(_DWORD *)(a1 + 16);
          }
          v144 = v189;
          v145 = v193;
          v146 = v197;
          v147 = &v189[HIDWORD(v190)];
          if ( v189 != v147 )
          {
            do
            {
              v148 = (unsigned __int16)*v144;
              v149 = *v144 & 0xFF00;
              if ( v149 )
              {
                if ( v149 == 256 )
                {
                  sub_140468C90((unsigned int)(v148 - 256), 256LL, &v162, a1);
                  v151 = *v145++;
                  sub_140468A30(v151, &v168, a1);
                }
                else if ( v149 == 512 )
                {
                  sub_140468C90((unsigned int)(v148 - 512), 285LL, &v162, a1);
                  v150 = *v146++;
                  sub_140468B70(v150, &v171, a1);
                }
              }
              else
              {
                v161 = (unsigned __int16)*v144;
                if ( (unsigned int)v148 >= HIDWORD(v164) )
                {
                  sub_140244E10(
                    (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
                    690,
                    (unsigned int)"Index: {}, Count: {}",
                    (unsigned int)&v161,
                    (__int64)&v164 + 4);
                  __debugbreak();
                }
                v152 = (unsigned int *)(v163 + 8 * v148);
                if ( *v152 >= 0x20 )
                  sub_1402898B0(
                    "code.bitCount < 8 * sizeof(code.value)",
                    "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpHuff.h",
                    146LL);
                v153 = v152[1];
                v154 = *v152;
                if ( v154 >= 0x20 )
                  sub_1402898B0(
                    "bitCount < 8 * sizeof(value)",
                    "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
                    138LL);
                if ( ((-1 << v154) & v153) != 0 )
                  sub_1402898B0(
                    "!(value & ~((1 << bitCount) - 1))",
                    "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
                    139LL);
                v155 = *(_DWORD *)(a1 + 16);
                if ( v155 >= v154 )
                {
                  v156 = v155 - v154;
                  *(_DWORD *)(a1 + 16) = v156;
                  *(_DWORD *)(a1 + 20) |= v153 << v156;
                }
                else
                {
                  if ( *(_QWORD *)a1 != *(_QWORD *)(a1 + 8) )
                  {
                    **(_DWORD **)a1 = *(_DWORD *)(a1 + 20) | (v153 >> (v154 - v155));
                    *(_QWORD *)a1 += 4LL;
                  }
                  *(_DWORD *)(a1 + 16) += 32 - v154;
                  *(_DWORD *)(a1 + 20) = v153 << *(_DWORD *)(a1 + 16);
                }
              }
              ++v144;
            }
            while ( v144 != v147 );
LABEL_255:
            v85 = v160;
          }
LABEL_256:
          HIDWORD(v190) = 0;
          HIDWORD(v194) = 0;
          HIDWORD(v198) = 0;
          v203 = 0;
          sub_14024FE30(v200, 1256LL);
          sub_14024FE30(v201, 128LL);
          sub_14024FE30(v202, 496LL);
          if ( v172 )
            sub_14027D7E0(v172, 0LL, 0LL);
          v173 = 0LL;
          v172 = 0LL;
          if ( v169 )
            sub_14027D7E0(v169, 0LL, 0LL);
          v169 = 0LL;
          v170 = 0LL;
          if ( v163 )
            sub_14027D7E0(v163, 0LL, 0LL);
          v79 = v165;
        }
      }
LABEL_295:
      sub_14046DEF0((unsigned int)v184, v181, v166, v85, 1, (__int64)v187);
      v77 = v175;
      v176 = v175;
      v76 = HIDWORD(v175) >= (unsigned int)v175;
      v174 = v76;
      if ( HIDWORD(v175) < (unsigned int)v175 )
      {
        v161 = v179 - v79;
        v180 = v179;
        if ( (unsigned int)(v179 - v178) <= 0x105 || (v157 = v79 + v175, (unsigned int)(v178 - v179) <= 0x105) )
          v157 = v175 + v179;
      }
      else
      {
        v77 = HIDWORD(v175);
        v176 = HIDWORD(v175);
        v161 = v167;
        v157 = v79 + HIDWORD(v175);
      }
      v80 = v85 + 1;
      v177 = v157;
      ++v79;
LABEL_301:
      v75 = v166;
      v165 = v79;
      v160 = v80;
      if ( v80 >= v166 )
        break;
      v78 = v161;
    }
  }
  sub_14046CE20(&v188, a1);
  result = (*(__int64 (__fastcall **)(_QWORD *, __int64))*v159)(v159, 1LL);
  if ( v186 )
    result = sub_14027D7E0(v186, 0LL, 0LL);
  if ( v185 )
    result = sub_14027D7E0(v185, 0LL, 0LL);
  if ( v197 )
    result = sub_14027D7E0(v197, 0LL, 0LL);
  v197 = 0LL;
  v198 = 0LL;
  if ( v193 )
    result = sub_14027D7E0(v193, 0LL, 0LL);
  v193 = 0LL;
  v194 = 0LL;
  if ( v189 )
    return sub_14027D7E0(v189, 0LL, 0LL);
  return result;
}


void *__fastcall sub_1404636D0(
        char *a1,
        _DWORD *a2,
        char *a3,
        unsigned int a4,
        unsigned __int64 a5,
        unsigned int a6,
        int a7,
        _DWORD *a8)
{
  unsigned __int64 v8; // rdi
  char *v12; // r15
  int v13; // eax
  int v14; // edx
  unsigned int v15; // eax
  void *result; // rax
  char *v17; // [rsp+30h] [rbp-48h] BYREF
  char *v18; // [rsp+38h] [rbp-40h]
  __int64 v19; // [rsp+40h] [rbp-38h]

  v8 = a4;
  v12 = &a1[a4];
  if ( v12 > a3 && &a3[a4] > a1 )
    sub_1402898B0(
      "((unsigned_ptr)outputData + sourceBytes <= (unsigned_ptr)sourceData) || ((unsigned_ptr)sourceData + sourceBytes <="
      " (unsigned_ptr)outputData)",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpApi.cpp",
      38LL);
  if ( (unsigned __int64)v12 > a5 && a5 + a6 > (unsigned __int64)a1 )
    sub_1402898B0(
      "((unsigned_ptr)outputData + sourceBytes <= (unsigned_ptr)oldSourceData) || ((unsigned_ptr)oldSourceData + oldSourc"
      "eBytes <= (unsigned_ptr)outputData)",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpApi.cpp",
      40LL);
  if ( a7 )
    sub_1402898B0("!flags", "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpApi.cpp", 43LL);
  if ( a8 )
    *a8 = 0;
  v17 = a1;
  v18 = &a1[4 * (v8 >> 2)];
  if ( a5 && 2 * a6 >= (unsigned int)v8 && 2 * (int)v8 >= a6 )
  {
    v13 = 1;
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  LODWORD(v19) = 28;
  HIDWORD(v19) = v14 << 28;
  if ( v13 )
  {
    if ( !a5 )
      sub_1402898B0("oldSourceData", "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpApi.cpp", 71LL);
    if ( !a6 )
      sub_1402898B0("oldSourceBytes", "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpApi.cpp", 72LL);
    if ( a8 )
      *a8 = 1;
    sub_1404646B0((__int64)&v17, (__int64)a3, v8, a5, a6);
  }
  else
  {
    sub_140466EC0(&v17, a3, (unsigned int)v8);
  }
  if ( (_DWORD)v19 != 32 )
  {
    if ( v17 != v18 )
    {
      *(_DWORD *)v17 = HIDWORD(v19);
      v17 += 4;
    }
    v19 = 32LL;
  }
  v15 = (_DWORD)v17 - (_DWORD)a1;
  *a2 = (_DWORD)v17 - (_DWORD)a1;
  if ( v15 > (unsigned int)v8 )
    sub_1402898B0(
      "*outputBytes <= sourceBytes",
      "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpApi.cpp",
      90LL);
  result = (void *)((unsigned int)*a2 + 4LL);
  if ( (unsigned __int64)result > v8 )
  {
    *a2 = v8;
    return j_memcpy(a1, a3, v8);
  }
  return result;
}


__int64 __fastcall sub_1403DE630(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
{
  char *v7; // rax
  unsigned int v8; // r9d
  __int64 result; // rax
  unsigned int v10; // [rsp+58h] [rbp+10h] BYREF

  *(_DWORD *)(a3 + 14) = sub_14026C7C0(*(_QWORD *)(a2 + 12));
  v7 = (char *)sub_1404AE690(a4);
  v8 = *(_DWORD *)(a3 + 14);
  *(_QWORD *)(a3 + 22) = v7;
  sub_1404636D0(v7, &v10, *(char **)(a2 + 12), v8, 0LL, 0, 0, 0LL);
  result = v10;
  *(_DWORD *)(a3 + 18) = v10;
  return result;
}




.rdata:0000000141B80CDF                 db  1Ch
.rdata:0000000141B80CE0 ; unsigned __int8 byte_141B80CE0[32]
.rdata:0000000141B80CE0 byte_141B80CE0  db 4 dup(0), 2 dup(1), 2 dup(2), 2 dup(3), 2 dup(4), 2 dup(5)
.rdata:0000000141B80CEE                 db 2 dup(6), 2 dup(7), 2 dup(8), 2 dup(9), 2 dup(0Ah)
.rdata:0000000141B80CF8                 db 2 dup(0Bh), 2 dup(0Ch), 2 dup(0Dh), 2 dup(0Eh)
.rdata:0000000141B80D00 ; unsigned __int8 byte_141B80D00[160]
.rdata:0000000141B80D00 byte_141B80D00  db 8 dup(0), 4 dup(1), 4 dup(2), 4 dup(3), 4 dup(4), 4 dup(5)
.rdata:0000000141B80D00                                         ; DATA XREF: sub_140468B70:loc_140468BC1↑o
.rdata:0000000141B80D1C                 db 4 dup(6), 4 dup(7), 4 dup(8), 4 dup(9), 4 dup(0Ah)
.rdata:0000000141B80D30                 db 4 dup(0Bh), 4 dup(0Ch), 4 dup(0Dh), 4 dup(0Eh), 4 dup(0Fh)
.rdata:0000000141B80D44                 db 4 dup(10h), 4 dup(11h), 4 dup(12h), 4 dup(13h), 4 dup(14h)
.rdata:0000000141B80D58                 db 4 dup(15h), 4 dup(16h), 4 dup(17h), 4 dup(18h), 4 dup(19h)
.rdata:0000000141B80D6C                 db 4 dup(1Ah), 4 dup(1Bh), 4 dup(1Ch), 4 dup(1Dh), 0Ch dup(0)
.rdata:0000000141B80D88                 db 4 dup(1), 4 dup(2), 4 dup(3), 4 dup(4), 4 dup(5), 4 dup(0)
.rdata:0000000141B80DA0 aDPerforceLiveN_191 db 'D:\Perforce\Live\NAEU\v2\Code\Arena\Services\Compress\CmpDict.cpp'



__int64 __fastcall sub_140466300(_BYTE *a1, int a2, __int64 a3, __int64 a4, unsigned int a5)
{
  unsigned int v5; // eax
  unsigned int v7; // r8d
  unsigned int *v8; // r12
  unsigned int v9; // r11d
  int v10; // r9d
  unsigned int v11; // edi
  unsigned int v12; // r8d
  unsigned int v13; // r11d
  unsigned int *v14; // rax
  unsigned int v15; // r8d
  unsigned int v16; // r10d
  unsigned int v17; // r10d
  unsigned int v18; // r10d
  _QWORD *v19; // r15
  int v20; // r9d
  unsigned int v21; // r11d
  int v22; // r8d
  unsigned int *v23; // rax
  unsigned int v24; // r8d
  char v25; // al
  int v26; // r13d
  _BYTE *v27; // rsi
  _BYTE *v28; // rdi
  unsigned int v29; // r11d
  unsigned int v30; // r8d
  unsigned int v31; // r10d
  int v32; // r9d
  unsigned int v33; // r11d
  unsigned int v34; // eax
  int v35; // r8d
  unsigned int *v36; // rax
  unsigned int v37; // r8d
  int v38; // eax
  unsigned int v39; // edx
  unsigned __int64 v40; // rax
  unsigned int v41; // esi
  unsigned int v42; // r14d
  unsigned int *v43; // rax
  __int64 v44; // rcx
  unsigned int v45; // r9d
  unsigned int *v46; // rax
  unsigned int v47; // r9d
  unsigned int *v48; // rax
  unsigned int v49; // r8d
  __int64 v50; // rcx
  unsigned int v51; // esi
  int v52; // r15d
  unsigned int v53; // edx
  unsigned int v54; // eax
  int v55; // r10d
  int v56; // eax
  unsigned int *v57; // rax
  unsigned int v58; // r8d
  char v59; // al
  unsigned int v60; // edx
  unsigned __int64 v61; // rax
  int v62; // esi
  unsigned int v63; // r14d
  unsigned int v64; // r13d
  unsigned int *v65; // rax
  __int64 v66; // rcx
  unsigned int v67; // r9d
  unsigned int *v68; // rax
  unsigned int *v69; // rax
  unsigned int v70; // r8d
  int v71; // r14d
  unsigned int v72; // r15d
  unsigned int v73; // edx
  int v74; // r10d
  unsigned int *v75; // rax
  unsigned int v76; // r8d
  int v77; // ecx
  unsigned int v78; // ecx
  __int64 v79; // rdx
  __int64 v80; // rcx
  unsigned int v81; // esi
  int v82; // r15d
  unsigned int v83; // edx
  unsigned int v84; // eax
  int v85; // r10d
  int v86; // eax
  unsigned int *v87; // rax
  unsigned int v88; // r8d
  char v89; // al
  unsigned int v90; // edx
  unsigned __int64 v91; // rax
  int v92; // esi
  unsigned int v93; // r14d
  unsigned int v94; // r15d
  unsigned int *v95; // rax
  __int64 v96; // rcx
  unsigned int v97; // r9d
  unsigned int *v98; // rax
  unsigned int *v99; // rax
  unsigned int v100; // r8d
  unsigned int v101; // r14d
  int v102; // r12d
  unsigned int v103; // edx
  int v104; // r10d
  unsigned int *v105; // rax
  unsigned int v106; // r8d
  char *i; // rcx
  char v108; // al
  int v110; // [rsp+30h] [rbp-D0h]
  int v111; // [rsp+38h] [rbp-C8h] BYREF
  unsigned int v112; // [rsp+40h] [rbp-C0h]
  int v113; // [rsp+44h] [rbp-BCh]
  unsigned int v114; // [rsp+48h] [rbp-B8h]
  int v115; // [rsp+4Ch] [rbp-B4h]
  _BYTE *v116; // [rsp+50h] [rbp-B0h]
  __int64 v117; // [rsp+58h] [rbp-A8h]
  __int64 v118; // [rsp+60h] [rbp-A0h]
  _QWORD *v119; // [rsp+68h] [rbp-98h]
  _DWORD v120[512]; // [rsp+70h] [rbp-90h] BYREF
  unsigned int v121; // [rsp+870h] [rbp+770h] BYREF
  __int64 v122; // [rsp+998h] [rbp+898h]
  __int64 v123; // [rsp+9A0h] [rbp+8A0h] BYREF
  _DWORD v124[512]; // [rsp+9B0h] [rbp+8B0h] BYREF
  unsigned int v125; // [rsp+11B0h] [rbp+10B0h] BYREF
  __int64 v126; // [rsp+12D8h] [rbp+11D8h]
  __int64 v127; // [rsp+12E0h] [rbp+11E0h] BYREF
  _DWORD v128[512]; // [rsp+12F0h] [rbp+11F0h] BYREF
  unsigned int v129; // [rsp+1AF0h] [rbp+19F0h] BYREF
  __int64 v130; // [rsp+1C18h] [rbp+1B18h]
  unsigned int v131[3]; // [rsp+1C24h] [rbp+1B24h] BYREF

  v5 = *(_DWORD *)(a3 + 20);
  v7 = *(_DWORD *)(a3 + 24);
  v8 = (unsigned int *)(a3 + 16);
  v9 = *(_DWORD *)(a3 + 16);
  v117 = a4;
  v10 = (16 * v5) | (v7 >> 28);
  v11 = v5 >> 28;
  v118 = (__int64)a1;
  *(_DWORD *)(a3 + 20) = v10;
  if ( v9 < 4 )
  {
    v14 = *(unsigned int **)a3;
    if ( *(_QWORD *)a3 != *(_QWORD *)(a3 + 8) )
    {
      v15 = *v14;
      *(_QWORD *)a3 = v14 + 1;
      v16 = v15 >> (32 - (4 - v9));
      v12 = v15 << (4 - v9);
      v17 = v10 | v16;
      *(_DWORD *)(a3 + 24) = v12;
      v13 = v9 + 28;
      v10 = v17;
      goto LABEL_7;
    }
    v13 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    v12 = 0;
  }
  else
  {
    v12 = 16 * v7;
    *(_DWORD *)(a3 + 24) = v12;
    v13 = v9 - 4;
  }
  v17 = v10;
LABEL_7:
  v18 = v17 >> 28;
  *v8 = v13;
  v19 = (_QWORD *)(a3 + 8);
  v119 = (_QWORD *)(a3 + 8);
  v114 = v11 + 1;
  v20 = (v12 >> 28) | (16 * v10);
  *(_DWORD *)(a3 + 20) = v20;
  if ( v13 < 4 )
  {
    v23 = *(unsigned int **)a3;
    if ( *(_QWORD *)a3 == *v19 )
    {
      v21 = 0;
      v22 = 0;
    }
    else
    {
      v24 = *v23;
      *(_QWORD *)a3 = v23 + 1;
      v25 = 4 - v13;
      v21 = v13 + 28;
      *(_DWORD *)(a3 + 20) = v20 | (v24 >> (32 - v25));
      v22 = v24 << v25;
    }
  }
  else
  {
    v21 = v13 - 4;
    v22 = 16 * v12;
  }
  *(_DWORD *)(a3 + 24) = v22;
  v26 = 0;
  v113 = 0;
  v27 = &a1[a2];
  *v8 = v21;
  v110 = 0;
  v112 = v18 + 1;
  v28 = a1;
  v116 = v27;
  if ( a1 != v27 )
  {
LABEL_13:
    sub_14046F220((__int64)v128, a3);
    sub_14046F220((__int64)v124, a3);
    sub_14046F220((__int64)v120, a3);
    v29 = *(_DWORD *)(a3 + 20);
    v30 = *(_DWORD *)(a3 + 24);
    v31 = *v8;
    v32 = (16 * v29) | (v30 >> 28);
    v33 = v29 >> 28;
    *(_DWORD *)(a3 + 20) = v32;
    if ( v31 < 4 )
    {
      v36 = *(unsigned int **)a3;
      if ( *(_QWORD *)a3 == *v19 )
      {
        v34 = 0;
        v35 = 0;
      }
      else
      {
        v37 = *v36;
        *(_QWORD *)a3 = v36 + 1;
        *(_DWORD *)(a3 + 20) = v32 | (v37 >> (32 - (4 - v31)));
        v34 = v31 + 28;
        v35 = v37 << (4 - v31);
      }
    }
    else
    {
      v34 = v31 - 4;
      v35 = 16 * v30;
    }
    *(_DWORD *)(a3 + 24) = v35;
    *v8 = v34;
    v38 = (v33 + 1) << 12;
    while ( 1 )
    {
      v115 = v38 - 1;
      if ( v28 == v27 )
      {
LABEL_120:
        if ( v122 )
          sub_14027D7E0(v122, 0LL, 0LL);
        v122 = 0LL;
        v123 = 0LL;
        if ( v126 )
          sub_14027D7E0(v126, 0LL, 0LL);
        v126 = 0LL;
        v127 = 0LL;
        if ( v130 )
          sub_14027D7E0(v130, 0LL, 0LL);
        if ( v28 != v27 )
        {
          v19 = v119;
          goto LABEL_13;
        }
        return 1LL;
      }
      v39 = *(_DWORD *)(a3 + 20);
      v40 = (unsigned __int64)v39 >> 24;
      v41 = v128[2 * v40];
      v42 = v128[2 * v40 + 1];
      if ( v41 == -1 )
      {
        v43 = &v129;
        if ( v39 < v129 )
        {
          do
            v43 += 3;
          while ( v39 < *v43 );
        }
        v41 = v43[2];
        v44 = v43[1] - ((v39 - *v43) >> (32 - v41));
        v111 = v44;
        if ( (unsigned int)v44 >= v131[0] )
        {
          sub_140244E10(
            (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
            690,
            (unsigned int)"Index: {}, Count: {}",
            (unsigned int)&v111,
            (__int64)v131);
          __debugbreak();
        }
        v42 = *(_DWORD *)(v130 + 4 * v44);
      }
      if ( v41 < 0x20 )
      {
        if ( !v41 )
          goto LABEL_29;
      }
      else
      {
        sub_1402898B0(
          "bitCount < 8 * sizeof(m_rackData0)",
          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
          60LL);
      }
      *(_DWORD *)(a3 + 20) = (*(_DWORD *)(a3 + 20) << v41) | (*(_DWORD *)(a3 + 24) >> (32 - v41));
LABEL_29:
      v45 = *v8;
      if ( v41 > *v8 )
      {
        v48 = *(unsigned int **)a3;
        if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
        {
          *(_DWORD *)(a3 + 24) = 0;
          v46 = (unsigned int *)(a3 + 16);
          v47 = 0;
        }
        else
        {
          v49 = *v48;
          *(_QWORD *)a3 = v48 + 1;
          *(_DWORD *)(a3 + 20) |= v49 >> (32 - (v41 - v45));
          v46 = v8;
          *(_DWORD *)(a3 + 24) = v49 << (v41 - v45);
          v47 = v45 - v41 + 32;
        }
      }
      else
      {
        v46 = v8;
        *(_DWORD *)(a3 + 24) <<= v41;
        v47 = v45 - v41;
      }
      *v46 = v47;
      if ( v42 >= 0x11D )
      {
        v50 = v42 - 285;
        v51 = byte_141B80D00[v50 + 128];
        v52 = byte_141B80BA0[v50];
        if ( byte_141B80D00[v50 + 128] )
        {
          v53 = *(_DWORD *)(a3 + 20);
          v52 |= v53 >> (32 - v51);
          if ( v51 >= 0x20 )
          {
            sub_1402898B0(
              "bitCount < 8 * sizeof(m_rackData0)",
              "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
              60LL);
            v53 = *(_DWORD *)(a3 + 20);
            v47 = *(_DWORD *)(a3 + 16);
          }
          v54 = *(_DWORD *)(a3 + 24);
          v55 = (v53 << v51) | (v54 >> (32 - v51));
          *(_DWORD *)(a3 + 20) = v55;
          if ( v51 <= v47 )
          {
            v56 = v54 << v51;
            v47 -= v51;
            *v8 = v47;
            goto LABEL_43;
          }
          v57 = *(unsigned int **)a3;
          if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
          {
            v56 = 0;
            *(_DWORD *)(a3 + 16) = 0;
            v47 = 0;
LABEL_43:
            *(_DWORD *)(a3 + 24) = v56;
          }
          else
          {
            v58 = *v57;
            *(_QWORD *)a3 = v57 + 1;
            v59 = v51 - v47;
            v47 = v47 - v51 + 32;
            *(_DWORD *)(a3 + 20) = v55 | (v58 >> (32 - v59));
            *v8 = v47;
            *(_DWORD *)(a3 + 24) = v58 << v59;
          }
        }
        v60 = *(_DWORD *)(a3 + 20);
        v61 = (unsigned __int64)v60 >> 24;
        v62 = v52 + v112;
        v63 = v120[2 * v61];
        v64 = v120[2 * v61 + 1];
        if ( v63 == -1 )
        {
          v65 = &v121;
          if ( v60 < v121 )
          {
            do
              v65 += 3;
            while ( v60 < *v65 );
          }
          v63 = v65[2];
          v66 = v65[1] - ((v60 - *v65) >> (32 - v63));
          v111 = v66;
          if ( (unsigned int)v66 >= HIDWORD(v123) )
          {
            sub_140244E10(
              (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
              690,
              (unsigned int)"Index: {}, Count: {}",
              (unsigned int)&v111,
              (__int64)&v123 + 4);
            JUMPOUT(0x140466EB6LL);
          }
          v47 = *(_DWORD *)(a3 + 16);
          v64 = *(_DWORD *)(v122 + 4 * v66);
        }
        if ( v63 >= 0x20 )
        {
          sub_1402898B0(
            "bitCount < 8 * sizeof(m_rackData0)",
            "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
            60LL);
          v47 = *(_DWORD *)(a3 + 16);
          goto LABEL_52;
        }
        if ( v63 )
LABEL_52:
          *(_DWORD *)(a3 + 20) = (*(_DWORD *)(a3 + 20) << v63) | (*(_DWORD *)(a3 + 24) >> (32 - v63));
        if ( v63 > v47 )
        {
          v69 = *(unsigned int **)a3;
          if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
          {
            *(_DWORD *)(a3 + 24) = 0;
            v68 = (unsigned int *)(a3 + 16);
            v67 = 0;
          }
          else
          {
            v70 = *v69;
            *(_QWORD *)a3 = v69 + 1;
            *(_DWORD *)(a3 + 20) |= v70 >> (32 - (v63 - v47));
            v68 = v8;
            *(_DWORD *)(a3 + 24) = v70 << (v63 - v47);
            v67 = v47 - v63 + 32;
          }
        }
        else
        {
          *(_DWORD *)(a3 + 24) <<= v63;
          v67 = v47 - v63;
          v68 = v8;
        }
        *v68 = v67;
        if ( v64 >= 0x3C )
          v71 = ((v64 & 2) + 4) << ((v64 >> 2) - 2);
        else
          v71 = (unsigned __int16)word_141B80B60[(unsigned __int64)v64 >> 1];
        v72 = byte_141B80D00[v64];
        if ( byte_141B80D00[v64] )
        {
          v71 |= *(_DWORD *)(a3 + 20) >> (32 - v72);
          if ( v72 >= 0x20 )
          {
            sub_1402898B0(
              "bitCount < 8 * sizeof(m_rackData0)",
              "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
              60LL);
            v67 = *(_DWORD *)(a3 + 16);
          }
          v73 = *(_DWORD *)(a3 + 24);
          v74 = (v73 >> (32 - v72)) | (*(_DWORD *)(a3 + 20) << v72);
          *(_DWORD *)(a3 + 20) = v74;
          if ( v72 > v67 )
          {
            v75 = *(unsigned int **)a3;
            if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
            {
              *(_DWORD *)(a3 + 24) = 0;
              *(_DWORD *)(a3 + 16) = 0;
            }
            else
            {
              v76 = *v75;
              *(_QWORD *)a3 = v75 + 1;
              *(_DWORD *)(a3 + 20) = v74 | (v76 >> (32 - (v72 - v67)));
              *(_DWORD *)(a3 + 16) = v67 - v72 + 32;
              *(_DWORD *)(a3 + 24) = v76 << (v72 - v67);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 24) = v73 << v72;
            *(_DWORD *)(a3 + 16) = v67 - v72;
          }
        }
        v77 = -v71;
        if ( (v64 & 1) == 0 )
          v77 = v71;
        v78 = v110 + v77;
        if ( &v28[v62] > v116 || v78 + v62 > a5 )
          goto LABEL_128;
        if ( v78 - v113 <= v112 + 255 || v113 - v78 <= v112 + 255 )
          v26 = v78 + v62;
        else
          v26 = v62 + v110;
        v110 = v26;
        v113 = v78;
        if ( v62 )
        {
          v79 = v117 + v78 - (_QWORD)v28;
          do
          {
            *v28 = v28[v79];
            ++v28;
            --v62;
          }
          while ( v62 );
        }
        goto LABEL_119;
      }
      if ( v42 < 0x100 )
      {
        ++v26;
        *v28 = v42;
        v110 = v26;
        ++v28;
        goto LABEL_119;
      }
      v80 = v42 - 256;
      v81 = byte_141B80D00[v80 + 128];
      v82 = byte_141B80BA0[v80];
      if ( byte_141B80D00[v80 + 128] )
      {
        v83 = *(_DWORD *)(a3 + 20);
        v82 |= v83 >> (32 - v81);
        if ( v81 >= 0x20 )
        {
          sub_1402898B0(
            "bitCount < 8 * sizeof(m_rackData0)",
            "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
            60LL);
          v83 = *(_DWORD *)(a3 + 20);
          v47 = *(_DWORD *)(a3 + 16);
        }
        v84 = *(_DWORD *)(a3 + 24);
        v85 = (v83 << v81) | (v84 >> (32 - v81));
        *(_DWORD *)(a3 + 20) = v85;
        if ( v81 > v47 )
        {
          v87 = *(unsigned int **)a3;
          if ( *(_QWORD *)a3 != *(_QWORD *)(a3 + 8) )
          {
            v88 = *v87;
            *(_QWORD *)a3 = v87 + 1;
            v89 = v81 - v47;
            v47 = v47 - v81 + 32;
            *(_DWORD *)(a3 + 20) = v85 | (v88 >> (32 - v89));
            *v8 = v47;
            *(_DWORD *)(a3 + 24) = v88 << v89;
            goto LABEL_91;
          }
          v86 = 0;
          *(_DWORD *)(a3 + 16) = 0;
          v47 = 0;
        }
        else
        {
          v86 = v84 << v81;
          v47 -= v81;
          *v8 = v47;
        }
        *(_DWORD *)(a3 + 24) = v86;
      }
LABEL_91:
      v90 = *(_DWORD *)(a3 + 20);
      v91 = (unsigned __int64)v90 >> 24;
      v92 = v82 + v114;
      v93 = v124[2 * v91];
      v94 = v124[2 * v91 + 1];
      if ( v93 == -1 )
      {
        v95 = &v125;
        if ( v90 < v125 )
        {
          do
            v95 += 3;
          while ( v90 < *v95 );
        }
        v93 = v95[2];
        v96 = v95[1] - ((v90 - *v95) >> (32 - v93));
        v111 = v96;
        if ( (unsigned int)v96 >= HIDWORD(v127) )
        {
          sub_140244E10(
            (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
            690,
            (unsigned int)"Index: {}, Count: {}",
            (unsigned int)&v111,
            (__int64)&v127 + 4);
          __debugbreak();
        }
        v47 = *(_DWORD *)(a3 + 16);
        v94 = *(_DWORD *)(v126 + 4 * v96);
      }
      if ( v93 >= 0x20 )
      {
        sub_1402898B0(
          "bitCount < 8 * sizeof(m_rackData0)",
          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
          60LL);
        v47 = *(_DWORD *)(a3 + 16);
LABEL_99:
        *(_DWORD *)(a3 + 20) = (*(_DWORD *)(a3 + 20) << v93) | (*(_DWORD *)(a3 + 24) >> (32 - v93));
        goto LABEL_100;
      }
      if ( v93 )
        goto LABEL_99;
LABEL_100:
      if ( v93 > v47 )
      {
        v99 = *(unsigned int **)a3;
        if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
        {
          *(_DWORD *)(a3 + 24) = 0;
          v98 = (unsigned int *)(a3 + 16);
          v97 = 0;
        }
        else
        {
          v100 = *v99;
          *(_QWORD *)a3 = v99 + 1;
          *(_DWORD *)(a3 + 20) |= v100 >> (32 - (v93 - v47));
          v98 = v8;
          *(_DWORD *)(a3 + 24) = v100 << (v93 - v47);
          v97 = v47 - v93 + 32;
        }
      }
      else
      {
        *(_DWORD *)(a3 + 24) <<= v93;
        v97 = v47 - v93;
        v98 = v8;
      }
      *v98 = v97;
      v101 = byte_141B80CE0[v94];
      v102 = (unsigned __int16)word_141B80B60[v94];
      if ( byte_141B80CE0[v94] )
      {
        v102 |= *(_DWORD *)(a3 + 20) >> (32 - v101);
        if ( v101 >= 0x20 )
        {
          sub_1402898B0(
            "bitCount < 8 * sizeof(m_rackData0)",
            "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
            60LL);
          v97 = *(_DWORD *)(a3 + 16);
        }
        v103 = *(_DWORD *)(a3 + 24);
        v104 = (v103 >> (32 - v101)) | (*(_DWORD *)(a3 + 20) << v101);
        *(_DWORD *)(a3 + 20) = v104;
        if ( v101 > v97 )
        {
          v105 = *(unsigned int **)a3;
          if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
          {
            *(_DWORD *)(a3 + 24) = 0;
            *(_DWORD *)(a3 + 16) = 0;
          }
          else
          {
            v106 = *v105;
            *(_QWORD *)a3 = v105 + 1;
            *(_DWORD *)(a3 + 20) = v104 | (v106 >> (32 - (v101 - v97)));
            *(_DWORD *)(a3 + 16) = v97 - v101 + 32;
            *(_DWORD *)(a3 + 24) = v106 << (v101 - v97);
          }
        }
        else
        {
          *(_DWORD *)(a3 + 24) = v103 << v101;
          *(_DWORD *)(a3 + 16) = v97 - v101;
        }
      }
      if ( &v28[v92] > v116 || v102 >= (__int64)&v28[-v118] )
      {
LABEL_128:
        if ( v122 )
          sub_14027D7E0(v122, 0LL, 0LL);
        v122 = 0LL;
        v123 = 0LL;
        if ( v126 )
          sub_14027D7E0(v126, 0LL, 0LL);
        v126 = 0LL;
        v127 = 0LL;
        if ( v130 )
          sub_14027D7E0(v130, 0LL, 0LL);
        return 0LL;
      }
      v26 += v92;
      v110 = v26;
      for ( i = &v28[-v102 - 1]; v92; --v92 )
      {
        v108 = *i++;
        *v28++ = v108;
      }
LABEL_119:
      v38 = v115;
      v8 = (unsigned int *)(a3 + 16);
      v27 = v116;
      if ( !v115 )
        goto LABEL_120;
    }
  }
  return 1LL;
}



__int64 __fastcall sub_140468330(_BYTE *a1, int a2, __int64 a3)
{
  unsigned int v3; // r9d
  unsigned int v5; // r8d
  unsigned int v6; // r11d
  unsigned int v7; // r10d
  int v8; // r9d
  unsigned int v9; // r11d
  unsigned int v10; // r9d
  int v11; // r8d
  unsigned int *v12; // rax
  unsigned int v13; // r8d
  int v14; // eax
  _BYTE *v15; // rdi
  unsigned int v16; // r12d
  _BYTE *v17; // rsi
  _QWORD *v18; // r15
  unsigned int v19; // r11d
  unsigned int v20; // r8d
  unsigned int v21; // r10d
  int v22; // r9d
  unsigned int v23; // r11d
  unsigned int v24; // eax
  int v25; // r8d
  unsigned int *v26; // rax
  unsigned int v27; // r8d
  int v28; // eax
  unsigned int v29; // edx
  unsigned __int64 v30; // rax
  unsigned int v31; // edi
  unsigned int v32; // r14d
  unsigned int *v33; // rax
  __int64 v34; // rcx
  unsigned int v35; // r9d
  unsigned int v36; // r9d
  unsigned int *v37; // rax
  unsigned int v38; // r8d
  __int64 v39; // rcx
  unsigned int v40; // edi
  int v41; // r15d
  unsigned int v42; // edx
  unsigned int v43; // eax
  int v44; // r10d
  int v45; // eax
  unsigned int *v46; // rax
  unsigned int v47; // r8d
  char v48; // al
  unsigned int v49; // edx
  int v50; // edi
  unsigned __int64 v51; // rax
  unsigned int v52; // r14d
  int v53; // r15d
  unsigned int *v54; // rax
  __int64 v55; // rcx
  unsigned int v56; // r9d
  unsigned int *v57; // rax
  unsigned int v58; // r8d
  unsigned int v59; // r14d
  int v60; // r12d
  unsigned int v61; // edx
  int v62; // r10d
  unsigned int *v63; // rax
  unsigned int v64; // r8d
  char *i; // rcx
  char v66; // al
  int v68; // [rsp+30h] [rbp-D0h] BYREF
  unsigned int v69; // [rsp+38h] [rbp-C8h]
  int v70; // [rsp+3Ch] [rbp-C4h]
  _BYTE *v71; // [rsp+40h] [rbp-C0h]
  _BYTE *v72; // [rsp+48h] [rbp-B8h]
  _QWORD *v73; // [rsp+50h] [rbp-B0h]
  _DWORD v74[512]; // [rsp+60h] [rbp-A0h] BYREF
  unsigned int v75; // [rsp+860h] [rbp+760h] BYREF
  __int64 v76; // [rsp+988h] [rbp+888h]
  __int64 v77; // [rsp+990h] [rbp+890h] BYREF
  _DWORD v78[512]; // [rsp+9A0h] [rbp+8A0h] BYREF
  unsigned int v79; // [rsp+11A0h] [rbp+10A0h] BYREF
  __int64 v80; // [rsp+12C8h] [rbp+11C8h]
  unsigned int v81[3]; // [rsp+12D4h] [rbp+11D4h] BYREF

  v3 = *(_DWORD *)(a3 + 20);
  v5 = *(_DWORD *)(a3 + 24);
  v6 = v3;
  v7 = *(_DWORD *)(a3 + 16);
  v8 = (v5 >> 28) | (16 * v3);
  v72 = a1;
  v9 = v6 >> 28;
  *(_DWORD *)(a3 + 20) = v8;
  if ( v7 < 4 )
  {
    v12 = *(unsigned int **)a3;
    if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
    {
      v10 = 0;
      v11 = 0;
    }
    else
    {
      v13 = *v12;
      *(_QWORD *)a3 = v12 + 1;
      v14 = v8 | (v13 >> (32 - (4 - v7)));
      v10 = v7 + 28;
      *(_DWORD *)(a3 + 20) = v14;
      v11 = v13 << (4 - v7);
    }
  }
  else
  {
    v10 = v7 - 4;
    v11 = 16 * v5;
  }
  v15 = &a1[a2];
  *(_DWORD *)(a3 + 24) = v11;
  *(_DWORD *)(a3 + 16) = v10;
  v71 = v15;
  v16 = v9 + 1;
  v69 = v9 + 1;
  v17 = a1;
  v18 = (_QWORD *)(a3 + 8);
  v73 = (_QWORD *)(a3 + 8);
  if ( a1 != v15 )
  {
LABEL_7:
    sub_14046F220((__int64)v78, a3);
    sub_14046F220((__int64)v74, a3);
    v19 = *(_DWORD *)(a3 + 20);
    v20 = *(_DWORD *)(a3 + 24);
    v21 = *(_DWORD *)(a3 + 16);
    v22 = (16 * v19) | (v20 >> 28);
    v23 = v19 >> 28;
    *(_DWORD *)(a3 + 20) = v22;
    if ( v21 < 4 )
    {
      v26 = *(unsigned int **)a3;
      if ( *(_QWORD *)a3 == *v18 )
      {
        v24 = 0;
        v25 = 0;
      }
      else
      {
        v27 = *v26;
        *(_QWORD *)a3 = v26 + 1;
        *(_DWORD *)(a3 + 20) = v22 | (v27 >> (32 - (4 - v21)));
        v24 = v21 + 28;
        v25 = v27 << (4 - v21);
      }
    }
    else
    {
      v24 = v21 - 4;
      v25 = 16 * v20;
    }
    *(_DWORD *)(a3 + 24) = v25;
    *(_DWORD *)(a3 + 16) = v24;
    v28 = (v23 + 1) << 12;
    while ( 1 )
    {
      v70 = v28 - 1;
      if ( v17 == v15 )
      {
LABEL_66:
        if ( v76 )
          sub_14027D7E0(v76, 0LL, 0LL);
        v76 = 0LL;
        v77 = 0LL;
        if ( v80 )
          sub_14027D7E0(v80, 0LL, 0LL);
        if ( v17 != v15 )
        {
          v18 = v73;
          goto LABEL_7;
        }
        return 1LL;
      }
      v29 = *(_DWORD *)(a3 + 20);
      v30 = (unsigned __int64)v29 >> 24;
      v31 = v78[2 * v30];
      v32 = v78[2 * v30 + 1];
      if ( v31 == -1 )
      {
        v33 = &v79;
        if ( v29 < v79 )
        {
          do
            v33 += 3;
          while ( v29 < *v33 );
        }
        v31 = v33[2];
        v34 = v33[1] - ((v29 - *v33) >> (32 - v31));
        v68 = v34;
        if ( (unsigned int)v34 >= v81[0] )
        {
          sub_140244E10(
            (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
            690,
            (unsigned int)"Index: {}, Count: {}",
            (unsigned int)&v68,
            (__int64)v81);
          JUMPOUT(0x140468A22LL);
        }
        v32 = *(_DWORD *)(v80 + 4 * v34);
      }
      if ( v31 < 0x20 )
      {
        if ( !v31 )
          goto LABEL_23;
      }
      else
      {
        sub_1402898B0(
          "bitCount < 8 * sizeof(m_rackData0)",
          "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
          60LL);
      }
      *(_DWORD *)(a3 + 20) = (*(_DWORD *)(a3 + 20) << v31) | (*(_DWORD *)(a3 + 24) >> (32 - v31));
LABEL_23:
      v35 = *(_DWORD *)(a3 + 16);
      if ( v31 > v35 )
      {
        v37 = *(unsigned int **)a3;
        if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
        {
          *(_DWORD *)(a3 + 24) = 0;
          v36 = 0;
        }
        else
        {
          v38 = *v37;
          *(_QWORD *)a3 = v37 + 1;
          *(_DWORD *)(a3 + 20) |= v38 >> (32 - (v31 - v35));
          *(_DWORD *)(a3 + 24) = v38 << (v31 - v35);
          v36 = v35 - v31 + 32;
        }
      }
      else
      {
        *(_DWORD *)(a3 + 24) <<= v31;
        v36 = v35 - v31;
      }
      *(_DWORD *)(a3 + 16) = v36;
      if ( v32 >= 0x100 )
      {
        v39 = v32 - 256;
        v40 = byte_141B80D00[v39 + 128];
        v41 = byte_141B80BA0[v39];
        if ( byte_141B80D00[v39 + 128] )
        {
          v42 = *(_DWORD *)(a3 + 20);
          v41 |= v42 >> (32 - v40);
          if ( v40 >= 0x20 )
          {
            sub_1402898B0(
              "bitCount < 8 * sizeof(m_rackData0)",
              "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
              60LL);
            v42 = *(_DWORD *)(a3 + 20);
            v36 = *(_DWORD *)(a3 + 16);
          }
          v43 = *(_DWORD *)(a3 + 24);
          v44 = (v42 << v40) | (v43 >> (32 - v40));
          *(_DWORD *)(a3 + 20) = v44;
          if ( v40 <= v36 )
          {
            v45 = v43 << v40;
            v36 -= v40;
            *(_DWORD *)(a3 + 16) = v36;
            goto LABEL_37;
          }
          v46 = *(unsigned int **)a3;
          if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
          {
            v45 = 0;
            *(_DWORD *)(a3 + 16) = 0;
            v36 = 0;
LABEL_37:
            *(_DWORD *)(a3 + 24) = v45;
          }
          else
          {
            v47 = *v46;
            *(_QWORD *)a3 = v46 + 1;
            v48 = v40 - v36;
            v36 = v36 - v40 + 32;
            *(_DWORD *)(a3 + 20) = v44 | (v47 >> (32 - v48));
            *(_DWORD *)(a3 + 16) = v36;
            *(_DWORD *)(a3 + 24) = v47 << v48;
          }
        }
        v49 = *(_DWORD *)(a3 + 20);
        v50 = v41 + v16;
        v51 = (unsigned __int64)v49 >> 24;
        v52 = v74[2 * v51];
        v53 = v74[2 * v51 + 1];
        if ( v52 == -1 )
        {
          v54 = &v75;
          if ( v49 < v75 )
          {
            do
              v54 += 3;
            while ( v49 < *v54 );
          }
          v52 = v54[2];
          v55 = v54[1] - ((v49 - *v54) >> (32 - v52));
          v68 = v55;
          if ( (unsigned int)v55 >= HIDWORD(v77) )
          {
            sub_140244E10(
              (unsigned int)"D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Core\\Collections\\Array.h",
              690,
              (unsigned int)"Index: {}, Count: {}",
              (unsigned int)&v68,
              (__int64)&v77 + 4);
            __debugbreak();
          }
          v36 = *(_DWORD *)(a3 + 16);
          v53 = *(_DWORD *)(v76 + 4 * v55);
        }
        if ( v52 >= 0x20 )
        {
          sub_1402898B0(
            "bitCount < 8 * sizeof(m_rackData0)",
            "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
            60LL);
          v36 = *(_DWORD *)(a3 + 16);
          goto LABEL_46;
        }
        if ( v52 )
LABEL_46:
          *(_DWORD *)(a3 + 20) = (*(_DWORD *)(a3 + 20) << v52) | (*(_DWORD *)(a3 + 24) >> (32 - v52));
        if ( v52 > v36 )
        {
          v57 = *(unsigned int **)a3;
          if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
          {
            *(_DWORD *)(a3 + 24) = 0;
            v56 = 0;
          }
          else
          {
            v58 = *v57;
            *(_QWORD *)a3 = v57 + 1;
            *(_DWORD *)(a3 + 20) |= v58 >> (32 - (v52 - v36));
            *(_DWORD *)(a3 + 24) = v58 << (v52 - v36);
            v56 = v36 - v52 + 32;
          }
        }
        else
        {
          *(_DWORD *)(a3 + 24) <<= v52;
          v56 = v36 - v52;
        }
        *(_DWORD *)(a3 + 16) = v56;
        v59 = byte_141B80CE0[v53];
        v60 = (unsigned __int16)word_141B80B60[v53];
        if ( byte_141B80CE0[v53] )
        {
          v60 |= *(_DWORD *)(a3 + 20) >> (32 - v59);
          if ( v59 >= 0x20 )
          {
            sub_1402898B0(
              "bitCount < 8 * sizeof(m_rackData0)",
              "D:\\Perforce\\Live\\NAEU\\v2\\Code\\Arena\\Services\\Compress\\CmpIo.h",
              60LL);
            v56 = *(_DWORD *)(a3 + 16);
          }
          v61 = *(_DWORD *)(a3 + 24);
          v62 = (v61 >> (32 - v59)) | (*(_DWORD *)(a3 + 20) << v59);
          *(_DWORD *)(a3 + 20) = v62;
          if ( v59 > v56 )
          {
            v63 = *(unsigned int **)a3;
            if ( *(_QWORD *)a3 == *(_QWORD *)(a3 + 8) )
            {
              *(_DWORD *)(a3 + 24) = 0;
              *(_DWORD *)(a3 + 16) = 0;
            }
            else
            {
              v64 = *v63;
              *(_QWORD *)a3 = v63 + 1;
              *(_DWORD *)(a3 + 20) = v62 | (v64 >> (32 - (v59 - v56)));
              *(_DWORD *)(a3 + 16) = v56 - v59 + 32;
              *(_DWORD *)(a3 + 24) = v64 << (v59 - v56);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 24) = v61 << v59;
            *(_DWORD *)(a3 + 16) = v56 - v59;
          }
        }
        if ( &v17[v50] > v71 || v60 >= v17 - v72 )
        {
          if ( v76 )
            sub_14027D7E0(v76, 0LL, 0LL);
          v76 = 0LL;
          v77 = 0LL;
          if ( v80 )
            sub_14027D7E0(v80, 0LL, 0LL);
          return 0LL;
        }
        for ( i = &v17[-v60 - 1]; v50; --v50 )
        {
          v66 = *i++;
          *v17++ = v66;
        }
        v16 = v69;
        goto LABEL_65;
      }
      *v17++ = v32;
LABEL_65:
      v28 = v70;
      v15 = v71;
      if ( !v70 )
        goto LABEL_66;
    }
  }
  return 1LL;
}