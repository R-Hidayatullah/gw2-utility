/* ===============================================
 * Chunk: GRMT, versions: 7, strucTab: 0x141999230
 * ===============================================
 */

/* Version: 6, ReferencedFunction: 0x1 */
struct AmatGr {
    byte texArrayRange;
    byte texCount;
    byte sortOrder;
    byte sortTri;
    byte procAnim;
    dword debugFlags;
    dword flags;
    helpers::Array<qword> texTokens ;
};

typedef AmatGr Gw2StructGRMT;

/* Version: 5, ReferencedFunction: 0x1 */
struct AmatGr {
    byte texArrayRange;
    byte texCount;
    byte texTransformRange;
    byte sortOrder;
    byte sortTri;
    byte procAnim;
    dword debugFlags;
    dword flags;
    dword texType;
    dword textureMasks[4];
    helpers::Array<qword> texTokens ;
};

typedef AmatGr Gw2StructGRMT;

/* Version: 4, ReferencedFunction: 0x1 */
struct AmatGr {
    byte texArrayRange;
    byte texCount;
    byte texTransformRange;
    byte sortOrder;
    byte sortTri;
    byte procAnim;
    dword debugFlags;
    dword flags;
    dword texType;
    dword textureMasks[4];
};

typedef AmatGr Gw2StructGRMT;

/* Version: 3, ReferencedFunction: 0x1 */
struct AmatGrV3 {
    byte texArrayRange;
    byte texCount;
    byte texTransformRange;
    byte sortOrder;
    byte sortTri;
    dword debugFlags;
    dword flags;
    dword texType;
    dword textureMasks[4];
};

typedef AmatGrV3 Gw2StructGRMT;

/* Version: 2, ReferencedFunction: 0x1 */
struct AmatGrV2 {
    byte texArrayRange;
    byte texCount;
    byte texTransformRange;
    byte sortOrder;
    byte sortTri;
    dword flags;
    dword texType;
    dword textureMasks[4];
};

typedef AmatGrV2 Gw2StructGRMT;

/* Version: 1, ReferencedFunction: 0x1 */
struct AmatGrV1 {
    byte texArrayRange;
    byte texCount;
    byte texTransformRange;
    byte sortOrder;
    dword flags;
    dword texType;
    dword textureMasks[4];
};

typedef AmatGrV1 Gw2StructGRMT;

/* Version: 0, ReferencedFunction: 0x1 */
struct AmatGrV0 {
    byte texArrayRange;
    byte texCount;
    byte texTransformRange;
    byte sortOrder;
    dword flags;
    dword textureMasks[4];
};

typedef AmatGrV0 Gw2StructGRMT;


/* ===============================================
 * Chunk: DX9S, versions: 12, strucTab: 0x1419992E0
 * ===============================================
 */

/* Version: 11, ReferencedFunction: 0x403DD62000000001 */
struct AmatDx9SamplerV11 {
    dword textureIndex;
    helpers::Array<dword> state ;
    dword usesBindTexture;
};

struct AmatDx9ShaderV11 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
    word instructionCount;
};

struct AmatDx9EffectV11 {
    qword token;
    helpers::Array<dword> renderStates ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader;
    dword vertexShader;
    helpers::Array<dword> texGen ;
    dword vsGenFlags;
    dword passFlags;
};

struct AmatDx9PassV11 {
    helpers::PtrStruct<AmatDx9EffectV11> effects ;
};

struct AmatDx9TechniqueV11 {
    helpers::String name;
    helpers::Array<AmatDx9PassV11> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV11 {
    helpers::Array<AmatDx9SamplerV11> samplers ;
    helpers::Array<AmatDx9ShaderV11> shaders ;
    helpers::Array<AmatDx9TechniqueV11> techniques ;
    dword useLegacyBindTextures;
};

typedef AmatDx9MaterialV11 Gw2StructDX9S;

/* Version: 10, ReferencedFunction: 0x1 */
struct AmatDx9SamplerV10 {
    dword textureIndex;
    helpers::Array<dword> state ;
};

struct AmatDx9ShaderV10 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
    word instructionCount;
};

struct AmatDx9EffectV10 {
    qword token;
    helpers::Array<dword> renderStates ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader;
    dword vertexShader;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
    dword vsGenFlags;
    dword passFlags;
};

struct AmatDx9PassV10 {
    helpers::PtrStruct<AmatDx9EffectV10> effects ;
};

struct AmatDx9TechniqueV10 {
    helpers::String name;
    helpers::Array<AmatDx9PassV10> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV10 {
    helpers::Array<AmatDx9SamplerV10> samplers ;
    helpers::Array<AmatDx9ShaderV10> shaders ;
    helpers::Array<AmatDx9TechniqueV10> techniques ;
};

typedef AmatDx9MaterialV10 Gw2StructDX9S;

/* Version: 9, ReferencedFunction: 0x403DDE8000000001 */
struct AmatDx9SamplerV9 {
    dword textureIndex;
    helpers::Array<dword> state ;
};

struct AmatDx9ShaderV9 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
};

struct AmatDx9EffectV9 {
    qword token;
    helpers::Array<dword> renderStates ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader;
    dword vertexShader;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
    dword vsGenFlags;
    dword passFlags;
};

struct AmatDx9PassV9 {
    helpers::PtrStruct<AmatDx9EffectV9> effects ;
};

struct AmatDx9TechniqueV9 {
    helpers::String name;
    helpers::Array<AmatDx9PassV9> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV9 {
    helpers::Array<AmatDx9SamplerV9> samplers ;
    helpers::Array<AmatDx9ShaderV9> shaders ;
    helpers::Array<AmatDx9TechniqueV9> techniques ;
};

typedef AmatDx9MaterialV9 Gw2StructDX9S;

/* Version: 8, ReferencedFunction: 0x403DDAC000000001 */
struct AmatDx9SamplerV8 {
    dword textureIndex;
    helpers::Array<dword> state ;
};

struct AmatDx9ShaderV8 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
};

struct AmatDx9EffectV8 {
    helpers::Array<dword> renderStates ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader;
    dword vertexShader;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
    dword vsGenFlags;
    dword passFlags;
};

struct AmatDx9PassV8 {
    helpers::PtrStruct<AmatDx9EffectV8> effects ;
};

struct AmatDx9TechniqueV8 {
    helpers::String name;
    helpers::Array<AmatDx9PassV8> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV8 {
    helpers::Array<AmatDx9SamplerV8> samplers ;
    helpers::Array<AmatDx9ShaderV8> shaders ;
    helpers::Array<AmatDx9TechniqueV8> techniques ;
};

typedef AmatDx9MaterialV8 Gw2StructDX9S;

/* Version: 7, ReferencedFunction: 0x403DDA4000000001 */
struct AmatDx9SamplerV7 {
    dword textureIndex;
    helpers::Array<dword> state ;
};

struct AmatDx9ShaderV7 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
};

struct AmatDx9EffectV7 {
    helpers::Array<dword> renderStates ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader;
    dword vertexShader;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
    dword vsGenFlags;
    dword passFlags;
};

struct AmatDx9PassV7 {
    AmatDx9EffectV7 effects[8];
};

struct AmatDx9TechniqueV7 {
    helpers::String name;
    helpers::Array<AmatDx9PassV7> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV7 {
    helpers::Array<AmatDx9SamplerV7> samplers ;
    helpers::Array<AmatDx9ShaderV7> shaders ;
    helpers::Array<AmatDx9TechniqueV7> techniques ;
};

typedef AmatDx9MaterialV7 Gw2StructDX9S;

/* Version: 6, ReferencedFunction: 0x403DD9E000000001 */
struct AmatDx9SamplerV6 {
    dword textureIndex;
    helpers::Array<dword> state ;
};

struct AmatDx9ShaderV6 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
};

struct AmatDx9EffectV6 {
    helpers::Array<dword> renderStates ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader;
    dword vertexShader;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
    dword vsGenFlags;
    dword passFlags;
};

struct AmatDx9PassV6 {
    AmatDx9EffectV6 effects[8];
};

struct AmatDx9TechniqueV6 {
    helpers::String name;
    helpers::Array<AmatDx9PassV6> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV6 {
    helpers::Array<AmatDx9SamplerV6> samplers ;
    helpers::Array<AmatDx9ShaderV6> shaders ;
    helpers::Array<AmatDx9TechniqueV6> techniques ;
};

typedef AmatDx9MaterialV6 Gw2StructDX9S;

/* Version: 5, ReferencedFunction: 0x403DD8E000000001 */
struct AmatDx9SamplerV5 {
    dword textureIndex;
    helpers::Array<dword> state ;
};

struct AmatDx9ShaderV5 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
};

struct AmatDx9EffectV5 {
    helpers::Array<dword> renderStates ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader;
    dword vertexShader;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
    dword vsGenFlags;
    dword passFlags;
};

struct AmatDx9PassV5 {
    AmatDx9EffectV5 effects[7];
};

struct AmatDx9TechniqueV5 {
    helpers::String name;
    dword sortTri;
    helpers::Array<AmatDx9PassV5> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV5 {
    helpers::Array<AmatDx9SamplerV5> samplers ;
    helpers::Array<AmatDx9ShaderV5> shaders ;
    helpers::Array<AmatDx9TechniqueV5> techniques ;
};

typedef AmatDx9MaterialV5 Gw2StructDX9S;

/* Version: 4, ReferencedFunction: 0x1 */
struct AmatDx9SamplerV4 {
    dword textureIndex;
    helpers::Array<dword> state ;
};

struct AmatDx9ShaderV4 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
};

struct AmatDx9EffectV4 {
    helpers::Array<dword> renderStates ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader;
    dword vertexShader;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
    dword vsGenFlags;
    dword passFlags;
};

struct AmatDx9PassV4 {
    AmatDx9EffectV4 effects[7];
};

struct AmatDx9TechniqueV4 {
    helpers::String name;
    dword sortTri;
    helpers::Array<AmatDx9PassV4> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV4 {
    helpers::Array<AmatDx9SamplerV4> samplers ;
    helpers::Array<AmatDx9ShaderV4> shaders ;
    helpers::Array<AmatDx9TechniqueV4> techniques ;
};

typedef AmatDx9MaterialV4 Gw2StructDX9S;

/* Version: 3, ReferencedFunction: 0x1 */
struct AmatDx9SamplerV3 {
    dword textureIndex;
    helpers::Array<dword> state ;
};

struct AmatDx9ShaderV3 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
};

struct AmatDx9EffectV3 {
    helpers::Array<dword> renderStates ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader;
    dword vertexShader;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
    dword vsGenFlags;
    dword passFlags;
};

struct AmatDx9PassV3 {
    AmatDx9EffectV3 effects[7];
};

struct AmatDx9TechniqueV3 {
    helpers::String name;
    dword sortTri;
    helpers::Array<AmatDx9PassV3> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV3 {
    helpers::Array<AmatDx9SamplerV3> samplers ;
    helpers::Array<AmatDx9ShaderV3> shaders ;
    helpers::Array<AmatDx9TechniqueV3> techniques ;
};

typedef AmatDx9MaterialV3 Gw2StructDX9S;

/* Version: 2, ReferencedFunction: 0x403DD63000000001 */
struct AmatDx9SamplerV2 {
    dword textureIndex;
    helpers::Array<dword> state ;
};

struct AmatDx9ShaderV2 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
};

struct AmatDx9EffectV2 {
    helpers::Array<dword> renderStates ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader;
    dword vertexShader;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
    dword vsGenFlags;
    dword passFlags;
};

struct AmatDx9PassV2 {
    AmatDx9EffectV2 effects[7];
};

struct AmatDx9TechniqueV2 {
    helpers::String name;
    dword sortTri;
    helpers::Array<AmatDx9PassV2> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV2 {
    helpers::Array<AmatDx9SamplerV2> samplers ;
    helpers::Array<AmatDx9ShaderV2> shaders ;
    helpers::Array<AmatDx9TechniqueV2> techniques ;
};

typedef AmatDx9MaterialV2 Gw2StructDX9S;

/* Version: 1, ReferencedFunction: 0x403DD43000000001 */
struct AmatDx9SamplerV1 {
    dword textureIndex;
    helpers::Array<dword> state ;
};

struct AmatDx9ShaderV1 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
};

struct AmatDx9RenderStatesV1 {
    helpers::Array<dword> renderStates ;
};

struct AmatDx9PassV1 {
    helpers::PtrStruct<AmatDx9RenderStatesV1> effectRenderStates ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader[5];
    dword vertexShader;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
    dword vsGenFlags;
    dword passFlags[5];
};

struct AmatDx9TechniqueV1 {
    helpers::String name;
    dword sortTri;
    helpers::Array<AmatDx9PassV1> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV1 {
    helpers::Array<AmatDx9SamplerV1> samplers ;
    helpers::Array<AmatDx9ShaderV1> shaders ;
    helpers::Array<AmatDx9TechniqueV1> techniques ;
};

typedef AmatDx9MaterialV1 Gw2StructDX9S;

/* Version: 0, ReferencedFunction: 0x1 */
struct AmatDx9SamplerV0 {
    dword textureIndex;
    helpers::Array<dword> state ;
};

struct AmatDx9ShaderV0 {
    helpers::Array<dword> shader ;
    helpers::Array<dword> constRegisters ;
    helpers::Array<dword> constTokens ;
};

struct AmatDx9PassV0 {
    helpers::Array<dword> renderState ;
    helpers::Array<dword> samplerIndex ;
    dword pixelShader;
    dword vertexShader;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
    dword vsGenFlags;
    dword passFlags;
};

struct AmatDx9TechniqueV0 {
    helpers::String name;
    dword sortTri;
    helpers::Array<AmatDx9PassV0> passes ;
    word maxPsVersion;
    word maxVsVersion;
};

struct AmatDx9MaterialV0 {
    helpers::Array<AmatDx9SamplerV0> samplers ;
    helpers::Array<AmatDx9ShaderV0> shaders ;
    helpers::Array<AmatDx9TechniqueV0> techniques ;
};

typedef AmatDx9MaterialV0 Gw2StructDX9S;


/* ===============================================
 * Chunk: TOOL, versions: 4, strucTab: 0x141999400
 * ===============================================
 */

/* Version: 3, ReferencedFunction: 0x403DE16000000001 */
struct AmatToolConstant {
    dword token;
    helpers::WString displayName;
    float4 defaultValue;
    dword flags;
    float4 minValue;
    float4 maxValue;
};

struct AmatToolTexture {
    helpers::WString texName;
    helpers::WString texDefaultFile;
    dword flags;
    helpers::Array<dword> texGen ;
};

struct AmatToolParams {
    helpers::WString description;
    dword flags;
    byte texCoordCount;
    byte texTransformCount;
    dword decompressedTextCount;
    helpers::Array<byte> compressedText ;
    helpers::Array<AmatToolConstant> constants ;
    helpers::Array<AmatToolTexture> textures ;
};

typedef AmatToolParams Gw2StructTOOL;

/* Version: 2, ReferencedFunction: 0x403DE0E000000001 */
struct AmatToolConstant {
    dword token;
    helpers::WString displayName;
    float4 defaultValue;
    dword flags;
    float4 minValue;
    float4 maxValue;
};

struct AmatToolTexture {
    helpers::WString texName;
    helpers::WString texDefaultFile;
    dword flags;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
};

struct AmatToolParams {
    helpers::WString description;
    dword flags;
    helpers::String text;
    byte texCoordCount;
    byte texTransformCount;
    helpers::Array<AmatToolConstant> constants ;
    helpers::Array<AmatToolTexture> textures ;
};

typedef AmatToolParams Gw2StructTOOL;

/* Version: 1, ReferencedFunction: 0x403DE08000000001 */
struct AmatToolConstantV1 {
    dword token;
    helpers::WString displayName;
    float4 defaultValue;
    dword flags;
    float4 minValue;
    float4 maxValue;
};

struct AmatToolTextureV1 {
    helpers::WString texName;
    helpers::WString texDefaultFile;
    dword flags;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
};

struct AmatToolParamsV1 {
    helpers::WString description;
    dword flags;
    helpers::String text;
    byte texCoordCount;
    byte texTransformCount;
    helpers::Array<AmatToolConstantV1> constants ;
    helpers::Array<AmatToolTextureV1> textures ;
};

typedef AmatToolParamsV1 Gw2StructTOOL;

/* Version: 0, ReferencedFunction: 0x1 */
struct AmatToolConstantV0 {
    dword token;
    helpers::WString displayName;
    float4 defaultValue;
    dword flags;
    float4 minValue;
    float4 maxValue;
};

struct AmatToolTextureV0 {
    helpers::WString texName;
    helpers::WString texDefaultFile;
    dword flags;
    helpers::Array<dword> texGen ;
    helpers::Array<dword> texTransform ;
};

struct AmatToolParamsV0 {
    helpers::WString description;
    dword flags;
    helpers::String text;
    byte texCoordCount;
    byte texTransformCount;
    helpers::Array<AmatToolConstantV0> constants ;
    helpers::Array<AmatToolTextureV0> textures ;
};

typedef AmatToolParamsV0 Gw2StructTOOL;


/* ===============================================
 * Chunk: BGFX, versions: 2, strucTab: 0x141999460
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x403DD37000000001 */
struct AmatGfxShaderConstant {
    dword token;
};

struct AmatGfxSamplerConstant {
    qword token;
    dword stateIndex;
    dword textureIndex;
    dword textureSlot;
};

struct AmatGfxShaderBinary {
    helpers::Array<byte> data ;
    helpers::Array<AmatGfxShaderConstant> constants ;
    helpers::Array<AmatGfxSamplerConstant> samplers ;
};

struct AmatGfxShader {
    dword isPixelShader;
    AmatGfxShaderBinary dxShader;
    AmatGfxShaderBinary osxShader;
};

struct AmatGfxSamplerState {
    dword state;
};

struct AmatGfxVertexShaderVariant {
    dword variant;
    dword vertexShaderIndex;
};

struct AmatGfxEffect {
    qword token;
    qword renderState;
    dword shaderPassFlags;
    dword pixelShaderIndex;
    helpers::Array<AmatGfxVertexShaderVariant> vertexShaderVariants ;
};

struct AmatGfxPass {
    helpers::Array<AmatGfxEffect> effects ;
};

struct AmatGfxTechnique {
    dword quality;
    helpers::Array<AmatGfxPass> passes ;
};

struct AmatGfxMaterial {
    helpers::Array<AmatGfxShader> shaders ;
    helpers::Array<AmatGfxSamplerState> samplers ;
    helpers::Array<AmatGfxTechnique> techniques ;
};

typedef AmatGfxMaterial Gw2StructBGFX;

/* Version: 0, ReferencedFunction: 0x1 */
struct AmatGfxShaderConstant {
    dword token;
};

struct AmatGfxSamplerConstant {
    qword token;
    dword stateIndex;
    dword textureIndex;
    dword textureSlot;
};

struct AmatGfxShaderBinary {
    helpers::Array<byte> data ;
    helpers::Array<AmatGfxShaderConstant> constants ;
    helpers::Array<AmatGfxSamplerConstant> samplers ;
};

struct AmatGfxShader {
    dword isPixelShader;
    AmatGfxShaderBinary dxShader;
    AmatGfxShaderBinary osxShader;
};

struct AmatGfxSamplerState {
    dword state;
};

struct AmatGfxVertexShaderVariant {
    dword variant;
    dword vertexShaderIndex;
};

struct AmatGfxEffect {
    qword token;
    qword renderState;
    dword shaderPassFlags;
    dword pixelShaderIndex;
    helpers::Array<AmatGfxVertexShaderVariant> vertexShaderVariants ;
};

struct AmatGfxPass {
    helpers::Array<AmatGfxEffect> effects ;
};

struct AmatGfxTechnique {
    dword quality;
    helpers::Array<AmatGfxPass> passes ;
};

struct AmatGfxMaterial {
    helpers::Array<AmatGfxShader> shaders ;
    helpers::Array<AmatGfxSamplerState> samplers ;
    helpers::Array<AmatGfxTechnique> techniques ;
};

typedef AmatGfxMaterial Gw2StructBGFX;


/* ===============================================
 * Chunk: PGTB, versions: 4, strucTab: 0x141A2A870
 * ===============================================
 */

/* Version: 3, ReferencedFunction: 0x40446BD000000001 */
struct PagedImageLayerDataV3 {
    dword2 rawDims;
    dword2 strippedDims;
    dword rawFormat;
    dword strippedFormat;
    dword diskFormat;
};

struct PagedImagePageDataV3 {
    dword layer;
    dword2 coord;
    helpers::FileName filename;
    dword flags;
    byte4 solidColor;
};

struct PagedImageTableDataV3 {
    helpers::Array<PagedImageLayerDataV3> layers ;
    helpers::Array<PagedImagePageDataV3> rawPages ;
    helpers::Array<PagedImagePageDataV3> strippedPages ;
    dword flags;
};

typedef PagedImageTableDataV3 Gw2StructPGTB;

/* Version: 2, ReferencedFunction: 0x1 */
struct PagedImageLayerDataV2 {
    dword2 dims;
    dword2 rawDims;
    dword diskFormat;
    dword rawFormat;
    dword strippedFormat;
};

struct PagedImagePageDataV2 {
    dword layer;
    dword2 coord;
    helpers::FileName filename;
    dword flags;
    byte4 solidColor;
};

struct PagedImageTableDataV2 {
    helpers::Array<PagedImageLayerDataV2> layers ;
    helpers::Array<PagedImagePageDataV2> pages ;
    dword flags;
};

typedef PagedImageTableDataV2 Gw2StructPGTB;

/* Version: 1, ReferencedFunction: 0x1 */
struct PagedImageLayerDataV1 {
    dword2 dims;
    dword2 rawDims;
    dword diskFormat;
    dword rawFormat;
    dword strippedFormat;
};

struct PagedImagePageDataV1 {
    dword layer;
    dword2 coord;
    helpers::FileName filename;
    dword flags;
    byte4 solidColor;
};

struct PagedImageTableDataV1 {
    helpers::Array<PagedImageLayerDataV1> layers ;
    helpers::Array<PagedImagePageDataV1> pages ;
};

typedef PagedImageTableDataV1 Gw2StructPGTB;

/* Version: 0, ReferencedFunction: 0x1 */
struct PagedImageLayerDataV0 {
    dword2 dims;
    dword2 rawDims;
    dword diskFormat;
    dword rawFormat;
    dword strippedFormat;
};

struct PagedImagePageDataV0 {
    dword layer;
    dword2 coord;
    helpers::FileName filename;
    dword flags;
};

struct PagedImageTableDataV0 {
    helpers::Array<PagedImageLayerDataV0> layers ;
    helpers::Array<PagedImagePageDataV0> pages ;
};

typedef PagedImageTableDataV0 Gw2StructPGTB;


/* ===============================================
 * Chunk: DATA, versions: 4, strucTab: 0x141A2A8D0
 * ===============================================
 */

/* Version: 3, ReferencedFunction: 0x40446D6000000001 */
struct PagedImageLayerDataV3 {
    dword2 rawDims;
    dword2 strippedDims;
    dword rawFormat;
    dword strippedFormat;
    dword diskFormat;
};

struct PagedImagePageDataV3 {
    dword layer;
    dword2 coord;
    helpers::FileName filename;
    dword flags;
    byte4 solidColor;
};

struct PagedImageTableDataV3 {
    helpers::Array<PagedImageLayerDataV3> layers ;
    helpers::Array<PagedImagePageDataV3> rawPages ;
    helpers::Array<PagedImagePageDataV3> strippedPages ;
    dword flags;
};

typedef PagedImageTableDataV3 Gw2StructDATA;

/* Version: 2, ReferencedFunction: 0x1 */
struct PagedImageLayerDataV2 {
    dword2 dims;
    dword2 rawDims;
    dword diskFormat;
    dword rawFormat;
    dword strippedFormat;
};

struct PagedImagePageDataV2 {
    dword layer;
    dword2 coord;
    helpers::FileName filename;
    dword flags;
    byte4 solidColor;
};

struct PagedImageTableDataV2 {
    helpers::Array<PagedImageLayerDataV2> layers ;
    helpers::Array<PagedImagePageDataV2> pages ;
    dword flags;
};

typedef PagedImageTableDataV2 Gw2StructDATA;

/* Version: 1, ReferencedFunction: 0x1 */
struct PagedImageLayerDataV1 {
    dword2 dims;
    dword2 rawDims;
    dword diskFormat;
    dword rawFormat;
    dword strippedFormat;
};

struct PagedImagePageDataV1 {
    dword layer;
    dword2 coord;
    helpers::FileName filename;
    dword flags;
    byte4 solidColor;
};

struct PagedImageTableDataV1 {
    helpers::Array<PagedImageLayerDataV1> layers ;
    helpers::Array<PagedImagePageDataV1> pages ;
};

typedef PagedImageTableDataV1 Gw2StructDATA;

/* Version: 0, ReferencedFunction: 0x1 */
struct PagedImageEmbeddedPageDataV0 {
    dword layer;
    dword2 coord;
    helpers::Array<byte> rawData ;
    helpers::Array<byte> compressedData ;
};

struct PagedImageEmbeddedPagesDataV0 {
    helpers::Array<PagedImageEmbeddedPageDataV0> pages ;
};

typedef PagedImageEmbeddedPagesDataV0 Gw2StructDATA;


/* ===============================================
 * Chunk: txtm, versions: 1, strucTab: 0x141A61E40
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct TextPackLanguage {
    helpers::Array<filename> filenames ;
};

struct TextPackManifest {
    dword stringsPerFile;
    helpers::Array<TextPackLanguage> languages ;
};

typedef TextPackManifest Gw2Structtxtm;


/* ===============================================
 * Chunk: txtp, versions: 1, strucTab: 0x141A61E68
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct TextPackPassword {
    dword textId;
    qword password;
};

struct TextPackPasswords {
    dword stringCount;
    helpers::Array<TextPackPassword> passwords ;
};

typedef TextPackPasswords Gw2Structtxtp;


/* ===============================================
 * Chunk: txtv, versions: 1, strucTab: 0x141A61E90
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct TextPackVoice {
    dword textId;
    dword voiceId;
};

struct TextPackVoices {
    helpers::Array<TextPackVoice> voices ;
};

typedef TextPackVoices Gw2Structtxtv;


/* ===============================================
 * Chunk: vari, versions: 1, strucTab: 0x141A61EB8
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct TextPackVariant {
    dword textId;
    helpers::Array<dword> variantTextIds ;
};

struct TextPackVariants {
    helpers::Array<TextPackVariant> variants ;
};

typedef TextPackVariants Gw2Structvari;


/* ===============================================
 * Chunk: AMSP, versions: 33, strucTab: 0x141E81ED0
 * ===============================================
 */

/* Version: 32, ReferencedFunction: 0x40F76EF000000001 */
struct DspDataV31 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV31 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV31> dsp ;
};

struct BussDataV31 {
    qword name;
    qword output;
    dword flags;
    float normalizeFadeTime;
    float normalizeThreshold;
    float normalizeMaxAmp;
    float compressorThreshold;
    float compressorAttack;
    float compressorRelease;
    float compressorGainMakeup;
    helpers::Ptr<BussDynamicDataV31> dynamicData ;
};

struct EnvelopePointDataV31 {
    float offset;
    float value;
};

struct EnvelopeDataV31 {
    float inputOffset;
    qword inputOffsetProperty;
    qword inputParameter;
    float inputScale;
    qword inputScaleProperty;
    byte inputType;
    float outputOffset;
    qword outputOffsetProperty;
    float outputScale;
    qword outputScaleProperty;
    helpers::Array<EnvelopePointDataV31> envelopePoint ;
};

struct RangeDataV31 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV31 {
    RangeDataV31 time;
    RangeDataV31 value;
};

struct DynamicParamDataV31 {
    helpers::Ptr<EnvelopeDataV31> envelopeData ;
    helpers::Ptr<RandomParamDataV31> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV31 {
    float doppler;
    DynamicParamDataV31 lowPass;
    DynamicParamDataV31 highPass;
    DynamicParamDataV31 pan3D;
    DynamicParamDataV31 reverb;
    DynamicParamDataV31 spread3D;
    DynamicParamDataV31 volumeA;
    DynamicParamDataV31 volumeB;
    DynamicParamDataV31 lfe;
};

struct CategoryDynamicDataV31 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float highPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
    dword minAudible;
    dword maxAudibleLQ;
    dword maxAudibleHG;
};

struct CategoryDataV31 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV31> attenuation ;
    helpers::Ptr<CategoryDynamicDataV31> dynamicData ;
    float focusReserve;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
    byte priority;
};

struct MaterialDataV31 {
    qword name;
    dword flags;
    float absorptionLF;
    float absorptionMF;
    float absorptionHF;
    float occlusion;
};

struct MusicConditionDataV31 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV31 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
    byte noteBase;
    byte noteMin;
    byte noteMax;
};

struct MusicPlaylistDataV31 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV31> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV31 initialSilence;
    RangeDataV31 intervalSilence;
    RangeDataV31 maxPlayLength;
    DynamicParamDataV31 volume;
    byte fileIterateMode;
};

struct PropertyDataV31 {
    qword name;
    qword tokenValue;
    float floatValue;
};

struct ReverbDataV31 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct ScriptRefDataV31 {
    qword name;
    helpers::FileName fileName;
};

struct SnapshotDataV31 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV31> buss ;
    helpers::Array<CategoryDynamicDataV31> category ;
    byte priority;
};

struct MusicExternalDataV31 {
    qword name;
    helpers::WString externalPlaylist;
};

struct AudioSettingsDataV31 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float echoLevel;
    float focusTransition;
    float memoryPool;
    float reverbLevel;
    dword minChannelsLQ;
    dword maxChannelsLQ;
    helpers::Array<BussDataV31> buss ;
    helpers::Array<CategoryDataV31> category ;
    helpers::Array<MaterialDataV31> material ;
    helpers::Array<MusicConditionDataV31> musicCondition ;
    helpers::Array<MusicPlaylistDataV31> musicPlaylist ;
    helpers::Array<PropertyDataV31> property ;
    helpers::Array<ReverbDataV31> reverb ;
    helpers::Array<ScriptRefDataV31> scriptRef ;
    helpers::Array<SnapshotDataV31> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
    helpers::Array<MusicExternalDataV31> musicExternal ;
};

struct HandlerDataV31 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV31 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV31> dsp ;
    helpers::Ptr<AttenuationDataV31> attenuation ;
    helpers::Array<FileNameDataV31> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float modelScaleSizeFactor;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV31 depth;
    DynamicParamDataV31 pan;
    DynamicParamDataV31 pitch;
    DynamicParamDataV31 pitchMS;
    DynamicParamDataV31 volume;
    DynamicParamDataV31 volumeMS;
    RangeDataV31 initialDelay;
    RangeDataV31 playLength;
    RangeDataV31 positionOffsetAngle;
    RangeDataV31 positionRange;
    RangeDataV31 repeatCount;
    RangeDataV31 repeatTime;
    RangeDataV31 replayDelay;
    RangeDataV31 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct TriggerMarkerDataV31 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV31 {
    qword name;
    helpers::Array<TriggerMarkerDataV31> triggerMarker ;
};

struct ScriptFileDataV32 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV31> audioSettings ;
    helpers::Array<HandlerDataV31> handler ;
    helpers::Array<MetaSoundDataV31> metaSound ;
    helpers::Array<ScriptRefDataV31> scriptRef ;
    helpers::Array<TriggerKeyDataV31> triggerKey ;
    helpers::Array<PropertyDataV31> property ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
    byte musicMutePriority;
    byte soundPoolMode;
    byte interpolation;
    float radialLimit;
    RangeDataV31 scaleBucketRange;
};

typedef ScriptFileDataV32 Gw2StructAMSP;

/* Version: 31, ReferencedFunction: 0x1 */
struct DspDataV31 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV31 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV31> dsp ;
};

struct BussDataV31 {
    qword name;
    qword output;
    dword flags;
    float normalizeFadeTime;
    float normalizeThreshold;
    float normalizeMaxAmp;
    float compressorThreshold;
    float compressorAttack;
    float compressorRelease;
    float compressorGainMakeup;
    helpers::Ptr<BussDynamicDataV31> dynamicData ;
};

struct EnvelopePointDataV31 {
    float offset;
    float value;
};

struct EnvelopeDataV31 {
    float inputOffset;
    qword inputOffsetProperty;
    qword inputParameter;
    float inputScale;
    qword inputScaleProperty;
    byte inputType;
    float outputOffset;
    qword outputOffsetProperty;
    float outputScale;
    qword outputScaleProperty;
    helpers::Array<EnvelopePointDataV31> envelopePoint ;
};

struct RangeDataV31 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV31 {
    RangeDataV31 time;
    RangeDataV31 value;
};

struct DynamicParamDataV31 {
    helpers::Ptr<EnvelopeDataV31> envelopeData ;
    helpers::Ptr<RandomParamDataV31> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV31 {
    float doppler;
    DynamicParamDataV31 lowPass;
    DynamicParamDataV31 highPass;
    DynamicParamDataV31 pan3D;
    DynamicParamDataV31 reverb;
    DynamicParamDataV31 spread3D;
    DynamicParamDataV31 volumeA;
    DynamicParamDataV31 volumeB;
    DynamicParamDataV31 lfe;
};

struct CategoryDynamicDataV31 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float highPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
    dword minAudible;
    dword maxAudibleLQ;
    dword maxAudibleHG;
};

struct CategoryDataV31 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV31> attenuation ;
    helpers::Ptr<CategoryDynamicDataV31> dynamicData ;
    float focusReserve;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
    byte priority;
};

struct MaterialDataV31 {
    qword name;
    dword flags;
    float absorptionLF;
    float absorptionMF;
    float absorptionHF;
    float occlusion;
};

struct MusicConditionDataV31 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV31 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
    byte noteBase;
    byte noteMin;
    byte noteMax;
};

struct MusicPlaylistDataV31 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV31> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV31 initialSilence;
    RangeDataV31 intervalSilence;
    RangeDataV31 maxPlayLength;
    DynamicParamDataV31 volume;
    byte fileIterateMode;
};

struct PropertyDataV31 {
    qword name;
    qword tokenValue;
    float floatValue;
};

struct ReverbDataV31 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct ScriptRefDataV31 {
    qword name;
    helpers::FileName fileName;
};

struct SnapshotDataV31 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV31> buss ;
    helpers::Array<CategoryDynamicDataV31> category ;
    byte priority;
};

struct MusicExternalDataV31 {
    qword name;
    helpers::WString externalPlaylist;
};

struct AudioSettingsDataV31 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float echoLevel;
    float focusTransition;
    float memoryPool;
    float reverbLevel;
    dword minChannelsLQ;
    dword maxChannelsLQ;
    helpers::Array<BussDataV31> buss ;
    helpers::Array<CategoryDataV31> category ;
    helpers::Array<MaterialDataV31> material ;
    helpers::Array<MusicConditionDataV31> musicCondition ;
    helpers::Array<MusicPlaylistDataV31> musicPlaylist ;
    helpers::Array<PropertyDataV31> property ;
    helpers::Array<ReverbDataV31> reverb ;
    helpers::Array<ScriptRefDataV31> scriptRef ;
    helpers::Array<SnapshotDataV31> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
    helpers::Array<MusicExternalDataV31> musicExternal ;
};

struct HandlerDataV31 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV31 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV31> dsp ;
    helpers::Ptr<AttenuationDataV31> attenuation ;
    helpers::Array<FileNameDataV31> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float modelScaleSizeFactor;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV31 depth;
    DynamicParamDataV31 pan;
    DynamicParamDataV31 pitch;
    DynamicParamDataV31 pitchMS;
    DynamicParamDataV31 volume;
    DynamicParamDataV31 volumeMS;
    RangeDataV31 initialDelay;
    RangeDataV31 playLength;
    RangeDataV31 positionOffsetAngle;
    RangeDataV31 positionRange;
    RangeDataV31 repeatCount;
    RangeDataV31 repeatTime;
    RangeDataV31 replayDelay;
    RangeDataV31 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct TriggerMarkerDataV31 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV31 {
    qword name;
    helpers::Array<TriggerMarkerDataV31> triggerMarker ;
};

struct ScriptFileDataV31 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV31> audioSettings ;
    helpers::Array<HandlerDataV31> handler ;
    helpers::Array<MetaSoundDataV31> metaSound ;
    helpers::Array<ScriptRefDataV31> scriptRef ;
    helpers::Array<TriggerKeyDataV31> triggerKey ;
    helpers::Array<PropertyDataV31> property ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
    byte musicMutePriority;
    byte soundPoolMode;
};

typedef ScriptFileDataV31 Gw2StructAMSP;

/* Version: 30, ReferencedFunction: 0x40F76D5000000001 */
struct DspDataV30 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV30 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV30> dsp ;
};

struct BussDataV30 {
    qword name;
    qword output;
    dword flags;
    float normalizeFadeTime;
    float normalizeThreshold;
    float normalizeMaxAmp;
    float compressorThreshold;
    float compressorAttack;
    float compressorRelease;
    float compressorGainMakeup;
    helpers::Ptr<BussDynamicDataV30> dynamicData ;
};

struct EnvelopePointDataV30 {
    float offset;
    float value;
};

struct EnvelopeDataV30 {
    float inputOffset;
    qword inputOffsetProperty;
    qword inputParameter;
    float inputScale;
    qword inputScaleProperty;
    byte inputType;
    float outputOffset;
    qword outputOffsetProperty;
    float outputScale;
    qword outputScaleProperty;
    helpers::Array<EnvelopePointDataV30> envelopePoint ;
};

struct RangeDataV30 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV30 {
    RangeDataV30 time;
    RangeDataV30 value;
};

struct DynamicParamDataV30 {
    helpers::Ptr<EnvelopeDataV30> envelopeData ;
    helpers::Ptr<RandomParamDataV30> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV30 {
    float doppler;
    DynamicParamDataV30 lowPass;
    DynamicParamDataV30 highPass;
    DynamicParamDataV30 pan3D;
    DynamicParamDataV30 reverb;
    DynamicParamDataV30 spread3D;
    DynamicParamDataV30 volumeA;
    DynamicParamDataV30 volumeB;
    DynamicParamDataV30 lfe;
};

struct CategoryDynamicDataV30 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float highPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
    dword minAudible;
    dword maxAudibleLQ;
    dword maxAudibleHG;
};

struct CategoryDataV30 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV30> attenuation ;
    helpers::Ptr<CategoryDynamicDataV30> dynamicData ;
    float focusReserve;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
    byte priority;
};

struct MaterialDataV30 {
    qword name;
    dword flags;
    float absorptionLF;
    float absorptionMF;
    float absorptionHF;
    float occlusion;
};

struct MusicConditionDataV30 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV30 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
    byte noteBase;
    byte noteMin;
    byte noteMax;
};

struct MusicPlaylistDataV30 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV30> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV30 initialSilence;
    RangeDataV30 intervalSilence;
    RangeDataV30 maxPlayLength;
    DynamicParamDataV30 volume;
    byte fileIterateMode;
};

struct PropertyDataV30 {
    qword name;
    qword tokenValue;
    float floatValue;
};

struct ReverbDataV30 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct ScriptRefDataV30 {
    qword name;
    helpers::FileName fileName;
};

struct SnapshotDataV30 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV30> buss ;
    helpers::Array<CategoryDynamicDataV30> category ;
    byte priority;
};

struct MusicExternalDataV30 {
    qword name;
    helpers::WString externalPlaylist;
};

struct AudioSettingsDataV30 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float echoLevel;
    float focusTransition;
    float memoryPool;
    float reverbLevel;
    dword minChannelsLQ;
    dword maxChannelsLQ;
    helpers::Array<BussDataV30> buss ;
    helpers::Array<CategoryDataV30> category ;
    helpers::Array<MaterialDataV30> material ;
    helpers::Array<MusicConditionDataV30> musicCondition ;
    helpers::Array<MusicPlaylistDataV30> musicPlaylist ;
    helpers::Array<PropertyDataV30> property ;
    helpers::Array<ReverbDataV30> reverb ;
    helpers::Array<ScriptRefDataV30> scriptRef ;
    helpers::Array<SnapshotDataV30> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
    helpers::Array<MusicExternalDataV30> musicExternal ;
};

struct HandlerDataV30 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV30 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV30> dsp ;
    helpers::Ptr<AttenuationDataV30> attenuation ;
    helpers::Array<FileNameDataV30> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV30 depth;
    DynamicParamDataV30 pan;
    DynamicParamDataV30 pitch;
    DynamicParamDataV30 pitchMS;
    DynamicParamDataV30 volume;
    DynamicParamDataV30 volumeMS;
    RangeDataV30 initialDelay;
    RangeDataV30 playLength;
    RangeDataV30 positionOffsetAngle;
    RangeDataV30 positionRange;
    RangeDataV30 repeatCount;
    RangeDataV30 repeatTime;
    RangeDataV30 replayDelay;
    RangeDataV30 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct TriggerMarkerDataV30 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV30 {
    qword name;
    helpers::Array<TriggerMarkerDataV30> triggerMarker ;
};

struct ScriptFileDataV30 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV30> audioSettings ;
    helpers::Array<HandlerDataV30> handler ;
    helpers::Array<MetaSoundDataV30> metaSound ;
    helpers::Array<ScriptRefDataV30> scriptRef ;
    helpers::Array<TriggerKeyDataV30> triggerKey ;
    helpers::Array<PropertyDataV30> property ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
    byte musicMutePriority;
    byte soundPoolMode;
};

typedef ScriptFileDataV30 Gw2StructAMSP;

/* Version: 29, ReferencedFunction: 0x1 */
struct DspDataV29 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV29 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV29> dsp ;
};

struct BussDataV29 {
    qword name;
    qword output;
    dword flags;
    float normalizeFadeTime;
    float normalizeThreshold;
    float normalizeMaxAmp;
    float compressorThreshold;
    float compressorAttack;
    float compressorRelease;
    float compressorGainMakeup;
    helpers::Ptr<BussDynamicDataV29> dynamicData ;
};

struct EnvelopePointDataV29 {
    float offset;
    float value;
};

struct EnvelopeDataV29 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV29> envelopePoint ;
    byte offsetType;
};

struct RangeDataV29 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV29 {
    RangeDataV29 time;
    RangeDataV29 value;
};

struct DynamicParamDataV29 {
    helpers::Ptr<EnvelopeDataV29> envelopeData ;
    helpers::Ptr<RandomParamDataV29> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV29 {
    float doppler;
    DynamicParamDataV29 lowPass;
    DynamicParamDataV29 highPass;
    DynamicParamDataV29 pan3D;
    DynamicParamDataV29 reverb;
    DynamicParamDataV29 spread3D;
    DynamicParamDataV29 volumeA;
    DynamicParamDataV29 volumeB;
    DynamicParamDataV29 lfe;
};

struct CategoryDynamicDataV29 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float highPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
    dword minAudible;
    dword maxAudibleLQ;
    dword maxAudibleHG;
};

struct CategoryDataV29 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV29> attenuation ;
    helpers::Ptr<CategoryDynamicDataV29> dynamicData ;
    float focusReserve;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
    byte priority;
};

struct MaterialDataV29 {
    qword name;
    dword flags;
    float absorptionLF;
    float absorptionMF;
    float absorptionHF;
    float occlusion;
};

struct MusicConditionDataV29 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV29 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
    byte noteBase;
    byte noteMin;
    byte noteMax;
};

struct MusicPlaylistDataV29 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV29> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV29 initialSilence;
    RangeDataV29 intervalSilence;
    RangeDataV29 maxPlayLength;
    DynamicParamDataV29 volume;
    byte fileIterateMode;
};

struct PropertyDataV29 {
    qword name;
    qword tokenValue;
    float floatValue;
};

struct ReverbDataV29 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct ScriptRefDataV29 {
    qword name;
    helpers::FileName fileName;
};

struct SnapshotDataV29 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV29> buss ;
    helpers::Array<CategoryDynamicDataV29> category ;
    byte priority;
};

struct MusicExternalDataV29 {
    qword name;
    helpers::WString externalPlaylist;
};

struct AudioSettingsDataV29 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float echoLevel;
    float focusTransition;
    float memoryPool;
    float reverbLevel;
    dword minChannelsLQ;
    dword maxChannelsLQ;
    helpers::Array<BussDataV29> buss ;
    helpers::Array<CategoryDataV29> category ;
    helpers::Array<MaterialDataV29> material ;
    helpers::Array<MusicConditionDataV29> musicCondition ;
    helpers::Array<MusicPlaylistDataV29> musicPlaylist ;
    helpers::Array<PropertyDataV29> property ;
    helpers::Array<ReverbDataV29> reverb ;
    helpers::Array<ScriptRefDataV29> scriptRef ;
    helpers::Array<SnapshotDataV29> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
    helpers::Array<MusicExternalDataV29> musicExternal ;
};

struct HandlerDataV29 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV29 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV29> dsp ;
    helpers::Ptr<AttenuationDataV29> attenuation ;
    helpers::Array<FileNameDataV29> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV29 depth;
    DynamicParamDataV29 pan;
    DynamicParamDataV29 pitch;
    DynamicParamDataV29 pitchMS;
    DynamicParamDataV29 volume;
    DynamicParamDataV29 volumeMS;
    RangeDataV29 initialDelay;
    RangeDataV29 playLength;
    RangeDataV29 positionOffsetAngle;
    RangeDataV29 positionRange;
    RangeDataV29 repeatCount;
    RangeDataV29 repeatTime;
    RangeDataV29 replayDelay;
    RangeDataV29 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct TriggerMarkerDataV29 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV29 {
    qword name;
    helpers::Array<TriggerMarkerDataV29> triggerMarker ;
};

struct ScriptFileDataV29 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV29> audioSettings ;
    helpers::Array<HandlerDataV29> handler ;
    helpers::Array<MetaSoundDataV29> metaSound ;
    helpers::Array<ScriptRefDataV29> scriptRef ;
    helpers::Array<TriggerKeyDataV29> triggerKey ;
    helpers::Array<PropertyDataV29> property ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
    byte musicMutePriority;
    byte soundPoolMode;
};

typedef ScriptFileDataV29 Gw2StructAMSP;

/* Version: 28, ReferencedFunction: 0x1 */
struct DspDataV28 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV28 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV28> dsp ;
};

struct BussDataV28 {
    qword name;
    qword output;
    dword flags;
    float normalizeFadeTime;
    float normalizeThreshold;
    float normalizeMaxAmp;
    float compressorThreshold;
    float compressorAttack;
    float compressorRelease;
    float compressorGainMakeup;
    helpers::Ptr<BussDynamicDataV28> dynamicData ;
};

struct EnvelopePointDataV28 {
    float offset;
    float value;
};

struct EnvelopeDataV28 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV28> envelopePoint ;
    byte offsetType;
};

struct RangeDataV28 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV28 {
    RangeDataV28 time;
    RangeDataV28 value;
};

struct DynamicParamDataV28 {
    helpers::Ptr<EnvelopeDataV28> envelopeData ;
    helpers::Ptr<RandomParamDataV28> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV28 {
    float doppler;
    DynamicParamDataV28 lowPass;
    DynamicParamDataV28 highPass;
    DynamicParamDataV28 pan3D;
    DynamicParamDataV28 reverb;
    DynamicParamDataV28 spread3D;
    DynamicParamDataV28 volumeA;
    DynamicParamDataV28 volumeB;
    DynamicParamDataV28 lfe;
};

struct CategoryDynamicDataV28 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float highPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
    dword minAudible;
    dword maxAudibleLQ;
    dword maxAudibleHG;
};

struct CategoryDataV28 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV28> attenuation ;
    helpers::Ptr<CategoryDynamicDataV28> dynamicData ;
    float focusReserve;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
    byte priority;
};

struct MaterialDataV28 {
    qword name;
    dword flags;
    float absorptionLF;
    float absorptionMF;
    float absorptionHF;
    float occlusion;
};

struct MusicConditionDataV28 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV28 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
    byte noteBase;
    byte noteMin;
    byte noteMax;
};

struct MusicPlaylistDataV28 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV28> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV28 initialSilence;
    RangeDataV28 intervalSilence;
    RangeDataV28 maxPlayLength;
    DynamicParamDataV28 volume;
    byte fileIterateMode;
};

struct PropertyDataV28 {
    qword name;
    qword tokenValue;
    float floatValue;
};

struct ReverbDataV28 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct ScriptRefDataV28 {
    qword name;
    helpers::FileName fileName;
};

struct SnapshotDataV28 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV28> buss ;
    helpers::Array<CategoryDynamicDataV28> category ;
    byte priority;
};

struct AudioSettingsDataV28 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float echoLevel;
    float focusTransition;
    float memoryPool;
    float reverbLevel;
    dword minChannelsLQ;
    dword maxChannelsLQ;
    helpers::Array<BussDataV28> buss ;
    helpers::Array<CategoryDataV28> category ;
    helpers::Array<MaterialDataV28> material ;
    helpers::Array<MusicConditionDataV28> musicCondition ;
    helpers::Array<MusicPlaylistDataV28> musicPlaylist ;
    helpers::Array<PropertyDataV28> property ;
    helpers::Array<ReverbDataV28> reverb ;
    helpers::Array<ScriptRefDataV28> scriptRef ;
    helpers::Array<SnapshotDataV28> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV28 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV28 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV28> dsp ;
    helpers::Ptr<AttenuationDataV28> attenuation ;
    helpers::Array<FileNameDataV28> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV28 depth;
    DynamicParamDataV28 pan;
    DynamicParamDataV28 pitch;
    DynamicParamDataV28 pitchMS;
    DynamicParamDataV28 volume;
    DynamicParamDataV28 volumeMS;
    RangeDataV28 initialDelay;
    RangeDataV28 playLength;
    RangeDataV28 positionOffsetAngle;
    RangeDataV28 positionRange;
    RangeDataV28 repeatCount;
    RangeDataV28 repeatTime;
    RangeDataV28 replayDelay;
    RangeDataV28 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct TriggerMarkerDataV28 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV28 {
    qword name;
    helpers::Array<TriggerMarkerDataV28> triggerMarker ;
};

struct ScriptFileDataV28 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV28> audioSettings ;
    helpers::Array<HandlerDataV28> handler ;
    helpers::Array<MetaSoundDataV28> metaSound ;
    helpers::Array<ScriptRefDataV28> scriptRef ;
    helpers::Array<TriggerKeyDataV28> triggerKey ;
    helpers::Array<PropertyDataV28> property ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
    byte musicMutePriority;
    byte soundPoolMode;
};

typedef ScriptFileDataV28 Gw2StructAMSP;

/* Version: 27, ReferencedFunction: 0x1 */
struct DspDataV27 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV27 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV27> dsp ;
};

struct BussDataV27 {
    qword name;
    qword output;
    dword flags;
    float normalizeFadeTime;
    float normalizeThreshold;
    float normalizeMaxAmp;
    float compressorThreshold;
    float compressorAttack;
    float compressorRelease;
    float compressorGainMakeup;
    helpers::Ptr<BussDynamicDataV27> dynamicData ;
};

struct EnvelopePointDataV27 {
    float offset;
    float value;
};

struct EnvelopeDataV27 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV27> envelopePoint ;
    byte offsetType;
};

struct RangeDataV27 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV27 {
    RangeDataV27 time;
    RangeDataV27 value;
};

struct DynamicParamDataV27 {
    helpers::Ptr<EnvelopeDataV27> envelopeData ;
    helpers::Ptr<RandomParamDataV27> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV27 {
    float doppler;
    DynamicParamDataV27 lowPass;
    DynamicParamDataV27 highPass;
    DynamicParamDataV27 pan3D;
    DynamicParamDataV27 reverb;
    DynamicParamDataV27 spread3D;
    DynamicParamDataV27 volumeA;
    DynamicParamDataV27 volumeB;
    DynamicParamDataV27 lfe;
};

struct CategoryDynamicDataV27 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float highPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
    dword minAudible;
    dword maxAudibleLQ;
    dword maxAudibleHG;
};

struct CategoryDataV27 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV27> attenuation ;
    helpers::Ptr<CategoryDynamicDataV27> dynamicData ;
    float focusReserve;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
    byte priority;
};

struct MaterialDataV27 {
    qword name;
    dword flags;
    float absorptionLF;
    float absorptionMF;
    float absorptionHF;
    float occlusion;
};

struct MusicConditionDataV27 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV27 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
    byte noteBase;
    byte noteMin;
    byte noteMax;
};

struct MusicPlaylistDataV27 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV27> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV27 initialSilence;
    RangeDataV27 intervalSilence;
    RangeDataV27 maxPlayLength;
    DynamicParamDataV27 volume;
    byte fileIterateMode;
};

struct PropertyDataV27 {
    qword name;
    qword tokenValue;
    float floatValue;
};

struct ReverbDataV27 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct ScriptRefDataV27 {
    qword name;
    helpers::FileName fileName;
};

struct SnapshotDataV27 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV27> buss ;
    helpers::Array<CategoryDynamicDataV27> category ;
    byte priority;
};

struct AudioSettingsDataV27 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float echoLevel;
    float focusTransition;
    float memoryPool;
    float reverbLevel;
    dword minChannelsLQ;
    dword maxChannelsLQ;
    helpers::Array<BussDataV27> buss ;
    helpers::Array<CategoryDataV27> category ;
    helpers::Array<MaterialDataV27> material ;
    helpers::Array<MusicConditionDataV27> musicCondition ;
    helpers::Array<MusicPlaylistDataV27> musicPlaylist ;
    helpers::Array<PropertyDataV27> property ;
    helpers::Array<ReverbDataV27> reverb ;
    helpers::Array<ScriptRefDataV27> scriptRef ;
    helpers::Array<SnapshotDataV27> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV27 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV27 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV27> dsp ;
    helpers::Ptr<AttenuationDataV27> attenuation ;
    helpers::Array<FileNameDataV27> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV27 depth;
    DynamicParamDataV27 pan;
    DynamicParamDataV27 pitch;
    DynamicParamDataV27 pitchMS;
    DynamicParamDataV27 volume;
    DynamicParamDataV27 volumeMS;
    RangeDataV27 initialDelay;
    RangeDataV27 playLength;
    RangeDataV27 positionOffsetAngle;
    RangeDataV27 positionRange;
    RangeDataV27 repeatCount;
    RangeDataV27 repeatTime;
    RangeDataV27 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct TriggerMarkerDataV27 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV27 {
    qword name;
    helpers::Array<TriggerMarkerDataV27> triggerMarker ;
};

struct ScriptFileDataV27 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV27> audioSettings ;
    helpers::Array<HandlerDataV27> handler ;
    helpers::Array<MetaSoundDataV27> metaSound ;
    helpers::Array<ScriptRefDataV27> scriptRef ;
    helpers::Array<TriggerKeyDataV27> triggerKey ;
    helpers::Array<PropertyDataV27> property ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
    byte musicMutePriority;
};

typedef ScriptFileDataV27 Gw2StructAMSP;

/* Version: 26, ReferencedFunction: 0x1 */
struct DspDataV26 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV26 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV26> dsp ;
};

struct BussDataV26 {
    qword name;
    qword output;
    dword flags;
    float normalizeFadeTime;
    float normalizeThreshold;
    float normalizeMaxAmp;
    float compressorThreshold;
    float compressorAttack;
    float compressorRelease;
    float compressorGainMakeup;
    helpers::Ptr<BussDynamicDataV26> dynamicData ;
};

struct EnvelopePointDataV26 {
    float offset;
    float value;
};

struct EnvelopeDataV26 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV26> envelopePoint ;
    byte offsetType;
};

struct RangeDataV26 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV26 {
    RangeDataV26 time;
    RangeDataV26 value;
};

struct DynamicParamDataV26 {
    helpers::Ptr<EnvelopeDataV26> envelopeData ;
    helpers::Ptr<RandomParamDataV26> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV26 {
    float doppler;
    DynamicParamDataV26 lowPass;
    DynamicParamDataV26 highPass;
    DynamicParamDataV26 pan3D;
    DynamicParamDataV26 reverb;
    DynamicParamDataV26 spread3D;
    DynamicParamDataV26 volumeA;
    DynamicParamDataV26 volumeB;
    DynamicParamDataV26 lfe;
};

struct CategoryDynamicDataV26 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float highPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
    dword minAudible;
    dword maxAudibleLQ;
    dword maxAudibleHG;
};

struct CategoryDataV26 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV26> attenuation ;
    helpers::Ptr<CategoryDynamicDataV26> dynamicData ;
    float focusReserve;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
    byte priority;
};

struct MaterialDataV26 {
    qword name;
    dword flags;
    float absorptionLF;
    float absorptionMF;
    float absorptionHF;
    float occlusion;
};

struct MusicConditionDataV26 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV26 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
    byte noteBase;
    byte noteMin;
    byte noteMax;
};

struct MusicPlaylistDataV26 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV26> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV26 initialSilence;
    RangeDataV26 intervalSilence;
    RangeDataV26 maxPlayLength;
    DynamicParamDataV26 volume;
    byte fileIterateMode;
};

struct ReverbDataV26 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct SnapshotDataV26 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV26> buss ;
    helpers::Array<CategoryDynamicDataV26> category ;
    byte priority;
};

struct AudioSettingsDataV26 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    float memoryPool;
    float reverbLevel;
    dword minChannelsLQ;
    dword maxChannelsLQ;
    helpers::Array<BussDataV26> buss ;
    helpers::Array<CategoryDataV26> category ;
    helpers::Array<MaterialDataV26> material ;
    helpers::Array<MusicConditionDataV26> musicCondition ;
    helpers::Array<MusicPlaylistDataV26> musicPlaylist ;
    helpers::Array<ReverbDataV26> reverb ;
    helpers::Array<SnapshotDataV26> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV26 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV26 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV26> dsp ;
    helpers::Ptr<AttenuationDataV26> attenuation ;
    helpers::Array<FileNameDataV26> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV26 depth;
    DynamicParamDataV26 pan;
    DynamicParamDataV26 pitch;
    DynamicParamDataV26 pitchMS;
    DynamicParamDataV26 volume;
    DynamicParamDataV26 volumeMS;
    RangeDataV26 initialDelay;
    RangeDataV26 playLength;
    RangeDataV26 positionOffsetAngle;
    RangeDataV26 positionRange;
    RangeDataV26 repeatCount;
    RangeDataV26 repeatTime;
    RangeDataV26 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV26 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV26 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV26 {
    qword name;
    helpers::Array<TriggerMarkerDataV26> triggerMarker ;
};

struct ScriptFileDataV26 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV26> audioSettings ;
    helpers::Array<HandlerDataV26> handler ;
    helpers::Array<MetaSoundDataV26> metaSound ;
    helpers::Array<ScriptRefDataV26> scriptRef ;
    helpers::Array<TriggerKeyDataV26> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
    byte musicMutePriority;
};

typedef ScriptFileDataV26 Gw2StructAMSP;

/* Version: 25, ReferencedFunction: 0x1 */
struct DspDataV25 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV25 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV25> dsp ;
};

struct BussDataV25 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV25> dynamicData ;
};

struct EnvelopePointDataV25 {
    float offset;
    float value;
};

struct EnvelopeDataV25 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV25> envelopePoint ;
    byte offsetType;
};

struct RangeDataV25 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV25 {
    RangeDataV25 time;
    RangeDataV25 value;
};

struct DynamicParamDataV25 {
    helpers::Ptr<EnvelopeDataV25> envelopeData ;
    helpers::Ptr<RandomParamDataV25> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV25 {
    float doppler;
    DynamicParamDataV25 lowPass;
    DynamicParamDataV25 highPass;
    DynamicParamDataV25 pan3D;
    DynamicParamDataV25 reverb;
    DynamicParamDataV25 spread3D;
    DynamicParamDataV25 volumeA;
    DynamicParamDataV25 volumeB;
};

struct CategoryDynamicDataV25 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float highPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV25 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV25> attenuation ;
    helpers::Ptr<CategoryDynamicDataV25> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct MaterialDataV25 {
    qword name;
    dword flags;
    float absorptionLF;
    float absorptionMF;
    float absorptionHF;
    float occlusion;
};

struct MusicConditionDataV25 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV25 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
    byte noteBase;
    byte noteMin;
    byte noteMax;
};

struct MusicPlaylistDataV25 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV25> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV25 initialSilence;
    RangeDataV25 intervalSilence;
    RangeDataV25 maxPlayLength;
    DynamicParamDataV25 volume;
    byte fileIterateMode;
};

struct ReverbDataV25 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct SnapshotDataV25 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV25> buss ;
    helpers::Array<CategoryDynamicDataV25> category ;
    byte priority;
};

struct AudioSettingsDataV25 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV25> buss ;
    helpers::Array<CategoryDataV25> category ;
    helpers::Array<MaterialDataV25> material ;
    helpers::Array<MusicConditionDataV25> musicCondition ;
    helpers::Array<MusicPlaylistDataV25> musicPlaylist ;
    helpers::Array<ReverbDataV25> reverb ;
    helpers::Array<SnapshotDataV25> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV25 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV25 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV25> dsp ;
    helpers::Ptr<AttenuationDataV25> attenuation ;
    helpers::Array<FileNameDataV25> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV25 depth;
    DynamicParamDataV25 pan;
    DynamicParamDataV25 pitch;
    DynamicParamDataV25 pitchMS;
    DynamicParamDataV25 volume;
    DynamicParamDataV25 volumeMS;
    RangeDataV25 initialDelay;
    RangeDataV25 playLength;
    RangeDataV25 positionOffsetAngle;
    RangeDataV25 positionRange;
    RangeDataV25 repeatCount;
    RangeDataV25 repeatTime;
    RangeDataV25 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV25 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV25 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV25 {
    qword name;
    helpers::Array<TriggerMarkerDataV25> triggerMarker ;
};

struct ScriptFileDataV25 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV25> audioSettings ;
    helpers::Array<HandlerDataV25> handler ;
    helpers::Array<MetaSoundDataV25> metaSound ;
    helpers::Array<ScriptRefDataV25> scriptRef ;
    helpers::Array<TriggerKeyDataV25> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
    byte musicMutePriority;
};

typedef ScriptFileDataV25 Gw2StructAMSP;

/* Version: 24, ReferencedFunction: 0x1 */
struct DspDataV24 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV24 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV24> dsp ;
};

struct BussDataV24 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV24> dynamicData ;
};

struct EnvelopePointDataV24 {
    float offset;
    float value;
};

struct EnvelopeDataV24 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV24> envelopePoint ;
    byte offsetType;
};

struct RangeDataV24 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV24 {
    RangeDataV24 time;
    RangeDataV24 value;
};

struct DynamicParamDataV24 {
    helpers::Ptr<EnvelopeDataV24> envelopeData ;
    helpers::Ptr<RandomParamDataV24> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV24 {
    float doppler;
    DynamicParamDataV24 lowPass;
    DynamicParamDataV24 highPass;
    DynamicParamDataV24 pan3D;
    DynamicParamDataV24 reverb;
    DynamicParamDataV24 spread3D;
    DynamicParamDataV24 volumeA;
    DynamicParamDataV24 volumeB;
};

struct CategoryDynamicDataV24 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float highPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV24 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV24> attenuation ;
    helpers::Ptr<CategoryDynamicDataV24> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct MusicConditionDataV24 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV24 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
    byte noteBase;
    byte noteMin;
    byte noteMax;
};

struct MusicPlaylistDataV24 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV24> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV24 initialSilence;
    RangeDataV24 intervalSilence;
    RangeDataV24 maxPlayLength;
    DynamicParamDataV24 volume;
    byte fileIterateMode;
};

struct ReverbDataV24 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct SnapshotDataV24 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV24> buss ;
    helpers::Array<CategoryDynamicDataV24> category ;
    byte priority;
};

struct AudioSettingsDataV24 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV24> buss ;
    helpers::Array<CategoryDataV24> category ;
    helpers::Array<MusicConditionDataV24> musicCondition ;
    helpers::Array<MusicPlaylistDataV24> musicPlaylist ;
    helpers::Array<ReverbDataV24> reverb ;
    helpers::Array<SnapshotDataV24> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV24 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV24 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV24> dsp ;
    helpers::Ptr<AttenuationDataV24> attenuation ;
    helpers::Array<FileNameDataV24> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV24 depth;
    DynamicParamDataV24 pan;
    DynamicParamDataV24 pitch;
    DynamicParamDataV24 pitchMS;
    DynamicParamDataV24 volume;
    DynamicParamDataV24 volumeMS;
    RangeDataV24 initialDelay;
    RangeDataV24 playLength;
    RangeDataV24 positionOffsetAngle;
    RangeDataV24 positionRange;
    RangeDataV24 repeatCount;
    RangeDataV24 repeatTime;
    RangeDataV24 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV24 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV24 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV24 {
    qword name;
    helpers::Array<TriggerMarkerDataV24> triggerMarker ;
};

struct ScriptFileDataV24 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV24> audioSettings ;
    helpers::Array<HandlerDataV24> handler ;
    helpers::Array<MetaSoundDataV24> metaSound ;
    helpers::Array<ScriptRefDataV24> scriptRef ;
    helpers::Array<TriggerKeyDataV24> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
    byte musicMutePriority;
};

typedef ScriptFileDataV24 Gw2StructAMSP;

/* Version: 23, ReferencedFunction: 0x1 */
struct DspDataV23 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV23 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV23> dsp ;
};

struct BussDataV23 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV23> dynamicData ;
};

struct EnvelopePointDataV23 {
    float offset;
    float value;
};

struct EnvelopeDataV23 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV23> envelopePoint ;
    byte offsetType;
};

struct RangeDataV23 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV23 {
    RangeDataV23 time;
    RangeDataV23 value;
};

struct DynamicParamDataV23 {
    helpers::Ptr<EnvelopeDataV23> envelopeData ;
    helpers::Ptr<RandomParamDataV23> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV23 {
    float doppler;
    DynamicParamDataV23 lowPass;
    DynamicParamDataV23 highPass;
    DynamicParamDataV23 pan3D;
    DynamicParamDataV23 reverb;
    DynamicParamDataV23 spread3D;
    DynamicParamDataV23 volumeA;
    DynamicParamDataV23 volumeB;
};

struct CategoryDynamicDataV23 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float highPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV23 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV23> attenuation ;
    helpers::Ptr<CategoryDynamicDataV23> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct MusicConditionDataV23 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV23 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MusicPlaylistDataV23 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV23> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV23 initialSilence;
    RangeDataV23 intervalSilence;
    RangeDataV23 maxPlayLength;
    DynamicParamDataV23 volume;
    byte fileIterateMode;
};

struct ReverbDataV23 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct SnapshotDataV23 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV23> buss ;
    helpers::Array<CategoryDynamicDataV23> category ;
    byte priority;
};

struct AudioSettingsDataV23 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV23> buss ;
    helpers::Array<CategoryDataV23> category ;
    helpers::Array<MusicConditionDataV23> musicCondition ;
    helpers::Array<MusicPlaylistDataV23> musicPlaylist ;
    helpers::Array<ReverbDataV23> reverb ;
    helpers::Array<SnapshotDataV23> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV23 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV23 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV23> dsp ;
    helpers::Ptr<AttenuationDataV23> attenuation ;
    helpers::Array<FileNameDataV23> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV23 depth;
    DynamicParamDataV23 pan;
    DynamicParamDataV23 pitch;
    DynamicParamDataV23 pitchMS;
    DynamicParamDataV23 volume;
    DynamicParamDataV23 volumeMS;
    RangeDataV23 initialDelay;
    RangeDataV23 playLength;
    RangeDataV23 positionOffsetAngle;
    RangeDataV23 positionRange;
    RangeDataV23 repeatCount;
    RangeDataV23 repeatTime;
    RangeDataV23 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV23 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV23 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV23 {
    qword name;
    helpers::Array<TriggerMarkerDataV23> triggerMarker ;
};

struct ScriptFileDataV23 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV23> audioSettings ;
    helpers::Array<HandlerDataV23> handler ;
    helpers::Array<MetaSoundDataV23> metaSound ;
    helpers::Array<ScriptRefDataV23> scriptRef ;
    helpers::Array<TriggerKeyDataV23> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
    byte musicMutePriority;
};

typedef ScriptFileDataV23 Gw2StructAMSP;

/* Version: 22, ReferencedFunction: 0x1 */
struct DspDataV22 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV22 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV22> dsp ;
};

struct BussDataV22 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV22> dynamicData ;
};

struct EnvelopePointDataV22 {
    float offset;
    float value;
};

struct EnvelopeDataV22 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV22> envelopePoint ;
    byte offsetType;
};

struct RangeDataV22 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV22 {
    RangeDataV22 time;
    RangeDataV22 value;
};

struct DynamicParamDataV22 {
    helpers::Ptr<EnvelopeDataV22> envelopeData ;
    helpers::Ptr<RandomParamDataV22> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV22 {
    float doppler;
    DynamicParamDataV22 lowPass;
    DynamicParamDataV22 highPass;
    DynamicParamDataV22 pan3D;
    DynamicParamDataV22 reverb;
    DynamicParamDataV22 spread3D;
    DynamicParamDataV22 volumeA;
    DynamicParamDataV22 volumeB;
};

struct CategoryDynamicDataV22 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float highPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV22 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV22> attenuation ;
    helpers::Ptr<CategoryDynamicDataV22> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct MusicConditionDataV22 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV22 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MusicPlaylistDataV22 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV22> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV22 initialSilence;
    RangeDataV22 intervalSilence;
    RangeDataV22 maxPlayLength;
    DynamicParamDataV22 volume;
    byte fileIterateMode;
};

struct ReverbDataV22 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct SnapshotDataV22 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV22> buss ;
    helpers::Array<CategoryDynamicDataV22> category ;
    byte priority;
};

struct AudioSettingsDataV22 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV22> buss ;
    helpers::Array<CategoryDataV22> category ;
    helpers::Array<MusicConditionDataV22> musicCondition ;
    helpers::Array<MusicPlaylistDataV22> musicPlaylist ;
    helpers::Array<ReverbDataV22> reverb ;
    helpers::Array<SnapshotDataV22> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV22 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV22 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV22> dsp ;
    helpers::Ptr<AttenuationDataV22> attenuation ;
    helpers::Array<FileNameDataV22> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV22 depth;
    DynamicParamDataV22 pan;
    DynamicParamDataV22 pitch;
    DynamicParamDataV22 pitchMS;
    DynamicParamDataV22 volume;
    DynamicParamDataV22 volumeMS;
    RangeDataV22 initialDelay;
    RangeDataV22 playLength;
    RangeDataV22 positionOffsetAngle;
    RangeDataV22 positionRange;
    RangeDataV22 repeatCount;
    RangeDataV22 repeatTime;
    RangeDataV22 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV22 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV22 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV22 {
    qword name;
    helpers::Array<TriggerMarkerDataV22> triggerMarker ;
};

struct ScriptFileDataV22 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV22> audioSettings ;
    helpers::Array<HandlerDataV22> handler ;
    helpers::Array<MetaSoundDataV22> metaSound ;
    helpers::Array<ScriptRefDataV22> scriptRef ;
    helpers::Array<TriggerKeyDataV22> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
};

typedef ScriptFileDataV22 Gw2StructAMSP;

/* Version: 21, ReferencedFunction: 0x1 */
struct DspDataV21 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV21 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV21> dsp ;
};

struct BussDataV21 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV21> dynamicData ;
};

struct EnvelopePointDataV21 {
    float offset;
    float value;
};

struct EnvelopeDataV21 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV21> envelopePoint ;
    byte offsetType;
};

struct RangeDataV21 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV21 {
    RangeDataV21 time;
    RangeDataV21 value;
};

struct DynamicParamDataV21 {
    helpers::Ptr<EnvelopeDataV21> envelopeData ;
    helpers::Ptr<RandomParamDataV21> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV21 {
    float doppler;
    DynamicParamDataV21 lowPass;
    DynamicParamDataV21 pan3D;
    DynamicParamDataV21 reverb;
    DynamicParamDataV21 spread3D;
    DynamicParamDataV21 volumeA;
    DynamicParamDataV21 volumeB;
};

struct CategoryDynamicDataV21 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV21 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV21> attenuation ;
    helpers::Ptr<CategoryDynamicDataV21> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct MusicConditionDataV21 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV21 {
    qword condition;
    qword language;
    float volume;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MusicPlaylistDataV21 {
    qword category;
    qword name;
    qword primaryPlaylistId;
    qword secondaryPlaylistId;
    helpers::Array<FileNameDataV21> fileName ;
    float fadeInTime;
    float fadeOutTime;
    dword flags;
    RangeDataV21 initialSilence;
    RangeDataV21 intervalSilence;
    RangeDataV21 maxPlayLength;
    DynamicParamDataV21 volume;
    byte fileIterateMode;
};

struct ReverbDataV21 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct SnapshotDataV21 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV21> buss ;
    helpers::Array<CategoryDynamicDataV21> category ;
    byte priority;
};

struct AudioSettingsDataV21 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV21> buss ;
    helpers::Array<CategoryDataV21> category ;
    helpers::Array<MusicConditionDataV21> musicCondition ;
    helpers::Array<MusicPlaylistDataV21> musicPlaylist ;
    helpers::Array<ReverbDataV21> reverb ;
    helpers::Array<SnapshotDataV21> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV21 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct MetaSoundDataV21 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV21> dsp ;
    helpers::Ptr<AttenuationDataV21> attenuation ;
    helpers::Array<FileNameDataV21> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV21 depth;
    DynamicParamDataV21 pan;
    DynamicParamDataV21 pitch;
    DynamicParamDataV21 pitchMS;
    DynamicParamDataV21 volume;
    DynamicParamDataV21 volumeMS;
    RangeDataV21 initialDelay;
    RangeDataV21 playLength;
    RangeDataV21 positionOffsetAngle;
    RangeDataV21 positionRange;
    RangeDataV21 repeatCount;
    RangeDataV21 repeatTime;
    RangeDataV21 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV21 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV21 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV21 {
    qword name;
    helpers::Array<TriggerMarkerDataV21> triggerMarker ;
};

struct ScriptFileDataV21 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV21> audioSettings ;
    helpers::Array<HandlerDataV21> handler ;
    helpers::Array<MetaSoundDataV21> metaSound ;
    helpers::Array<ScriptRefDataV21> scriptRef ;
    helpers::Array<TriggerKeyDataV21> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
};

typedef ScriptFileDataV21 Gw2StructAMSP;

/* Version: 20, ReferencedFunction: 0x1 */
struct DspDataV20 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV20 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV20> dsp ;
};

struct BussDataV20 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV20> dynamicData ;
};

struct EnvelopePointDataV20 {
    float offset;
    float value;
};

struct EnvelopeDataV20 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV20> envelopePoint ;
    byte offsetType;
};

struct RangeDataV20 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV20 {
    RangeDataV20 time;
    RangeDataV20 value;
};

struct DynamicParamDataV20 {
    helpers::Ptr<EnvelopeDataV20> envelopeData ;
    helpers::Ptr<RandomParamDataV20> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV20 {
    float doppler;
    DynamicParamDataV20 lowPass;
    DynamicParamDataV20 pan3D;
    DynamicParamDataV20 reverb;
    DynamicParamDataV20 spread3D;
    DynamicParamDataV20 volumeA;
    DynamicParamDataV20 volumeB;
};

struct CategoryDynamicDataV20 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV20 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV20> attenuation ;
    helpers::Ptr<CategoryDynamicDataV20> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV20 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct SnapshotDataV20 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV20> buss ;
    helpers::Array<CategoryDynamicDataV20> category ;
    byte priority;
};

struct AudioSettingsDataV20 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV20> buss ;
    helpers::Array<CategoryDataV20> category ;
    helpers::Array<ReverbDataV20> reverb ;
    helpers::Array<SnapshotDataV20> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV20 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV20 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV20 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV20> dsp ;
    helpers::Ptr<AttenuationDataV20> attenuation ;
    helpers::Array<FileNameDataV20> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV20 depth;
    DynamicParamDataV20 pan;
    DynamicParamDataV20 pitch;
    DynamicParamDataV20 pitchMS;
    DynamicParamDataV20 volume;
    DynamicParamDataV20 volumeMS;
    RangeDataV20 initialDelay;
    RangeDataV20 playLength;
    RangeDataV20 positionOffsetAngle;
    RangeDataV20 positionRange;
    RangeDataV20 repeatCount;
    RangeDataV20 repeatTime;
    RangeDataV20 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV20 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV20 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV20 {
    qword name;
    helpers::Array<TriggerMarkerDataV20> triggerMarker ;
};

struct ScriptFileDataV20 {
    qword musicCue;
    qword reverbOverride;
    qword snapshot;
    helpers::Ptr<AudioSettingsDataV20> audioSettings ;
    helpers::Array<HandlerDataV20> handler ;
    helpers::Array<MetaSoundDataV20> metaSound ;
    helpers::Array<ScriptRefDataV20> scriptRef ;
    helpers::Array<TriggerKeyDataV20> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
};

typedef ScriptFileDataV20 Gw2StructAMSP;

/* Version: 19, ReferencedFunction: 0x40F76C8000000001 */
struct DspDataV19 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV19 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV19> dsp ;
};

struct BussDataV19 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV19> dynamicData ;
};

struct EnvelopePointDataV19 {
    float offset;
    float value;
};

struct EnvelopeDataV19 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV19> envelopePoint ;
    byte offsetType;
};

struct RangeDataV19 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV19 {
    RangeDataV19 time;
    RangeDataV19 value;
};

struct DynamicParamDataV19 {
    helpers::Ptr<EnvelopeDataV19> envelopeData ;
    helpers::Ptr<RandomParamDataV19> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV19 {
    float doppler;
    DynamicParamDataV19 lowPass;
    DynamicParamDataV19 pan3D;
    DynamicParamDataV19 reverb;
    DynamicParamDataV19 spread3D;
    DynamicParamDataV19 volumeA;
    DynamicParamDataV19 volumeB;
};

struct CategoryDynamicDataV19 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV19 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV19> attenuation ;
    helpers::Ptr<CategoryDynamicDataV19> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV19 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct SnapshotDataV19 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV19> buss ;
    helpers::Array<CategoryDynamicDataV19> category ;
    byte priority;
};

struct AudioSettingsDataV19 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV19> buss ;
    helpers::Array<CategoryDataV19> category ;
    helpers::Array<ReverbDataV19> reverb ;
    helpers::Array<SnapshotDataV19> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV19 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV19 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV19 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV19> dsp ;
    helpers::Ptr<AttenuationDataV19> attenuation ;
    helpers::Array<FileNameDataV19> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV19 depth;
    DynamicParamDataV19 pan;
    DynamicParamDataV19 pitch;
    DynamicParamDataV19 pitchMS;
    DynamicParamDataV19 volume;
    DynamicParamDataV19 volumeMS;
    RangeDataV19 initialDelay;
    RangeDataV19 playLength;
    RangeDataV19 positionOffsetAngle;
    RangeDataV19 positionRange;
    RangeDataV19 repeatCount;
    RangeDataV19 repeatTime;
    RangeDataV19 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV19 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV19 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV19 {
    qword name;
    helpers::Array<TriggerMarkerDataV19> triggerMarker ;
};

struct ScriptFileDataV19 {
    qword musicCue;
    qword reverbOverride;
    helpers::Ptr<AudioSettingsDataV19> audioSettings ;
    helpers::Array<HandlerDataV19> handler ;
    helpers::Array<MetaSoundDataV19> metaSound ;
    helpers::Array<ScriptRefDataV19> scriptRef ;
    helpers::Array<TriggerKeyDataV19> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
};

typedef ScriptFileDataV19 Gw2StructAMSP;

/* Version: 18, ReferencedFunction: 0x40F76A1000000001 */
struct DspDataV18 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV18 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV18> dsp ;
};

struct BussDataV18 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV18> dynamicData ;
};

struct EnvelopePointDataV18 {
    float offset;
    float value;
};

struct EnvelopeDataV18 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV18> envelopePoint ;
    byte offsetType;
};

struct RangeDataV18 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV18 {
    RangeDataV18 time;
    RangeDataV18 value;
};

struct DynamicParamDataV18 {
    helpers::Ptr<EnvelopeDataV18> envelopeData ;
    helpers::Ptr<RandomParamDataV18> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV18 {
    float doppler;
    DynamicParamDataV18 lowPass;
    DynamicParamDataV18 pan3D;
    DynamicParamDataV18 reverb;
    DynamicParamDataV18 spread3D;
    DynamicParamDataV18 volumeA;
    DynamicParamDataV18 volumeB;
};

struct CategoryDynamicDataV18 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV18 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV18> attenuation ;
    helpers::Ptr<CategoryDynamicDataV18> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV18 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct SnapshotDataV18 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV18> buss ;
    helpers::Array<CategoryDynamicDataV18> category ;
};

struct AudioSettingsDataV18 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV18> buss ;
    helpers::Array<CategoryDataV18> category ;
    helpers::Array<ReverbDataV18> reverb ;
    helpers::Array<SnapshotDataV18> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV18 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV18 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV18 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV18> dsp ;
    helpers::Ptr<AttenuationDataV18> attenuation ;
    helpers::Array<FileNameDataV18> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV18 depth;
    DynamicParamDataV18 pan;
    DynamicParamDataV18 pitch;
    DynamicParamDataV18 pitchMS;
    DynamicParamDataV18 volume;
    DynamicParamDataV18 volumeMS;
    RangeDataV18 initialDelay;
    RangeDataV18 playLength;
    RangeDataV18 positionOffsetAngle;
    RangeDataV18 positionRange;
    RangeDataV18 repeatCount;
    RangeDataV18 repeatTime;
    RangeDataV18 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV18 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV18 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV18 {
    qword name;
    helpers::Array<TriggerMarkerDataV18> triggerMarker ;
};

struct ScriptFileDataV18 {
    qword musicCue;
    qword reverbOverride;
    helpers::Ptr<AudioSettingsDataV18> audioSettings ;
    helpers::Array<HandlerDataV18> handler ;
    helpers::Array<MetaSoundDataV18> metaSound ;
    helpers::Array<ScriptRefDataV18> scriptRef ;
    helpers::Array<TriggerKeyDataV18> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
};

typedef ScriptFileDataV18 Gw2StructAMSP;

/* Version: 17, ReferencedFunction: 0x1 */
struct DspDataV17 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV17 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV17> dsp ;
};

struct BussDataV17 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV17> dynamicData ;
};

struct EnvelopePointDataV17 {
    float offset;
    float value;
};

struct EnvelopeDataV17 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV17> envelopePoint ;
    byte offsetType;
};

struct RangeDataV17 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV17 {
    RangeDataV17 time;
    RangeDataV17 value;
};

struct DynamicParamDataV17 {
    helpers::Ptr<EnvelopeDataV17> envelopeData ;
    helpers::Ptr<RandomParamDataV17> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV17 {
    float doppler;
    DynamicParamDataV17 lowPass;
    DynamicParamDataV17 pan3D;
    DynamicParamDataV17 reverb;
    DynamicParamDataV17 spread3D;
    DynamicParamDataV17 volumeA;
    DynamicParamDataV17 volumeB;
};

struct CategoryDynamicDataV17 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV17 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV17> attenuation ;
    helpers::Ptr<CategoryDynamicDataV17> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV17 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct SnapshotDataV17 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV17> buss ;
    helpers::Array<CategoryDynamicDataV17> category ;
};

struct AudioSettingsDataV17 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV17> buss ;
    helpers::Array<CategoryDataV17> category ;
    helpers::Array<ReverbDataV17> reverb ;
    helpers::Array<SnapshotDataV17> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV17 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV17 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV17 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV17> dsp ;
    helpers::Ptr<AttenuationDataV17> attenuation ;
    helpers::Array<FileNameDataV17> fileName ;
    float channelFadeIn;
    float channelFadeOut;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword channelMax;
    dword flags;
    dword loopCount;
    DynamicParamDataV17 depth;
    DynamicParamDataV17 pan;
    DynamicParamDataV17 pitch;
    DynamicParamDataV17 pitchMS;
    DynamicParamDataV17 volume;
    DynamicParamDataV17 volumeMS;
    RangeDataV17 initialDelay;
    RangeDataV17 playLength;
    RangeDataV17 positionOffsetAngle;
    RangeDataV17 positionRange;
    RangeDataV17 repeatCount;
    RangeDataV17 repeatTime;
    RangeDataV17 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV17 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV17 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV17 {
    qword name;
    helpers::Array<TriggerMarkerDataV17> triggerMarker ;
};

struct ScriptFileDataV17 {
    qword musicCue;
    qword reverbOverride;
    helpers::Ptr<AudioSettingsDataV17> audioSettings ;
    helpers::Array<HandlerDataV17> handler ;
    helpers::Array<MetaSoundDataV17> metaSound ;
    helpers::Array<ScriptRefDataV17> scriptRef ;
    helpers::Array<TriggerKeyDataV17> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
};

typedef ScriptFileDataV17 Gw2StructAMSP;

/* Version: 16, ReferencedFunction: 0x1 */
struct DspDataV16 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV16 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV16> dsp ;
};

struct BussDataV16 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV16> dynamicData ;
};

struct EnvelopePointDataV16 {
    float offset;
    float value;
};

struct EnvelopeDataV16 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV16> envelopePoint ;
    byte offsetType;
};

struct RangeDataV16 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV16 {
    RangeDataV16 time;
    RangeDataV16 value;
};

struct DynamicParamDataV16 {
    helpers::Ptr<EnvelopeDataV16> envelopeData ;
    helpers::Ptr<RandomParamDataV16> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV16 {
    float doppler;
    DynamicParamDataV16 lowPass;
    DynamicParamDataV16 pan3D;
    DynamicParamDataV16 reverb;
    DynamicParamDataV16 spread3D;
    DynamicParamDataV16 volumeA;
    DynamicParamDataV16 volumeB;
};

struct CategoryDynamicDataV16 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV16 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV16> attenuation ;
    helpers::Ptr<CategoryDynamicDataV16> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV16 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
    float echoDelay;
    float echoDecayRatio;
    float echoWetMix;
    float echoDryMix;
};

struct SnapshotDataV16 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV16> buss ;
    helpers::Array<CategoryDynamicDataV16> category ;
};

struct AudioSettingsDataV16 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV16> buss ;
    helpers::Array<CategoryDataV16> category ;
    helpers::Array<ReverbDataV16> reverb ;
    helpers::Array<SnapshotDataV16> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV16 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV16 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV16 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV16> dsp ;
    helpers::Ptr<AttenuationDataV16> attenuation ;
    helpers::Array<FileNameDataV16> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV16 depth;
    DynamicParamDataV16 pan;
    DynamicParamDataV16 pitch;
    DynamicParamDataV16 pitchMS;
    DynamicParamDataV16 volume;
    DynamicParamDataV16 volumeMS;
    RangeDataV16 initialDelay;
    RangeDataV16 playLength;
    RangeDataV16 positionOffsetAngle;
    RangeDataV16 positionRange;
    RangeDataV16 repeatCount;
    RangeDataV16 repeatTime;
    RangeDataV16 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV16 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV16 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV16 {
    qword name;
    helpers::Array<TriggerMarkerDataV16> triggerMarker ;
};

struct ScriptFileDataV16 {
    qword musicCue;
    qword reverbOverride;
    helpers::Ptr<AudioSettingsDataV16> audioSettings ;
    helpers::Array<HandlerDataV16> handler ;
    helpers::Array<MetaSoundDataV16> metaSound ;
    helpers::Array<ScriptRefDataV16> scriptRef ;
    helpers::Array<TriggerKeyDataV16> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
};

typedef ScriptFileDataV16 Gw2StructAMSP;

/* Version: 15, ReferencedFunction: 0x1 */
struct DspDataV15 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV15 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV15> dsp ;
};

struct BussDataV15 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV15> dynamicData ;
};

struct EnvelopePointDataV15 {
    float offset;
    float value;
};

struct EnvelopeDataV15 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV15> envelopePoint ;
    byte offsetType;
};

struct RangeDataV15 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV15 {
    RangeDataV15 time;
    RangeDataV15 value;
};

struct DynamicParamDataV15 {
    helpers::Ptr<EnvelopeDataV15> envelopeData ;
    helpers::Ptr<RandomParamDataV15> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV15 {
    float doppler;
    DynamicParamDataV15 lowPass;
    DynamicParamDataV15 pan3D;
    DynamicParamDataV15 reverb;
    DynamicParamDataV15 spread3D;
    DynamicParamDataV15 volumeA;
    DynamicParamDataV15 volumeB;
};

struct CategoryDynamicDataV15 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV15 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV15> attenuation ;
    helpers::Ptr<CategoryDynamicDataV15> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV15 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
};

struct SnapshotDataV15 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV15> buss ;
    helpers::Array<CategoryDynamicDataV15> category ;
};

struct AudioSettingsDataV15 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV15> buss ;
    helpers::Array<CategoryDataV15> category ;
    helpers::Array<ReverbDataV15> reverb ;
    helpers::Array<SnapshotDataV15> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV15 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV15 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV15 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV15> dsp ;
    helpers::Ptr<AttenuationDataV15> attenuation ;
    helpers::Array<FileNameDataV15> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV15 depth;
    DynamicParamDataV15 pan;
    DynamicParamDataV15 pitch;
    DynamicParamDataV15 pitchMS;
    DynamicParamDataV15 volume;
    DynamicParamDataV15 volumeMS;
    RangeDataV15 initialDelay;
    RangeDataV15 playLength;
    RangeDataV15 positionOffsetAngle;
    RangeDataV15 positionRange;
    RangeDataV15 repeatCount;
    RangeDataV15 repeatTime;
    RangeDataV15 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV15 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV15 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV15 {
    qword name;
    helpers::Array<TriggerMarkerDataV15> triggerMarker ;
};

struct ScriptFileDataV15 {
    qword musicCue;
    qword reverbOverride;
    helpers::Ptr<AudioSettingsDataV15> audioSettings ;
    helpers::Array<HandlerDataV15> handler ;
    helpers::Array<MetaSoundDataV15> metaSound ;
    helpers::Array<ScriptRefDataV15> scriptRef ;
    helpers::Array<TriggerKeyDataV15> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
};

typedef ScriptFileDataV15 Gw2StructAMSP;

/* Version: 14, ReferencedFunction: 0x1 */
struct DspDataV14 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV14 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV14> dsp ;
};

struct BussDataV14 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV14> dynamicData ;
};

struct EnvelopePointDataV14 {
    float offset;
    float value;
};

struct EnvelopeDataV14 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV14> envelopePoint ;
    byte offsetType;
};

struct RangeDataV14 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV14 {
    RangeDataV14 time;
    RangeDataV14 value;
};

struct DynamicParamDataV14 {
    helpers::Ptr<EnvelopeDataV14> envelopeData ;
    helpers::Ptr<RandomParamDataV14> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV14 {
    float doppler;
    DynamicParamDataV14 lowPass;
    DynamicParamDataV14 pan3D;
    DynamicParamDataV14 spread3D;
    DynamicParamDataV14 volumeA;
    DynamicParamDataV14 volumeB;
};

struct CategoryDynamicDataV14 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV14 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV14> attenuation ;
    helpers::Ptr<CategoryDynamicDataV14> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV14 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
};

struct SnapshotDataV14 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV14> buss ;
    helpers::Array<CategoryDynamicDataV14> category ;
};

struct AudioSettingsDataV14 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float dopplerScale;
    float focusTransition;
    helpers::Array<BussDataV14> buss ;
    helpers::Array<CategoryDataV14> category ;
    helpers::Array<ReverbDataV14> reverb ;
    helpers::Array<SnapshotDataV14> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV14 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV14 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV14 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV14> dsp ;
    helpers::Ptr<AttenuationDataV14> attenuation ;
    helpers::Array<FileNameDataV14> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV14 depth;
    DynamicParamDataV14 pan;
    DynamicParamDataV14 pitch;
    DynamicParamDataV14 pitchMS;
    DynamicParamDataV14 volume;
    DynamicParamDataV14 volumeMS;
    RangeDataV14 initialDelay;
    RangeDataV14 playLength;
    RangeDataV14 positionOffsetAngle;
    RangeDataV14 positionRange;
    RangeDataV14 repeatCount;
    RangeDataV14 repeatTime;
    RangeDataV14 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV14 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV14 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV14 {
    qword name;
    helpers::Array<TriggerMarkerDataV14> triggerMarker ;
};

struct ScriptFileDataV14 {
    qword musicCue;
    qword reverbOverride;
    helpers::Ptr<AudioSettingsDataV14> audioSettings ;
    helpers::Array<HandlerDataV14> handler ;
    helpers::Array<MetaSoundDataV14> metaSound ;
    helpers::Array<ScriptRefDataV14> scriptRef ;
    helpers::Array<TriggerKeyDataV14> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
};

typedef ScriptFileDataV14 Gw2StructAMSP;

/* Version: 13, ReferencedFunction: 0x1 */
struct DspDataV13 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV13 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV13> dsp ;
};

struct BussDataV13 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV13> dynamicData ;
};

struct EnvelopePointDataV13 {
    float offset;
    float value;
};

struct EnvelopeDataV13 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV13> envelopePoint ;
    byte offsetType;
};

struct RangeDataV13 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV13 {
    RangeDataV13 time;
    RangeDataV13 value;
};

struct DynamicParamDataV13 {
    helpers::Ptr<EnvelopeDataV13> envelopeData ;
    helpers::Ptr<RandomParamDataV13> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV13 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV13 lowPass;
    DynamicParamDataV13 pan3D;
    DynamicParamDataV13 spread3D;
    DynamicParamDataV13 volumeA;
    DynamicParamDataV13 volumeB;
};

struct CategoryDynamicDataV13 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV13 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV13> attenuation ;
    helpers::Ptr<CategoryDynamicDataV13> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV13 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
};

struct SnapshotDataV13 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV13> buss ;
    helpers::Array<CategoryDynamicDataV13> category ;
};

struct AudioSettingsDataV13 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float focusTransition;
    helpers::Array<BussDataV13> buss ;
    helpers::Array<CategoryDataV13> category ;
    helpers::Array<ReverbDataV13> reverb ;
    helpers::Array<SnapshotDataV13> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV13 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV13 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV13 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV13> dsp ;
    helpers::Ptr<AttenuationDataV13> attenuation ;
    helpers::Array<FileNameDataV13> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV13 depth;
    DynamicParamDataV13 pan;
    DynamicParamDataV13 pitch;
    DynamicParamDataV13 pitchMS;
    DynamicParamDataV13 volume;
    DynamicParamDataV13 volumeMS;
    RangeDataV13 initialDelay;
    RangeDataV13 playLength;
    RangeDataV13 positionOffsetAngle;
    RangeDataV13 positionRange;
    RangeDataV13 repeatCount;
    RangeDataV13 repeatTime;
    RangeDataV13 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV13 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV13 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV13 {
    qword name;
    helpers::Array<TriggerMarkerDataV13> triggerMarker ;
};

struct ScriptFileDataV13 {
    qword musicCue;
    qword reverbOverride;
    helpers::Ptr<AudioSettingsDataV13> audioSettings ;
    helpers::Array<HandlerDataV13> handler ;
    helpers::Array<MetaSoundDataV13> metaSound ;
    helpers::Array<ScriptRefDataV13> scriptRef ;
    helpers::Array<TriggerKeyDataV13> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
};

typedef ScriptFileDataV13 Gw2StructAMSP;

/* Version: 12, ReferencedFunction: 0x40F76A0000000001 */
struct DspDataV12 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV12 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV12> dsp ;
};

struct BussDataV12 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV12> dynamicData ;
};

struct EnvelopePointDataV12 {
    float offset;
    float value;
};

struct EnvelopeDataV12 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV12> envelopePoint ;
    byte offsetType;
};

struct RangeDataV12 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV12 {
    RangeDataV12 time;
    RangeDataV12 value;
};

struct DynamicParamDataV12 {
    helpers::Ptr<EnvelopeDataV12> envelopeData ;
    helpers::Ptr<RandomParamDataV12> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV12 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV12 lowPass;
    DynamicParamDataV12 pan3D;
    DynamicParamDataV12 spread3D;
    DynamicParamDataV12 volumeA;
    DynamicParamDataV12 volumeB;
};

struct CategoryDynamicDataV12 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV12 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV12> attenuation ;
    helpers::Ptr<CategoryDynamicDataV12> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV12 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
};

struct SnapshotDataV12 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV12> buss ;
    helpers::Array<CategoryDynamicDataV12> category ;
};

struct AudioSettingsDataV12 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float focusTransition;
    helpers::Array<BussDataV12> buss ;
    helpers::Array<CategoryDataV12> category ;
    helpers::Array<ReverbDataV12> reverb ;
    helpers::Array<SnapshotDataV12> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV12 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV12 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV12 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV12> dsp ;
    helpers::Ptr<AttenuationDataV12> attenuation ;
    helpers::Array<FileNameDataV12> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV12 depth;
    DynamicParamDataV12 pan;
    DynamicParamDataV12 pitch;
    DynamicParamDataV12 pitchMS;
    DynamicParamDataV12 volume;
    DynamicParamDataV12 volumeMS;
    RangeDataV12 initialDelay;
    RangeDataV12 playLength;
    RangeDataV12 positionOffsetAngle;
    RangeDataV12 positionRange;
    RangeDataV12 repeatCount;
    RangeDataV12 repeatTime;
    RangeDataV12 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV12 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV12 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV12 {
    qword name;
    helpers::Array<TriggerMarkerDataV12> triggerMarker ;
};

struct ScriptFileDataV12 {
    qword musicCue;
    helpers::Ptr<AudioSettingsDataV12> audioSettings ;
    helpers::Array<HandlerDataV12> handler ;
    helpers::Array<MetaSoundDataV12> metaSound ;
    helpers::Array<ScriptRefDataV12> scriptRef ;
    helpers::Array<TriggerKeyDataV12> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
    byte musicCuePriority;
};

typedef ScriptFileDataV12 Gw2StructAMSP;

/* Version: 11, ReferencedFunction: 0x1 */
struct DspDataV11 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV11 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV11> dsp ;
};

struct BussDataV11 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV11> dynamicData ;
};

struct EnvelopePointDataV11 {
    float offset;
    float value;
};

struct EnvelopeDataV11 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV11> envelopePoint ;
    byte offsetType;
};

struct RangeDataV11 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV11 {
    RangeDataV11 time;
    RangeDataV11 value;
};

struct DynamicParamDataV11 {
    helpers::Ptr<EnvelopeDataV11> envelopeData ;
    helpers::Ptr<RandomParamDataV11> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV11 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV11 lowPass;
    DynamicParamDataV11 pan3D;
    DynamicParamDataV11 spread3D;
    DynamicParamDataV11 volumeA;
    DynamicParamDataV11 volumeB;
};

struct CategoryDynamicDataV11 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV11 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV11> attenuation ;
    helpers::Ptr<CategoryDynamicDataV11> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV11 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
};

struct SnapshotDataV11 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV11> buss ;
    helpers::Array<CategoryDynamicDataV11> category ;
};

struct AudioSettingsDataV11 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float focusTransition;
    helpers::Array<BussDataV11> buss ;
    helpers::Array<CategoryDataV11> category ;
    helpers::Array<ReverbDataV11> reverb ;
    helpers::Array<SnapshotDataV11> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
    helpers::FileName musicScriptFileName;
};

struct HandlerDataV11 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV11 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV11 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV11> dsp ;
    helpers::Ptr<AttenuationDataV11> attenuation ;
    helpers::Array<FileNameDataV11> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV11 depth;
    DynamicParamDataV11 pan;
    DynamicParamDataV11 pitch;
    DynamicParamDataV11 pitchMS;
    DynamicParamDataV11 volume;
    DynamicParamDataV11 volumeMS;
    RangeDataV11 initialDelay;
    RangeDataV11 playLength;
    RangeDataV11 positionOffsetAngle;
    RangeDataV11 positionRange;
    RangeDataV11 repeatCount;
    RangeDataV11 repeatTime;
    RangeDataV11 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV11 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV11 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV11 {
    qword name;
    helpers::Array<TriggerMarkerDataV11> triggerMarker ;
};

struct ScriptFileDataV11 {
    qword musicCue;
    helpers::Ptr<AudioSettingsDataV11> audioSettings ;
    helpers::Array<HandlerDataV11> handler ;
    helpers::Array<MetaSoundDataV11> metaSound ;
    helpers::Array<ScriptRefDataV11> scriptRef ;
    helpers::Array<TriggerKeyDataV11> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
};

typedef ScriptFileDataV11 Gw2StructAMSP;

/* Version: 10, ReferencedFunction: 0x1 */
struct DspDataV10 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV10 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV10> dsp ;
};

struct BussDataV10 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV10> dynamicData ;
};

struct EnvelopePointDataV10 {
    float offset;
    float value;
};

struct EnvelopeDataV10 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV10> envelopePoint ;
    byte offsetType;
};

struct RangeDataV10 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV10 {
    RangeDataV10 time;
    RangeDataV10 value;
};

struct DynamicParamDataV10 {
    helpers::Ptr<EnvelopeDataV10> envelopeData ;
    helpers::Ptr<RandomParamDataV10> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV10 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV10 lowPass;
    DynamicParamDataV10 pan3D;
    DynamicParamDataV10 spread3D;
    DynamicParamDataV10 volumeA;
    DynamicParamDataV10 volumeB;
};

struct CategoryDynamicDataV10 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV10 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV10> attenuation ;
    helpers::Ptr<CategoryDynamicDataV10> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV10 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
};

struct SnapshotDataV10 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV10> buss ;
    helpers::Array<CategoryDynamicDataV10> category ;
};

struct AudioSettingsDataV10 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float focusTransition;
    helpers::Array<BussDataV10> buss ;
    helpers::Array<CategoryDataV10> category ;
    helpers::Array<ReverbDataV10> reverb ;
    helpers::Array<SnapshotDataV10> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
};

struct HandlerDataV10 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV10 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV10 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV10> dsp ;
    helpers::Ptr<AttenuationDataV10> attenuation ;
    helpers::Array<FileNameDataV10> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV10 depth;
    DynamicParamDataV10 pan;
    DynamicParamDataV10 pitch;
    DynamicParamDataV10 pitchMS;
    DynamicParamDataV10 volume;
    DynamicParamDataV10 volumeMS;
    RangeDataV10 initialDelay;
    RangeDataV10 playLength;
    RangeDataV10 positionOffsetAngle;
    RangeDataV10 positionRange;
    RangeDataV10 repeatCount;
    RangeDataV10 repeatTime;
    RangeDataV10 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV10 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV10 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV10 {
    qword name;
    helpers::Array<TriggerMarkerDataV10> triggerMarker ;
};

struct ScriptFileDataV10 {
    qword musicCue;
    helpers::Ptr<AudioSettingsDataV10> audioSettings ;
    helpers::Array<HandlerDataV10> handler ;
    helpers::Array<MetaSoundDataV10> metaSound ;
    helpers::Array<ScriptRefDataV10> scriptRef ;
    helpers::Array<TriggerKeyDataV10> triggerKey ;
    dword flags;
    dword soundPoolCount;
    float fadeInTime;
    float soundPoolDelay;
    float volume;
};

typedef ScriptFileDataV10 Gw2StructAMSP;

/* Version: 9, ReferencedFunction: 0x1 */
struct DspDataV9 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV9 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV9> dsp ;
};

struct BussDataV9 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV9> dynamicData ;
};

struct EnvelopePointDataV9 {
    float offset;
    float value;
};

struct EnvelopeDataV9 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV9> envelopePoint ;
    byte offsetType;
};

struct RangeDataV9 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV9 {
    RangeDataV9 time;
    RangeDataV9 value;
};

struct DynamicParamDataV9 {
    helpers::Ptr<EnvelopeDataV9> envelopeData ;
    helpers::Ptr<RandomParamDataV9> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV9 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV9 lowPass;
    DynamicParamDataV9 pan3D;
    DynamicParamDataV9 spread3D;
    DynamicParamDataV9 volumeA;
    DynamicParamDataV9 volumeB;
};

struct CategoryDynamicDataV9 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV9 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    qword soundPoolCategory;
    helpers::Ptr<AttenuationDataV9> attenuation ;
    helpers::Ptr<CategoryDynamicDataV9> dynamicData ;
    float muteFadeTime;
    float soundPoolDelay;
    dword flags;
    dword maxAudible;
    dword soundPoolCount;
    byte maxAudibleBehavior;
    byte soundPoolCountBehavior;
    byte soundPoolMode;
};

struct ReverbDataV9 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
};

struct SnapshotDataV9 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV9> buss ;
    helpers::Array<CategoryDynamicDataV9> category ;
};

struct AudioSettingsDataV9 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float focusTransition;
    helpers::Array<BussDataV9> buss ;
    helpers::Array<CategoryDataV9> category ;
    helpers::Array<ReverbDataV9> reverb ;
    helpers::Array<SnapshotDataV9> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
};

struct HandlerDataV9 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV9 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV9 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV9> dsp ;
    helpers::Ptr<AttenuationDataV9> attenuation ;
    helpers::Array<FileNameDataV9> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV9 depth;
    DynamicParamDataV9 pan;
    DynamicParamDataV9 pitch;
    DynamicParamDataV9 pitchMS;
    DynamicParamDataV9 volume;
    DynamicParamDataV9 volumeMS;
    RangeDataV9 initialDelay;
    RangeDataV9 playLength;
    RangeDataV9 positionOffsetAngle;
    RangeDataV9 positionRange;
    RangeDataV9 repeatCount;
    RangeDataV9 repeatTime;
    RangeDataV9 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV9 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV9 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV9 {
    qword name;
    helpers::Array<TriggerMarkerDataV9> triggerMarker ;
};

struct ScriptFileDataV9 {
    qword musicCue;
    qword endCue;
    helpers::Ptr<AudioSettingsDataV9> audioSettings ;
    helpers::Array<HandlerDataV9> handler ;
    helpers::Array<MetaSoundDataV9> metaSound ;
    helpers::Array<ScriptRefDataV9> scriptRef ;
    helpers::Array<TriggerKeyDataV9> triggerKey ;
    dword flags;
    float fadeInTime;
    float volume;
};

typedef ScriptFileDataV9 Gw2StructAMSP;

/* Version: 8, ReferencedFunction: 0x1 */
struct DspDataV8 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV8 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV8> dsp ;
};

struct BussDataV8 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV8> dynamicData ;
};

struct EnvelopePointDataV8 {
    float offset;
    float value;
};

struct EnvelopeDataV8 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV8> envelopePoint ;
    byte offsetType;
};

struct RangeDataV8 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV8 {
    RangeDataV8 time;
    RangeDataV8 value;
};

struct DynamicParamDataV8 {
    helpers::Ptr<EnvelopeDataV8> envelopeData ;
    helpers::Ptr<RandomParamDataV8> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV8 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV8 lowPass;
    DynamicParamDataV8 pan3D;
    DynamicParamDataV8 spread3D;
    DynamicParamDataV8 volumeA;
    DynamicParamDataV8 volumeB;
};

struct CategoryDynamicDataV8 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    float reverbDirect;
    float reverbRoom;
    dword flags;
};

struct CategoryDataV8 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV8> attenuation ;
    helpers::Ptr<CategoryDynamicDataV8> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct ReverbDataV8 {
    qword name;
    dword flags;
    float room;
    float roomHF;
    float roomLF;
    float decayTime;
    float decayHFRatio;
    float reflections;
    float reflectionsDelay;
    float reverb;
    float reverbDelay;
    float referenceHF;
    float referenceLF;
    float diffusion;
    float density;
};

struct SnapshotDataV8 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV8> buss ;
    helpers::Array<CategoryDynamicDataV8> category ;
};

struct AudioSettingsDataV8 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float focusTransition;
    helpers::Array<BussDataV8> buss ;
    helpers::Array<CategoryDataV8> category ;
    helpers::Array<ReverbDataV8> reverb ;
    helpers::Array<SnapshotDataV8> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
};

struct HandlerDataV8 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV8 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV8 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV8> dsp ;
    helpers::Ptr<AttenuationDataV8> attenuation ;
    helpers::Array<FileNameDataV8> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV8 depth;
    DynamicParamDataV8 pan;
    DynamicParamDataV8 pitch;
    DynamicParamDataV8 pitchMS;
    DynamicParamDataV8 volume;
    DynamicParamDataV8 volumeMS;
    RangeDataV8 initialDelay;
    RangeDataV8 playLength;
    RangeDataV8 positionOffsetAngle;
    RangeDataV8 positionRange;
    RangeDataV8 repeatCount;
    RangeDataV8 repeatTime;
    RangeDataV8 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte musicPriority;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV8 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV8 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV8 {
    qword name;
    helpers::Array<TriggerMarkerDataV8> triggerMarker ;
};

struct ScriptFileDataV8 {
    qword musicCue;
    qword endCue;
    helpers::Ptr<AudioSettingsDataV8> audioSettings ;
    helpers::Array<HandlerDataV8> handler ;
    helpers::Array<MetaSoundDataV8> metaSound ;
    helpers::Array<ScriptRefDataV8> scriptRef ;
    helpers::Array<TriggerKeyDataV8> triggerKey ;
    dword flags;
    float fadeInTime;
    float volume;
};

typedef ScriptFileDataV8 Gw2StructAMSP;

/* Version: 7, ReferencedFunction: 0x40F7698000000001 */
struct DspDataV7 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV7 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV7> dsp ;
};

struct BussDataV7 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV7> dynamicData ;
};

struct EnvelopePointDataV7 {
    float offset;
    float value;
};

struct EnvelopeDataV7 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV7> envelopePoint ;
    byte offsetType;
};

struct RangeDataV7 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV7 {
    RangeDataV7 time;
    RangeDataV7 value;
};

struct DynamicParamDataV7 {
    helpers::Ptr<EnvelopeDataV7> envelopeData ;
    helpers::Ptr<RandomParamDataV7> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV7 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV7 lowPass;
    DynamicParamDataV7 pan3D;
    DynamicParamDataV7 spread3D;
    DynamicParamDataV7 volumeA;
    DynamicParamDataV7 volumeB;
};

struct CategoryDynamicDataV7 {
    qword name;
    float volume;
    float nonFocusGain;
    float lowPass;
    dword flags;
};

struct CategoryDataV7 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV7> attenuation ;
    helpers::Ptr<CategoryDynamicDataV7> dynamicData ;
    float muteFadeTime;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct SnapshotDataV7 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV7> buss ;
    helpers::Array<CategoryDynamicDataV7> category ;
};

struct AudioSettingsDataV7 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    float focusTransition;
    helpers::Array<BussDataV7> buss ;
    helpers::Array<CategoryDataV7> category ;
    helpers::Array<SnapshotDataV7> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
};

struct HandlerDataV7 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV7 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV7 {
    qword category;
    qword endCue;
    qword name;
    qword offsetBone;
    qword playlistId;
    helpers::Array<DspDataV7> dsp ;
    helpers::Ptr<AttenuationDataV7> attenuation ;
    helpers::Array<FileNameDataV7> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV7 depth;
    DynamicParamDataV7 pan;
    DynamicParamDataV7 pitch;
    DynamicParamDataV7 pitchMS;
    DynamicParamDataV7 volume;
    DynamicParamDataV7 volumeMS;
    RangeDataV7 initialDelay;
    RangeDataV7 playLength;
    RangeDataV7 positionOffsetAngle;
    RangeDataV7 positionRange;
    RangeDataV7 repeatCount;
    RangeDataV7 repeatTime;
    RangeDataV7 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV7 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV7 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV7 {
    qword name;
    helpers::Array<TriggerMarkerDataV7> triggerMarker ;
};

struct ScriptFileDataV7 {
    qword musicCue;
    qword endCue;
    helpers::Ptr<AudioSettingsDataV7> audioSettings ;
    helpers::Array<HandlerDataV7> handler ;
    helpers::Array<MetaSoundDataV7> metaSound ;
    helpers::Array<ScriptRefDataV7> scriptRef ;
    helpers::Array<TriggerKeyDataV7> triggerKey ;
    dword flags;
    float fadeInTime;
    float volume;
};

typedef ScriptFileDataV7 Gw2StructAMSP;

/* Version: 6, ReferencedFunction: 0x1 */
struct DspDataV6 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDynamicDataV6 {
    qword name;
    dword flags;
    float volume;
    helpers::Array<DspDataV6> dsp ;
};

struct BussDataV6 {
    qword name;
    dword flags;
    qword output;
    helpers::Ptr<BussDynamicDataV6> dynamicData ;
};

struct EnvelopePointDataV6 {
    float offset;
    float value;
};

struct EnvelopeDataV6 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV6> envelopePoint ;
    byte offsetType;
};

struct RangeDataV6 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV6 {
    RangeDataV6 time;
    RangeDataV6 value;
};

struct DynamicParamDataV6 {
    helpers::Ptr<EnvelopeDataV6> envelopeData ;
    helpers::Ptr<RandomParamDataV6> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV6 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV6 lowPass;
    DynamicParamDataV6 pan3D;
    DynamicParamDataV6 spread3D;
    DynamicParamDataV6 volumeA;
};

struct CategoryDataV6 {
    qword name;
    qword volumeGroupName;
    qword outputBussName;
    helpers::Ptr<AttenuationDataV6> attenuation ;
    float muteFadeTime;
    float volumeA;
    float volumeAThreshold;
    float volumeB;
    float volumeBThreshold;
    float volumeChangeRate;
    float volumeDucking;
    float volumeDuckingTimeAttack;
    float volumeDuckingTimeRelease;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct SnapshotDataV6 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDynamicDataV6> buss ;
};

struct AudioSettingsDataV6 {
    qword defaultSnapshot;
    qword effectsBuss;
    float distanceScale;
    helpers::Array<BussDataV6> buss ;
    helpers::Array<CategoryDataV6> category ;
    helpers::Array<SnapshotDataV6> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
};

struct HandlerDataV6 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV6 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV6 {
    qword category;
    qword endCue;
    qword name;
    qword playlistId;
    helpers::Array<DspDataV6> dsp ;
    helpers::Ptr<AttenuationDataV6> attenuation ;
    helpers::Array<FileNameDataV6> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV6 depth;
    DynamicParamDataV6 pan;
    DynamicParamDataV6 pitch;
    DynamicParamDataV6 pitchMS;
    DynamicParamDataV6 volume;
    DynamicParamDataV6 volumeMS;
    RangeDataV6 initialDelay;
    RangeDataV6 playLength;
    RangeDataV6 positionOffsetAngle;
    RangeDataV6 positionRange;
    RangeDataV6 repeatCount;
    RangeDataV6 repeatTime;
    RangeDataV6 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV6 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV6 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV6 {
    qword name;
    helpers::Array<TriggerMarkerDataV6> triggerMarker ;
};

struct ScriptFileDataV6 {
    qword musicCue;
    qword endCue;
    helpers::Ptr<AudioSettingsDataV6> audioSettings ;
    helpers::Array<HandlerDataV6> handler ;
    helpers::Array<MetaSoundDataV6> metaSound ;
    helpers::Array<ScriptRefDataV6> scriptRef ;
    helpers::Array<TriggerKeyDataV6> triggerKey ;
    dword flags;
    float fadeInTime;
    float volume;
};

typedef ScriptFileDataV6 Gw2StructAMSP;

/* Version: 5, ReferencedFunction: 0x1 */
struct EnvelopePointDataV5 {
    float offset;
    float value;
};

struct EnvelopeDataV5 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV5> envelopePoint ;
    byte offsetType;
};

struct RangeDataV5 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV5 {
    RangeDataV5 time;
    RangeDataV5 value;
};

struct DynamicParamDataV5 {
    helpers::Ptr<EnvelopeDataV5> envelopeData ;
    helpers::Ptr<RandomParamDataV5> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV5 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV5 lowPass;
    DynamicParamDataV5 pan3D;
    DynamicParamDataV5 spread3D;
    DynamicParamDataV5 volumeA;
};

struct CategoryDataV5 {
    qword name;
    qword volumeGroupName;
    helpers::Ptr<AttenuationDataV5> attenuation ;
    float muteFadeTime;
    float volumeA;
    float volumeAThreshold;
    float volumeB;
    float volumeBThreshold;
    float volumeChangeRate;
    float volumeDucking;
    float volumeDuckingTimeAttack;
    float volumeDuckingTimeRelease;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct DspDataV5 {
    dword type;
    dword flags;
    helpers::Array<float> property ;
};

struct BussDataV5 {
    qword name;
    qword output;
    dword flags;
    helpers::Array<DspDataV5> dsp ;
    float volume;
};

struct SnapshotDataV5 {
    qword name;
    float blendInTime;
    float blendOutTime;
    dword flags;
    helpers::Array<BussDataV5> buss ;
};

struct AudioSettingsDataV5 {
    qword defaultBuss;
    qword effectsBuss;
    float distanceScale;
    helpers::Array<CategoryDataV5> category ;
    helpers::Array<SnapshotDataV5> snapshot ;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
};

struct HandlerDataV5 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct FileNameDataV5 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV5 {
    qword category;
    qword endCue;
    qword name;
    qword playlistId;
    helpers::Array<DspDataV5> dsp ;
    helpers::Ptr<AttenuationDataV5> attenuation ;
    helpers::Array<FileNameDataV5> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV5 depth;
    DynamicParamDataV5 pan;
    DynamicParamDataV5 pitch;
    DynamicParamDataV5 pitchMS;
    DynamicParamDataV5 volume;
    DynamicParamDataV5 volumeMS;
    RangeDataV5 initialDelay;
    RangeDataV5 playLength;
    RangeDataV5 positionOffsetAngle;
    RangeDataV5 positionRange;
    RangeDataV5 repeatCount;
    RangeDataV5 repeatTime;
    RangeDataV5 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV5 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV5 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV5 {
    qword name;
    helpers::Array<TriggerMarkerDataV5> triggerMarker ;
};

struct ScriptFileDataV5 {
    qword musicCue;
    qword endCue;
    helpers::Ptr<AudioSettingsDataV5> audioSettings ;
    helpers::Array<HandlerDataV5> handler ;
    helpers::Array<MetaSoundDataV5> metaSound ;
    helpers::Array<ScriptRefDataV5> scriptRef ;
    helpers::Array<TriggerKeyDataV5> triggerKey ;
    dword flags;
    float fadeInTime;
    float volume;
};

typedef ScriptFileDataV5 Gw2StructAMSP;

/* Version: 4, ReferencedFunction: 0x1 */
struct VolumeGroupDataV4 {
    qword name;
    qword parentName;
    dword flags;
    float volume;
};

struct EnvelopePointDataV4 {
    float offset;
    float value;
};

struct EnvelopeDataV4 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV4> envelopePoint ;
    byte offsetType;
};

struct RangeDataV4 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV4 {
    RangeDataV4 time;
    RangeDataV4 value;
};

struct DynamicParamDataV4 {
    helpers::Ptr<EnvelopeDataV4> envelopeData ;
    helpers::Ptr<RandomParamDataV4> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV4 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV4 lowPass;
    DynamicParamDataV4 pan3D;
    DynamicParamDataV4 spread3D;
    DynamicParamDataV4 volumeA;
};

struct CategoryDataV4 {
    qword name;
    qword volumeGroupName;
    helpers::Ptr<AttenuationDataV4> attenuation ;
    float muteFadeTime;
    float volumeA;
    float volumeAThreshold;
    float volumeB;
    float volumeBThreshold;
    float volumeChangeRate;
    float volumeDucking;
    float volumeDuckingTimeAttack;
    float volumeDuckingTimeRelease;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct AudioSettingsDataV4 {
    helpers::Array<VolumeGroupDataV4> volumeGroup ;
    helpers::Array<CategoryDataV4> category ;
    float distanceScale;
    helpers::FileName bankIndexFileName;
    helpers::FileName bankScriptFileName;
};

struct HandlerDataV4 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct DspDataV4 {
    helpers::Array<DynamicParamDataV4> param ;
    byte type;
};

struct FileNameDataV4 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV4 {
    qword category;
    qword endCue;
    qword name;
    qword playlistId;
    helpers::Array<DspDataV4> dsp ;
    helpers::Ptr<AttenuationDataV4> attenuation ;
    helpers::Array<FileNameDataV4> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV4 depth;
    DynamicParamDataV4 pan;
    DynamicParamDataV4 pitch;
    DynamicParamDataV4 pitchMS;
    DynamicParamDataV4 volume;
    DynamicParamDataV4 volumeMS;
    RangeDataV4 initialDelay;
    RangeDataV4 playLength;
    RangeDataV4 positionOffsetAngle;
    RangeDataV4 positionRange;
    RangeDataV4 repeatCount;
    RangeDataV4 repeatTime;
    RangeDataV4 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV4 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV4 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV4 {
    qword name;
    helpers::Array<TriggerMarkerDataV4> triggerMarker ;
};

struct ScriptFileDataV4 {
    qword musicCue;
    qword endCue;
    helpers::Ptr<AudioSettingsDataV4> audioSettings ;
    helpers::Array<HandlerDataV4> handler ;
    helpers::Array<MetaSoundDataV4> metaSound ;
    helpers::Array<ScriptRefDataV4> scriptRef ;
    helpers::Array<TriggerKeyDataV4> triggerKey ;
    dword flags;
    float fadeInTime;
    float volume;
};

typedef ScriptFileDataV4 Gw2StructAMSP;

/* Version: 3, ReferencedFunction: 0x1 */
struct VolumeGroupDataV3 {
    qword name;
    qword parentName;
    dword flags;
    float volume;
};

struct EnvelopePointDataV3 {
    float offset;
    float value;
};

struct EnvelopeDataV3 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV3> envelopePoint ;
    byte offsetType;
};

struct RangeDataV3 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV3 {
    RangeDataV3 time;
    RangeDataV3 value;
};

struct DynamicParamDataV3 {
    helpers::Ptr<EnvelopeDataV3> envelopeData ;
    helpers::Ptr<RandomParamDataV3> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV3 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV3 lowPass;
    DynamicParamDataV3 pan3D;
    DynamicParamDataV3 spread3D;
    DynamicParamDataV3 volumeA;
};

struct CategoryDataV3 {
    qword name;
    qword volumeGroupName;
    helpers::Ptr<AttenuationDataV3> attenuation ;
    float muteFadeTime;
    float volumeA;
    float volumeAThreshold;
    float volumeB;
    float volumeBThreshold;
    float volumeChangeRate;
    float volumeDucking;
    float volumeDuckingTimeAttack;
    float volumeDuckingTimeRelease;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct AudioSettingsDataV3 {
    helpers::Array<VolumeGroupDataV3> volumeGroup ;
    helpers::Array<CategoryDataV3> category ;
    float distanceScale;
    helpers::FileName voiceBankFileName;
};

struct HandlerDataV3 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct DspDataV3 {
    helpers::Array<DynamicParamDataV3> param ;
    byte type;
};

struct FileNameDataV3 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV3 {
    qword category;
    qword endCue;
    qword name;
    qword playlistId;
    helpers::Array<DspDataV3> dsp ;
    helpers::Ptr<AttenuationDataV3> attenuation ;
    helpers::Array<FileNameDataV3> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV3 depth;
    DynamicParamDataV3 pan;
    DynamicParamDataV3 pitch;
    DynamicParamDataV3 pitchMS;
    DynamicParamDataV3 volume;
    DynamicParamDataV3 volumeMS;
    RangeDataV3 initialDelay;
    RangeDataV3 playLength;
    RangeDataV3 positionOffsetAngle;
    RangeDataV3 positionRange;
    RangeDataV3 repeatCount;
    RangeDataV3 repeatTime;
    RangeDataV3 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV3 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV3 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV3 {
    qword name;
    helpers::Array<TriggerMarkerDataV3> triggerMarker ;
};

struct ScriptFileDataV3 {
    qword musicCue;
    qword endCue;
    helpers::Ptr<AudioSettingsDataV3> audioSettings ;
    helpers::Array<HandlerDataV3> handler ;
    helpers::Array<MetaSoundDataV3> metaSound ;
    helpers::Array<ScriptRefDataV3> scriptRef ;
    helpers::Array<TriggerKeyDataV3> triggerKey ;
    dword flags;
    float fadeInTime;
    float volume;
};

typedef ScriptFileDataV3 Gw2StructAMSP;

/* Version: 2, ReferencedFunction: 0x1 */
struct VolumeGroupDataV2 {
    qword name;
    qword parentName;
    dword flags;
    float volume;
};

struct EnvelopePointDataV2 {
    float offset;
    float value;
};

struct EnvelopeDataV2 {
    qword offsetParameter;
    helpers::Array<EnvelopePointDataV2> envelopePoint ;
    byte offsetType;
};

struct RangeDataV2 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV2 {
    RangeDataV2 time;
    RangeDataV2 value;
};

struct DynamicParamDataV2 {
    helpers::Ptr<EnvelopeDataV2> envelopeData ;
    helpers::Ptr<RandomParamDataV2> randomParamData ;
    float value;
    byte type;
};

struct AttenuationDataV2 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV2 lowPass;
    DynamicParamDataV2 pan3D;
    DynamicParamDataV2 spread3D;
    DynamicParamDataV2 volumeA;
};

struct CategoryDataV2 {
    qword name;
    qword volumeGroupName;
    helpers::Ptr<AttenuationDataV2> attenuation ;
    float muteFadeTime;
    float volumeA;
    float volumeAThreshold;
    float volumeB;
    float volumeBThreshold;
    float volumeChangeRate;
    float volumeDucking;
    float volumeDuckingTimeAttack;
    float volumeDuckingTimeRelease;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
};

struct AudioSettingsDataV2 {
    helpers::Array<VolumeGroupDataV2> volumeGroup ;
    helpers::Array<CategoryDataV2> category ;
    float distanceScale;
    helpers::FileName voiceBankFileName;
};

struct HandlerDataV2 {
    qword name;
    dword flags;
    helpers::Array<byte> byteCode ;
};

struct DspDataV2 {
    helpers::Array<DynamicParamDataV2> param ;
    byte type;
};

struct FileNameDataV2 {
    qword language;
    float weight;
    helpers::FileName fileName;
    byte audioType;
};

struct MetaSoundDataV2 {
    qword category;
    qword endCue;
    qword name;
    qword playlistId;
    helpers::Array<DspDataV2> dsp ;
    helpers::Ptr<AttenuationDataV2> attenuation ;
    helpers::Array<FileNameDataV2> fileName ;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    float3 positionOffset;
    dword flags;
    dword loopCount;
    DynamicParamDataV2 depth;
    DynamicParamDataV2 pan;
    DynamicParamDataV2 pitch;
    DynamicParamDataV2 pitchMS;
    DynamicParamDataV2 volume;
    DynamicParamDataV2 volumeMS;
    RangeDataV2 initialDelay;
    RangeDataV2 playLength;
    RangeDataV2 positionOffsetAngle;
    RangeDataV2 positionRange;
    RangeDataV2 repeatCount;
    RangeDataV2 repeatTime;
    RangeDataV2 startTimeOffset;
    byte channelMode;
    byte channelPriority;
    byte fileIterateMode;
    byte loopMode;
    byte playbackMode;
    byte positionMode;
    byte repeatTimeFrom;
};

struct ScriptRefDataV2 {
    qword name;
    helpers::FileName fileName;
};

struct TriggerMarkerDataV2 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV2 {
    qword name;
    helpers::Array<TriggerMarkerDataV2> triggerMarker ;
};

struct ScriptFileDataV2 {
    qword musicCue;
    helpers::Ptr<AudioSettingsDataV2> audioSettings ;
    helpers::Array<HandlerDataV2> handler ;
    helpers::Array<MetaSoundDataV2> metaSound ;
    helpers::Array<ScriptRefDataV2> scriptRef ;
    helpers::Array<TriggerKeyDataV2> triggerKey ;
    dword flags;
    float fadeInTime;
    float volume;
};

typedef ScriptFileDataV2 Gw2StructAMSP;

/* Version: 1, ReferencedFunction: 0x1 */
struct EnvelopePointDataV1 {
    float offset;
    float value;
};

struct EnvelopeDataV1 {
    helpers::Array<EnvelopePointDataV1> envelopePoint ;
    byte offsetType;
    qword offsetParameter;
};

struct RangeDataV1 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV1 {
    RangeDataV1 time;
    RangeDataV1 value;
};

struct DynamicParamDataV1 {
    helpers::Ptr<EnvelopeDataV1> envelopeData ;
    helpers::Ptr<RandomParamDataV1> randomParamData ;
    byte type;
    float value;
};

struct AttenuationDataV1 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV1 lowPass;
    DynamicParamDataV1 pan3D;
    DynamicParamDataV1 spread3D;
    DynamicParamDataV1 volumeA;
};

struct CategoryDataV1 {
    helpers::Ptr<AttenuationDataV1> attenuation ;
    dword flags;
    dword maxAudible;
    byte maxAudibleBehavior;
    float muteFadeTime;
    qword name;
    float volumeA;
    float volumeAThreshold;
    float volumeB;
    float volumeBThreshold;
    float volumeChangeRate;
    float volumeDucking;
    float volumeDuckingTimeAttack;
    float volumeDuckingTimeRelease;
    qword volumeGroupName;
};

struct VolumeGroupDataV1 {
    dword flags;
    qword name;
    qword parentName;
    float volume;
};

struct AudioSettingsDataV1 {
    helpers::Array<CategoryDataV1> category ;
    float distanceScale;
    helpers::FileName voiceBankFileName;
    helpers::Array<VolumeGroupDataV1> volumeGroup ;
};

struct HandlerDataV1 {
    helpers::Array<byte> byteCode ;
    dword flags;
    qword name;
};

struct DspDataV1 {
    helpers::Array<DynamicParamDataV1> param ;
    byte type;
};

struct FileNameDataV1 {
    byte audioType;
    helpers::FileName fileName;
    qword language;
    float weight;
};

struct MetaSoundDataV1 {
    helpers::Ptr<AttenuationDataV1> attenuation ;
    qword category;
    byte channelMode;
    byte channelPriority;
    DynamicParamDataV1 depth;
    helpers::Array<DspDataV1> dsp ;
    qword endCue;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    byte fileIterateMode;
    helpers::Array<FileNameDataV1> fileName ;
    dword flags;
    RangeDataV1 initialDelay;
    dword loopCount;
    byte loopMode;
    qword name;
    DynamicParamDataV1 pan;
    DynamicParamDataV1 pitch;
    byte playbackMode;
    RangeDataV1 playLength;
    qword playlistId;
    byte positionMode;
    float3 positionOffset;
    RangeDataV1 positionOffsetAngle;
    RangeDataV1 positionRange;
    RangeDataV1 repeatCount;
    RangeDataV1 repeatTime;
    RangeDataV1 startTimeOffset;
    byte repeatTimeFrom;
    DynamicParamDataV1 volume;
};

struct ScriptRefDataV1 {
    helpers::FileName fileName;
    qword name;
};

struct TriggerMarkerDataV1 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV1 {
    qword name;
    helpers::Array<TriggerMarkerDataV1> triggerMarker ;
};

struct ScriptFileDataV1 {
    helpers::Ptr<AudioSettingsDataV1> audioSettings ;
    float fadeInTime;
    dword flags;
    helpers::Array<HandlerDataV1> handler ;
    helpers::Array<MetaSoundDataV1> metaSound ;
    helpers::Array<ScriptRefDataV1> scriptRef ;
    helpers::Array<TriggerKeyDataV1> triggerKey ;
    float volume;
};

typedef ScriptFileDataV1 Gw2StructAMSP;

/* Version: 0, ReferencedFunction: 0x1 */
struct HandlerDataV0 {
    helpers::Array<byte> byteCode ;
    dword flags;
    qword name;
};

struct EnvelopePointDataV0 {
    float offset;
    float value;
};

struct EnvelopeDataV0 {
    helpers::Array<EnvelopePointDataV0> envelopePoint ;
    byte offsetType;
    qword offsetParameter;
};

struct RangeDataV0 {
    float max;
    float min;
    byte min;
};

struct RandomParamDataV0 {
    RangeDataV0 time;
    RangeDataV0 value;
};

struct DynamicParamDataV0 {
    helpers::Ptr<EnvelopeDataV0> envelopeData ;
    helpers::Ptr<RandomParamDataV0> randomParamData ;
    byte type;
    float value;
};

struct AttenuationDataV0 {
    float coneInsideAngle;
    float coneOutsideAngle;
    float coneOutsideVolume;
    DynamicParamDataV0 lowPass;
    DynamicParamDataV0 pan3D;
    DynamicParamDataV0 spread3D;
    DynamicParamDataV0 volumeA;
};

struct DspDataV0 {
    helpers::Array<DynamicParamDataV0> param ;
    byte type;
};

struct FileNameDataV0 {
    byte audioType;
    helpers::FileName fileName;
    qword language;
    float weight;
};

struct MetaSoundDataV0 {
    helpers::Ptr<AttenuationDataV0> attenuation ;
    qword category;
    byte channelMode;
    byte channelPriority;
    DynamicParamDataV0 depth;
    helpers::Array<DspDataV0> dsp ;
    qword endCue;
    float endCueOffset;
    float fadeInTime;
    float fadeOutTime;
    byte fileIterateMode;
    helpers::Array<FileNameDataV0> fileName ;
    dword flags;
    RangeDataV0 initialDelay;
    dword loopCount;
    byte loopMode;
    qword name;
    DynamicParamDataV0 pan;
    DynamicParamDataV0 pitch;
    byte playbackMode;
    RangeDataV0 playLength;
    qword playlistId;
    byte positionMode;
    float3 positionOffset;
    RangeDataV0 positionOffsetAngle;
    RangeDataV0 positionRange;
    RangeDataV0 repeatCount;
    RangeDataV0 repeatTime;
    RangeDataV0 startTimeOffset;
    byte repeatTimeFrom;
    DynamicParamDataV0 volume;
};

struct ScriptRefDataV0 {
    helpers::FileName fileName;
    qword name;
};

struct TriggerMarkerDataV0 {
    qword cue;
    qword end;
    float time;
    byte type;
};

struct TriggerKeyDataV0 {
    qword name;
    helpers::Array<TriggerMarkerDataV0> triggerMarker ;
};

struct ScriptFileDataV0 {
    float fadeInTime;
    dword flags;
    helpers::Array<HandlerDataV0> handler ;
    helpers::Array<MetaSoundDataV0> metaSound ;
    helpers::Array<ScriptRefDataV0> scriptRef ;
    helpers::Array<TriggerKeyDataV0> triggerKey ;
    float volume;
};

typedef ScriptFileDataV0 Gw2StructAMSP;


/* ===============================================
 * Chunk: BKCK, versions: 3, strucTab: 0x141E82210
 * ===============================================
 */

/* Version: 2, ReferencedFunction: 0x1 */
struct AsndFileDataV2 {
    dword voiceId;
    dword flags;
    dword reserved1;
    dword reserved2;
    dword reserved3;
    dword reserved4;
    float length;
    float offset;
    byte reserved5;
    byte reserved6;
    byte reserved7;
    byte reserved8;
    helpers::Array<byte> audioData ;
};

struct ReservedBankDataV2 {
    dword reserved1;
    dword reserved2;
    dword reserved3;
    dword reserved4;
};

struct BankFileDataV2 {
    dword reserved1;
    dword reserved2;
    dword reserved3;
    dword reserved4;
    helpers::Array<AsndFileDataV2> asndFile ;
    helpers::Ptr<ReservedBankDataV2> reservedData ;
};

typedef BankFileDataV2 Gw2StructBKCK;

/* Version: 1, ReferencedFunction: 0x1 */
struct AsndFileDataV1 {
    dword voiceId;
    dword flags;
    dword reserved1;
    dword reserved2;
    float length;
    float offset;
    helpers::Array<byte> audioData ;
};

struct BankFileDataV1 {
    dword reserved1;
    dword reserved2;
    helpers::Array<AsndFileDataV1> asndFile ;
};

typedef BankFileDataV1 Gw2StructBKCK;

/* Version: 0, ReferencedFunction: 0x1 */
struct AsndFileDataV0 {
    dword voiceId;
    dword flags;
    dword reserved1;
    dword reserved2;
    float length;
    float offset;
    helpers::Array<byte> audioData ;
};

struct BankFileDataV0 {
    dword reserved1;
    dword reserved2;
    helpers::Array<AsndFileDataV0> asndFile ;
};

typedef BankFileDataV0 Gw2StructBKCK;


/* ===============================================
 * Chunk: BIDX, versions: 1, strucTab: 0x141E82420
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct BankFileNameDataV0 {
    helpers::FileName fileName;
};

struct BankLanguageDataV0 {
    helpers::Array<BankFileNameDataV0> bankFileName ;
};

struct BankIndexDataV0 {
    helpers::Array<BankLanguageDataV0> bankLanguage ;
};

typedef BankIndexDataV0 Gw2StructBIDX;


/* ===============================================
 * Chunk: ASND, versions: 3, strucTab: 0x141E82460
 * ===============================================
 */

/* Version: 2, ReferencedFunction: 0x1 */
struct ReservedWaveformDataV2 {
    dword reserved1;
    dword reserved2;
    dword reserved3;
    dword reserved4;
};

struct WaveformDataV2 {
    float length;
    float offset;
    helpers::Ptr<ReservedWaveformDataV2> reservedData ;
    dword reserved1;
    dword reserved2;
    dword crc;
    dword numSamples;
    dword loopStart;
    dword loopEnd;
    dword flags;
    byte format;
    byte reserved3;
    byte reserved4;
    byte reserved5;
    byte numChannels;
    byte reserved6;
    byte reserved7;
    byte reserved8;
    helpers::Array<byte> audioData ;
    helpers::Array<byte> otherData ;
};

typedef WaveformDataV2 Gw2StructASND;

/* Version: 1, ReferencedFunction: 0x40F76F2000000001 */
struct WaveformDataV1 {
    float length;
    float offset;
    dword crc;
    dword numSamples;
    dword loopStart;
    dword loopEnd;
    dword flags;
    byte format;
    byte noteBase;
    byte noteHigh;
    byte noteLow;
    byte numChannels;
    byte reserved1;
    byte reserved2;
    byte reserved3;
    helpers::Array<byte> audioData ;
    helpers::Array<byte> otherData ;
};

typedef WaveformDataV1 Gw2StructASND;

/* Version: 0, ReferencedFunction: 0x1 */
struct WaveformDataV0 {
    helpers::Array<byte> data ;
    dword flags;
    float length;
    byte noteBase;
    byte noteHigh;
    byte noteLow;
    byte numChannels;
    dword numSamples;
    byte waveformDataType;
};

typedef WaveformDataV0 Gw2StructASND;


/* ===============================================
 * Chunk: CSCN, versions: 37, strucTab: 0x141E8DE40
 * ===============================================
 */

/* Version: 36, ReferencedFunction: 0x40F920E000000001 */
struct PropertyDataV36 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV36 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV36 {
    float time;
    float value;
};

struct TriggerKeyDataV36 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV36 {
    qword name;
    helpers::Array<CurveKeyDataV36> curveKey ;
    helpers::Array<FlagKeyDataV36> flagKey ;
    helpers::Array<TriggerKeyDataV36> triggerKey ;
    byte type;
};

struct TrackGroupDataV36 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV36> prop ;
    helpers::Array<TrackDataV36> track ;
    byte type;
};

struct SequenceDataV36 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV36> trackGroup ;
};

struct ColorDefDataV36 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV36 {
    ColorDefDataV36 ambientGroundColor;
    ColorDefDataV36 ambientSkyColor;
    ColorDefDataV36 fillColor;
    ColorDefDataV36 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV36 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV36 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV36 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV36 {
    qword name;
    dword index;
    dword voiceId;
    helpers::Array<TextEntryDataV36> textEntry ;
};

struct SpeciesResourceDataV36 {
    byte16 speciesId;
    qword name;
    qword modelId;
    qword modelVariant;
};

struct ResourceDataV36 {
    helpers::Array<AmbientLightDataV36> ambientLightResource ;
    helpers::Array<FileNameRefDataV36> fileNameRef ;
    helpers::Array<ScriptDataV36> script ;
    helpers::Array<TextResourceDataV36> textResource ;
    helpers::Array<SpeciesResourceDataV36> speciesResource ;
};

struct SceneDataV36 {
    qword startingSequence;
    helpers::Array<SequenceDataV36> sequence ;
    ResourceDataV36 resources;
    helpers::Ptr<TrackGroupDataV36> trackGroup ;
};

typedef SceneDataV36 Gw2StructCSCN;

/* Version: 35, ReferencedFunction: 0x1 */
struct PropertyDataV35 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV35 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV35 {
    float time;
    float value;
};

struct TriggerKeyDataV35 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV35 {
    qword name;
    helpers::Array<CurveKeyDataV35> curveKey ;
    helpers::Array<FlagKeyDataV35> flagKey ;
    helpers::Array<TriggerKeyDataV35> triggerKey ;
    byte type;
};

struct TrackGroupDataV35 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV35> prop ;
    helpers::Array<TrackDataV35> track ;
    byte type;
};

struct SequenceDataV35 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV35> trackGroup ;
};

struct ColorDefDataV35 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV35 {
    ColorDefDataV35 ambientGroundColor;
    ColorDefDataV35 ambientSkyColor;
    ColorDefDataV35 fillColor;
    ColorDefDataV35 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV35 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV35 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV35 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV35 {
    qword name;
    dword index;
    dword voiceId;
    helpers::Array<TextEntryDataV35> textEntry ;
};

struct SpeciesResourceDataV35 {
    byte16 speciesId;
    qword name;
    qword modelId;
    qword modelVariant;
};

struct ResourceDataV35 {
    helpers::Array<AmbientLightDataV35> ambientLightResource ;
    helpers::Array<FileNameRefDataV35> fileNameRef ;
    helpers::Array<ScriptDataV35> script ;
    helpers::Array<TextResourceDataV35> textResource ;
    helpers::Array<SpeciesResourceDataV35> speciesResource ;
};

struct SceneDataV35 {
    qword startingSequence;
    helpers::Array<SequenceDataV35> sequence ;
    ResourceDataV35 resources;
    helpers::Ptr<TrackGroupDataV35> trackGroup ;
};

typedef SceneDataV35 Gw2StructCSCN;

/* Version: 34, ReferencedFunction: 0x40F9202000000001 */
struct PropertyDataV34 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV34 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV34 {
    float time;
    float value;
};

struct TriggerKeyDataV34 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV34 {
    qword name;
    helpers::Array<CurveKeyDataV34> curveKey ;
    helpers::Array<FlagKeyDataV34> flagKey ;
    helpers::Array<TriggerKeyDataV34> triggerKey ;
    byte type;
};

struct TrackGroupDataV34 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV34> prop ;
    helpers::Array<TrackDataV34> track ;
    byte type;
};

struct SequenceDataV34 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV34> trackGroup ;
};

struct ColorDefDataV34 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV34 {
    ColorDefDataV34 ambientGroundColor;
    ColorDefDataV34 ambientSkyColor;
    ColorDefDataV34 fillColor;
    ColorDefDataV34 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV34 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV34 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV34 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV34 {
    qword name;
    dword index;
    dword voiceId;
    helpers::Array<TextEntryDataV34> textEntry ;
};

struct SpeciesResourceDataV34 {
    byte16 speciesId;
    qword modelId;
    qword modelVariant;
};

struct ResourceDataV34 {
    helpers::Array<AmbientLightDataV34> ambientLightResource ;
    helpers::Array<FileNameRefDataV34> fileNameRef ;
    helpers::Array<ScriptDataV34> script ;
    helpers::Array<TextResourceDataV34> textResource ;
    helpers::Array<SpeciesResourceDataV34> speciesResource ;
};

struct SceneDataV34 {
    qword startingSequence;
    helpers::Array<SequenceDataV34> sequence ;
    ResourceDataV34 resources;
    helpers::Ptr<TrackGroupDataV34> trackGroup ;
};

typedef SceneDataV34 Gw2StructCSCN;

/* Version: 33, ReferencedFunction: 0x40F91F6000000001 */
struct PropertyDataV33 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV33 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV33 {
    float time;
    float value;
};

struct TriggerKeyDataV33 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV33 {
    qword name;
    helpers::Array<CurveKeyDataV33> curveKey ;
    helpers::Array<FlagKeyDataV33> flagKey ;
    helpers::Array<TriggerKeyDataV33> triggerKey ;
    byte type;
};

struct TrackGroupDataV33 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV33> prop ;
    helpers::Array<TrackDataV33> track ;
    byte type;
};

struct SequenceDataV33 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV33> trackGroup ;
};

struct ColorDefDataV33 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV33 {
    ColorDefDataV33 ambientGroundColor;
    ColorDefDataV33 ambientSkyColor;
    ColorDefDataV33 fillColor;
    ColorDefDataV33 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV33 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV33 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV33 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV33 {
    qword name;
    dword index;
    dword voiceId;
    helpers::Array<TextEntryDataV33> textEntry ;
};

struct ResourceDataV33 {
    dword crc;
    helpers::Array<AmbientLightDataV33> ambientLightResource ;
    helpers::Array<FileNameRefDataV33> fileNameRef ;
    helpers::Array<ScriptDataV33> script ;
    helpers::Array<TextResourceDataV33> textResource ;
};

struct SceneDataV33 {
    qword startingSequence;
    helpers::Array<SequenceDataV33> sequence ;
    ResourceDataV33 resources;
    helpers::Ptr<TrackGroupDataV33> trackGroup ;
};

typedef SceneDataV33 Gw2StructCSCN;

/* Version: 32, ReferencedFunction: 0x40F91EA000000001 */
struct PropertyDataV32 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV32 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV32 {
    float time;
    float value;
};

struct TriggerKeyDataV32 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV32 {
    qword name;
    helpers::Array<CurveKeyDataV32> curveKey ;
    helpers::Array<FlagKeyDataV32> flagKey ;
    helpers::Array<TriggerKeyDataV32> triggerKey ;
    byte type;
};

struct TrackGroupDataV32 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV32> prop ;
    helpers::Array<TrackDataV32> track ;
    byte type;
};

struct SequenceDataV32 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV32> trackGroup ;
};

struct ColorDefDataV32 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV32 {
    ColorDefDataV32 ambientGroundColor;
    ColorDefDataV32 ambientSkyColor;
    ColorDefDataV32 fillColor;
    ColorDefDataV32 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV32 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV32 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV32 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV32 {
    qword name;
    dword index;
    dword voiceId;
    helpers::Array<TextEntryDataV32> textEntry ;
};

struct ResourceDataV32 {
    dword crc;
    helpers::Array<AmbientLightDataV32> ambientLightResource ;
    helpers::Array<FileNameRefDataV32> fileNameRef ;
    helpers::Array<ScriptDataV32> script ;
    helpers::Array<TextResourceDataV32> textResource ;
};

struct SceneDataV32 {
    qword startingSequence;
    helpers::Array<SequenceDataV32> sequence ;
    ResourceDataV32 resources;
    helpers::Ptr<TrackGroupDataV32> trackGroup ;
};

typedef SceneDataV32 Gw2StructCSCN;

/* Version: 31, ReferencedFunction: 0x40F91DE000000001 */
struct PropertyDataV31 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV31 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV31 {
    float time;
    float value;
};

struct TriggerKeyDataV31 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV31 {
    qword name;
    helpers::Array<CurveKeyDataV31> curveKey ;
    helpers::Array<FlagKeyDataV31> flagKey ;
    helpers::Array<TriggerKeyDataV31> triggerKey ;
    byte type;
};

struct TrackGroupDataV31 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV31> prop ;
    helpers::Array<TrackDataV31> track ;
    byte type;
};

struct SequenceDataV31 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV31> trackGroup ;
};

struct ColorDefDataV31 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV31 {
    ColorDefDataV31 ambientGroundColor;
    ColorDefDataV31 ambientSkyColor;
    ColorDefDataV31 fillColor;
    ColorDefDataV31 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV31 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV31 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV31 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV31 {
    qword name;
    dword index;
    dword voiceId;
    helpers::Array<TextEntryDataV31> textEntry ;
};

struct ResourceDataV31 {
    dword crc;
    helpers::Array<AmbientLightDataV31> ambientLightResource ;
    helpers::Array<FileNameRefDataV31> fileNameRef ;
    helpers::Array<ScriptDataV31> script ;
    helpers::Array<TextResourceDataV31> textResource ;
};

struct SceneDataV31 {
    qword startingSequence;
    helpers::Array<SequenceDataV31> sequence ;
    ResourceDataV31 resources;
    helpers::Ptr<TrackGroupDataV31> trackGroup ;
};

typedef SceneDataV31 Gw2StructCSCN;

/* Version: 30, ReferencedFunction: 0x40F91D9000000001 */
struct PropertyDataV30 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV30 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV30 {
    float time;
    float value;
};

struct TriggerKeyDataV30 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV30 {
    qword name;
    helpers::Array<CurveKeyDataV30> curveKey ;
    helpers::Array<FlagKeyDataV30> flagKey ;
    helpers::Array<TriggerKeyDataV30> triggerKey ;
    byte type;
};

struct TrackGroupDataV30 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV30> prop ;
    helpers::Array<TrackDataV30> track ;
    byte type;
};

struct SequenceDataV30 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV30> trackGroup ;
};

struct ColorDefDataV30 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV30 {
    ColorDefDataV30 ambientGroundColor;
    ColorDefDataV30 ambientSkyColor;
    ColorDefDataV30 fillColor;
    ColorDefDataV30 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV30 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV30 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV30 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV30 {
    qword name;
    dword index;
    dword voiceId;
    helpers::Array<TextEntryDataV30> textEntry ;
};

struct ResourceDataV30 {
    dword crc;
    helpers::Array<AmbientLightDataV30> ambientLightResource ;
    helpers::Array<FileNameRefDataV30> fileNameRef ;
    helpers::Array<ScriptDataV30> script ;
    helpers::Array<TextResourceDataV30> textResource ;
};

struct SceneDataV30 {
    qword startingSequence;
    helpers::Array<SequenceDataV30> sequence ;
    ResourceDataV30 resources;
    helpers::Ptr<TrackGroupDataV30> trackGroup ;
};

typedef SceneDataV30 Gw2StructCSCN;

/* Version: 29, ReferencedFunction: 0x1 */
struct PropertyDataV29 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV29 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV29 {
    float time;
    float value;
};

struct TriggerKeyDataV29 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV29 {
    qword name;
    helpers::Array<CurveKeyDataV29> curveKey ;
    helpers::Array<FlagKeyDataV29> flagKey ;
    helpers::Array<TriggerKeyDataV29> triggerKey ;
    byte type;
};

struct TrackGroupDataV29 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV29> prop ;
    helpers::Array<TrackDataV29> track ;
    byte type;
};

struct SequenceDataV29 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV29> trackGroup ;
};

struct ColorDefDataV29 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV29 {
    ColorDefDataV29 ambientGroundColor;
    ColorDefDataV29 ambientSkyColor;
    ColorDefDataV29 fillColor;
    ColorDefDataV29 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV29 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV29 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV29 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV29 {
    byte16 guid;
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV29> textEntry ;
};

struct ResourceDataV29 {
    dword crc;
    helpers::Array<AmbientLightDataV29> ambientLightResource ;
    helpers::Array<FileNameRefDataV29> fileNameRef ;
    helpers::Array<ScriptDataV29> script ;
    helpers::Array<TextResourceDataV29> textResource ;
};

struct SceneDataV29 {
    qword startingSequence;
    helpers::Array<SequenceDataV29> sequence ;
    ResourceDataV29 resources;
    helpers::Ptr<TrackGroupDataV29> trackGroup ;
};

typedef SceneDataV29 Gw2StructCSCN;

/* Version: 28, ReferencedFunction: 0x40F91CD000000001 */
struct PropertyDataV28 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV28 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV28 {
    float time;
    float value;
};

struct TriggerKeyDataV28 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV28 {
    qword name;
    helpers::Array<CurveKeyDataV28> curveKey ;
    helpers::Array<FlagKeyDataV28> flagKey ;
    helpers::Array<TriggerKeyDataV28> triggerKey ;
    byte type;
};

struct TrackGroupDataV28 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV28> prop ;
    helpers::Array<TrackDataV28> track ;
    byte type;
};

struct SequenceDataV28 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV28> trackGroup ;
};

struct ColorDefDataV28 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV28 {
    ColorDefDataV28 ambientGroundColor;
    ColorDefDataV28 ambientSkyColor;
    ColorDefDataV28 fillColor;
    ColorDefDataV28 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV28 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV28 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV28 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV28 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV28> textEntry ;
};

struct ResourceDataV28 {
    dword crc;
    helpers::Array<AmbientLightDataV28> ambientLightResource ;
    helpers::Array<FileNameRefDataV28> fileNameRef ;
    helpers::Array<ScriptDataV28> script ;
    helpers::Array<TextResourceDataV28> textResource ;
};

struct SceneDataV28 {
    qword startingSequence;
    helpers::Array<SequenceDataV28> sequence ;
    ResourceDataV28 resources;
    helpers::Ptr<TrackGroupDataV28> trackGroup ;
};

typedef SceneDataV28 Gw2StructCSCN;

/* Version: 27, ReferencedFunction: 0x40F91BF000000001 */
struct PropertyDataV27 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV27 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV27 {
    float time;
    float value;
};

struct TriggerKeyDataV27 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV27 {
    qword name;
    helpers::Array<CurveKeyDataV27> curveKey ;
    helpers::Array<FlagKeyDataV27> flagKey ;
    helpers::Array<TriggerKeyDataV27> triggerKey ;
    byte type;
};

struct TrackGroupDataV27 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV27> prop ;
    helpers::Array<TrackDataV27> track ;
    byte type;
};

struct SequenceDataV27 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV27> trackGroup ;
};

struct ColorDefDataV27 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV27 {
    ColorDefDataV27 ambientGroundColor;
    ColorDefDataV27 ambientSkyColor;
    ColorDefDataV27 fillColor;
    ColorDefDataV27 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV27 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV27 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV27 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV27 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV27> textEntry ;
};

struct ResourceDataV27 {
    dword crc;
    helpers::Array<AmbientLightDataV27> ambientLightResource ;
    helpers::Array<FileNameRefDataV27> fileNameRef ;
    helpers::Array<ScriptDataV27> script ;
    helpers::Array<TextResourceDataV27> textResource ;
};

struct SceneDataV27 {
    qword startingSequence;
    helpers::Array<SequenceDataV27> sequence ;
    ResourceDataV27 resources;
    helpers::Ptr<TrackGroupDataV27> trackGroup ;
};

typedef SceneDataV27 Gw2StructCSCN;

/* Version: 26, ReferencedFunction: 0x40F91B3000000001 */
struct PropertyDataV26 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV26 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV26 {
    float time;
    float value;
};

struct TriggerKeyDataV26 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV26 {
    qword name;
    helpers::Array<CurveKeyDataV26> curveKey ;
    helpers::Array<FlagKeyDataV26> flagKey ;
    helpers::Array<TriggerKeyDataV26> triggerKey ;
    byte type;
};

struct TrackGroupDataV26 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV26> prop ;
    helpers::Array<TrackDataV26> track ;
    byte type;
};

struct SequenceDataV26 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV26> trackGroup ;
};

struct ColorDefDataV26 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV26 {
    ColorDefDataV26 ambientGroundColor;
    ColorDefDataV26 ambientSkyColor;
    ColorDefDataV26 fillColor;
    ColorDefDataV26 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV26 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV26 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV26 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV26 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV26> textEntry ;
};

struct ResourceDataV26 {
    dword crc;
    helpers::Array<AmbientLightDataV26> ambientLightResource ;
    helpers::Array<FileNameRefDataV26> fileNameRef ;
    helpers::Array<ScriptDataV26> script ;
    helpers::Array<TextResourceDataV26> textResource ;
};

struct SceneDataV26 {
    qword startingSequence;
    helpers::Array<SequenceDataV26> sequence ;
    ResourceDataV26 resources;
    helpers::Ptr<TrackGroupDataV26> trackGroup ;
};

typedef SceneDataV26 Gw2StructCSCN;

/* Version: 25, ReferencedFunction: 0x40F91A7000000001 */
struct PropertyDataV25 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV25 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV25 {
    float time;
    float value;
};

struct TriggerKeyDataV25 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV25 {
    qword name;
    helpers::Array<CurveKeyDataV25> curveKey ;
    helpers::Array<FlagKeyDataV25> flagKey ;
    helpers::Array<TriggerKeyDataV25> triggerKey ;
    byte type;
};

struct TrackGroupDataV25 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV25> prop ;
    helpers::Array<TrackDataV25> track ;
    byte type;
};

struct SequenceDataV25 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV25> trackGroup ;
};

struct ColorDefDataV25 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV25 {
    ColorDefDataV25 ambientGroundColor;
    ColorDefDataV25 ambientSkyColor;
    ColorDefDataV25 fillColor;
    ColorDefDataV25 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV25 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV25 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV25 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV25 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV25> textEntry ;
};

struct ResourceDataV25 {
    dword crc;
    helpers::Array<AmbientLightDataV25> ambientLightResource ;
    helpers::Array<FileNameRefDataV25> fileNameRef ;
    helpers::Array<ScriptDataV25> script ;
    helpers::Array<TextResourceDataV25> textResource ;
};

struct SceneDataV25 {
    qword startingSequence;
    helpers::Array<SequenceDataV25> sequence ;
    ResourceDataV25 resources;
    helpers::Ptr<TrackGroupDataV25> trackGroup ;
};

typedef SceneDataV25 Gw2StructCSCN;

/* Version: 24, ReferencedFunction: 0x40F919B000000001 */
struct PropertyDataV24 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV24 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV24 {
    float time;
    float value;
};

struct TriggerKeyDataV24 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV24 {
    qword name;
    helpers::Array<CurveKeyDataV24> curveKey ;
    helpers::Array<FlagKeyDataV24> flagKey ;
    helpers::Array<TriggerKeyDataV24> triggerKey ;
    byte type;
};

struct TrackGroupDataV24 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV24> prop ;
    helpers::Array<TrackDataV24> track ;
    byte type;
};

struct SequenceDataV24 {
    qword name;
    qword playScript;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV24> trackGroup ;
};

struct ColorDefDataV24 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV24 {
    ColorDefDataV24 ambientGroundColor;
    ColorDefDataV24 ambientSkyColor;
    ColorDefDataV24 fillColor;
    ColorDefDataV24 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV24 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV24 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV24 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV24 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV24> textEntry ;
};

struct ResourceDataV24 {
    dword crc;
    helpers::Array<AmbientLightDataV24> ambientLightResource ;
    helpers::Array<FileNameRefDataV24> fileNameRef ;
    helpers::Array<ScriptDataV24> script ;
    helpers::Array<TextResourceDataV24> textResource ;
};

struct SceneDataV24 {
    qword startingSequence;
    helpers::Array<SequenceDataV24> sequence ;
    ResourceDataV24 resources;
    helpers::Ptr<TrackGroupDataV24> trackGroup ;
};

typedef SceneDataV24 Gw2StructCSCN;

/* Version: 23, ReferencedFunction: 0x1 */
struct PropertyDataV23 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV23 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV23 {
    float time;
    float value;
};

struct TriggerKeyDataV23 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV23 {
    qword name;
    helpers::Array<CurveKeyDataV23> curveKey ;
    helpers::Array<FlagKeyDataV23> flagKey ;
    helpers::Array<TriggerKeyDataV23> triggerKey ;
    byte type;
};

struct TrackGroupDataV23 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV23> prop ;
    helpers::Array<TrackDataV23> track ;
    byte type;
};

struct SequenceDataV23 {
    qword name;
    qword updateScript;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    dword flags;
    helpers::Array<TrackGroupDataV23> trackGroup ;
};

struct ColorDefDataV23 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV23 {
    ColorDefDataV23 ambientGroundColor;
    ColorDefDataV23 ambientSkyColor;
    ColorDefDataV23 fillColor;
    ColorDefDataV23 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV23 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV23 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV23 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV23 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV23> textEntry ;
};

struct ResourceDataV23 {
    dword crc;
    helpers::Array<AmbientLightDataV23> ambientLightResource ;
    helpers::Array<FileNameRefDataV23> fileNameRef ;
    helpers::Array<ScriptDataV23> script ;
    helpers::Array<TextResourceDataV23> textResource ;
};

struct SceneDataV23 {
    qword startingSequence;
    helpers::Array<SequenceDataV23> sequence ;
    ResourceDataV23 resources;
    helpers::Ptr<TrackGroupDataV23> trackGroup ;
};

typedef SceneDataV23 Gw2StructCSCN;

/* Version: 22, ReferencedFunction: 0x40F918F000000001 */
struct PropertyDataV22 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV22 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV22 {
    float time;
    float value;
};

struct TriggerKeyDataV22 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV22 {
    qword name;
    helpers::Array<CurveKeyDataV22> curveKey ;
    helpers::Array<FlagKeyDataV22> flagKey ;
    helpers::Array<TriggerKeyDataV22> triggerKey ;
    byte type;
};

struct TrackGroupDataV22 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV22> prop ;
    helpers::Array<TrackDataV22> track ;
    byte type;
};

struct SequenceDataV22 {
    qword name;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword updateScript;
    float length;
    helpers::Array<TrackGroupDataV22> trackGroup ;
};

struct ColorDefDataV22 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV22 {
    ColorDefDataV22 ambientGroundColor;
    ColorDefDataV22 ambientSkyColor;
    ColorDefDataV22 fillColor;
    ColorDefDataV22 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV22 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV22 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV22 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV22 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV22> textEntry ;
};

struct ResourceDataV22 {
    dword crc;
    helpers::Array<AmbientLightDataV22> ambientLightResource ;
    helpers::Array<FileNameRefDataV22> fileNameRef ;
    helpers::Array<ScriptDataV22> script ;
    helpers::Array<TextResourceDataV22> textResource ;
};

struct SceneDataV22 {
    qword startingSequence;
    helpers::Array<SequenceDataV22> sequence ;
    ResourceDataV22 resources;
    helpers::Ptr<TrackGroupDataV22> trackGroup ;
};

typedef SceneDataV22 Gw2StructCSCN;

/* Version: 21, ReferencedFunction: 0x1 */
struct PropertyDataV21 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV21 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV21 {
    float time;
    float value;
};

struct TriggerKeyDataV21 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV21 {
    qword name;
    helpers::Array<CurveKeyDataV21> curveKey ;
    helpers::Array<FlagKeyDataV21> flagKey ;
    helpers::Array<TriggerKeyDataV21> triggerKey ;
    byte type;
};

struct TrackGroupDataV21 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV21> prop ;
    helpers::Array<TrackDataV21> track ;
    byte type;
};

struct SequenceDataV21 {
    qword name;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword updateScript;
    float length;
    helpers::Array<TrackGroupDataV21> trackGroup ;
};

struct ColorDefDataV21 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV21 {
    ColorDefDataV21 ambientGroundColor;
    ColorDefDataV21 ambientSkyColor;
    ColorDefDataV21 fillColor;
    ColorDefDataV21 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV21 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV21 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV21 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV21 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV21> textEntry ;
};

struct ResourceDataV21 {
    dword crc;
    helpers::Array<AmbientLightDataV21> ambientLightResource ;
    helpers::Array<FileNameRefDataV21> fileNameRef ;
    helpers::Array<ScriptDataV21> script ;
    helpers::Array<TextResourceDataV21> textResource ;
};

struct SceneDataV21 {
    qword startingSequence;
    helpers::Array<SequenceDataV21> sequence ;
    ResourceDataV21 resources;
    helpers::Ptr<TrackGroupDataV21> trackGroup ;
};

typedef SceneDataV21 Gw2StructCSCN;

/* Version: 20, ReferencedFunction: 0x40F9183000000001 */
struct PropertyDataV20 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV20 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV20 {
    float time;
    float value;
};

struct TriggerKeyDataV20 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV20 {
    qword name;
    helpers::Array<CurveKeyDataV20> curveKey ;
    helpers::Array<FlagKeyDataV20> flagKey ;
    helpers::Array<TriggerKeyDataV20> triggerKey ;
    byte type;
};

struct TrackGroupDataV20 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV20> prop ;
    helpers::Array<TrackDataV20> track ;
    byte type;
};

struct SequenceDataV20 {
    qword name;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword updateScript;
    float length;
    helpers::Array<TrackGroupDataV20> trackGroup ;
};

struct ColorDefDataV20 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV20 {
    ColorDefDataV20 ambientGroundColor;
    ColorDefDataV20 ambientSkyColor;
    ColorDefDataV20 fillColor;
    ColorDefDataV20 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV20 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV20 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV20 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV20 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV20> textEntry ;
};

struct ResourceDataV20 {
    dword crc;
    helpers::Array<AmbientLightDataV20> ambientLightResource ;
    helpers::Array<FileNameRefDataV20> fileNameRef ;
    helpers::Array<ScriptDataV20> script ;
    helpers::Array<TextResourceDataV20> textResource ;
};

struct SceneDataV20 {
    qword startingSequence;
    helpers::Array<SequenceDataV20> sequence ;
    ResourceDataV20 resources;
};

typedef SceneDataV20 Gw2StructCSCN;

/* Version: 19, ReferencedFunction: 0x40F9177000000001 */
struct PropertyDataV19 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV19 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV19 {
    float time;
    float value;
};

struct TriggerKeyDataV19 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV19 {
    qword name;
    helpers::Array<CurveKeyDataV19> curveKey ;
    helpers::Array<FlagKeyDataV19> flagKey ;
    helpers::Array<TriggerKeyDataV19> triggerKey ;
    byte type;
};

struct TrackGroupDataV19 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV19> prop ;
    helpers::Array<TrackDataV19> track ;
    byte type;
};

struct SequenceDataV19 {
    qword name;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword updateScript;
    float length;
    helpers::Array<TrackGroupDataV19> trackGroup ;
};

struct ColorDefDataV19 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV19 {
    ColorDefDataV19 ambientGroundColor;
    ColorDefDataV19 ambientSkyColor;
    ColorDefDataV19 fillColor;
    ColorDefDataV19 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV19 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV19 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV19 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV19 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV19> textEntry ;
};

struct ResourceDataV19 {
    dword crc;
    helpers::Array<AmbientLightDataV19> ambientLightResource ;
    helpers::Array<FileNameRefDataV19> fileNameRef ;
    helpers::Array<ScriptDataV19> script ;
    helpers::Array<TextResourceDataV19> textResource ;
};

struct SceneDataV19 {
    qword startingSequence;
    helpers::Array<SequenceDataV19> sequence ;
    ResourceDataV19 resources;
};

typedef SceneDataV19 Gw2StructCSCN;

/* Version: 18, ReferencedFunction: 0x40F9177000000001 */
struct PropertyDataV18 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV18 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV18 {
    float time;
    float value;
};

struct TriggerKeyDataV18 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV18 {
    qword name;
    helpers::Array<CurveKeyDataV18> curveKey ;
    helpers::Array<FlagKeyDataV18> flagKey ;
    helpers::Array<TriggerKeyDataV18> triggerKey ;
    byte type;
};

struct TrackGroupDataV18 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV18> prop ;
    helpers::Array<TrackDataV18> track ;
    byte type;
};

struct SequenceDataV18 {
    qword name;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword updateScript;
    float length;
    helpers::Array<TrackGroupDataV18> trackGroup ;
};

struct ColorDefDataV18 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV18 {
    ColorDefDataV18 ambientGroundColor;
    ColorDefDataV18 ambientSkyColor;
    ColorDefDataV18 fillColor;
    ColorDefDataV18 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV18 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV18 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV18 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV18 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV18> textEntry ;
};

struct ResourceDataV18 {
    dword crc;
    helpers::Array<AmbientLightDataV18> ambientLightResource ;
    helpers::Array<FileNameRefDataV18> fileNameRef ;
    helpers::Array<ScriptDataV18> script ;
    helpers::Array<TextResourceDataV18> textResource ;
};

struct SceneDataV18 {
    qword startingSequence;
    helpers::Array<SequenceDataV18> sequence ;
    ResourceDataV18 resources;
};

typedef SceneDataV18 Gw2StructCSCN;

/* Version: 17, ReferencedFunction: 0x40F916B000000001 */
struct PropertyDataV17 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV17 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV17 {
    float time;
    float value;
};

struct TriggerKeyDataV17 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV17 {
    qword name;
    helpers::Array<CurveKeyDataV17> curveKey ;
    helpers::Array<FlagKeyDataV17> flagKey ;
    helpers::Array<TriggerKeyDataV17> triggerKey ;
    byte type;
};

struct TrackGroupDataV17 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV17> prop ;
    helpers::Array<TrackDataV17> track ;
    byte type;
};

struct SequenceDataV17 {
    qword name;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword updateScript;
    float length;
    helpers::Array<TrackGroupDataV17> trackGroup ;
};

struct ColorDefDataV17 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV17 {
    ColorDefDataV17 ambientGroundColor;
    ColorDefDataV17 ambientSkyColor;
    ColorDefDataV17 fillColor;
    ColorDefDataV17 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV17 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV17 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV17 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV17 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV17> textEntry ;
};

struct ResourceDataV17 {
    dword crc;
    helpers::Array<AmbientLightDataV17> ambientLightResource ;
    helpers::Array<FileNameRefDataV17> fileNameRef ;
    helpers::Array<ScriptDataV17> script ;
    helpers::Array<TextResourceDataV17> textResource ;
};

struct SceneDataV17 {
    qword startingSequence;
    helpers::Array<SequenceDataV17> sequence ;
    ResourceDataV17 resources;
};

typedef SceneDataV17 Gw2StructCSCN;

/* Version: 16, ReferencedFunction: 0x40F915F000000001 */
struct PropertyDataV16 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV16 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV16 {
    float time;
    float value;
};

struct TriggerKeyDataV16 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV16 {
    qword name;
    helpers::Array<CurveKeyDataV16> curveKey ;
    helpers::Array<FlagKeyDataV16> flagKey ;
    helpers::Array<TriggerKeyDataV16> triggerKey ;
    byte type;
};

struct TrackGroupDataV16 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV16> prop ;
    helpers::Array<TrackDataV16> track ;
    byte type;
};

struct SequenceDataV16 {
    qword name;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword updateScript;
    float length;
    helpers::Array<TrackGroupDataV16> trackGroup ;
};

struct ColorDefDataV16 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV16 {
    ColorDefDataV16 ambientGroundColor;
    ColorDefDataV16 ambientSkyColor;
    ColorDefDataV16 fillColor;
    ColorDefDataV16 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV16 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV16 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV16 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV16 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV16> textEntry ;
};

struct ResourceDataV16 {
    dword crc;
    helpers::Array<AmbientLightDataV16> ambientLightResource ;
    helpers::Array<FileNameRefDataV16> fileNameRef ;
    helpers::Array<ScriptDataV16> script ;
    helpers::Array<TextResourceDataV16> textResource ;
};

struct SceneDataV16 {
    qword startingSequence;
    helpers::Array<SequenceDataV16> sequence ;
    ResourceDataV16 resources;
};

typedef SceneDataV16 Gw2StructCSCN;

/* Version: 15, ReferencedFunction: 0x1 */
struct PropertyDataV15 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV15 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV15 {
    float time;
    float value;
};

struct TriggerKeyDataV15 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV15 {
    qword name;
    helpers::Array<CurveKeyDataV15> curveKey ;
    helpers::Array<FlagKeyDataV15> flagKey ;
    helpers::Array<TriggerKeyDataV15> triggerKey ;
    byte type;
};

struct TrackGroupDataV15 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV15> prop ;
    helpers::Array<TrackDataV15> track ;
    byte type;
};

struct SequenceDataV15 {
    qword name;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword updateScript;
    float length;
    helpers::Array<TrackGroupDataV15> trackGroup ;
};

struct ColorDefDataV15 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV15 {
    ColorDefDataV15 ambientGroundColor;
    ColorDefDataV15 ambientSkyColor;
    ColorDefDataV15 fillColor;
    ColorDefDataV15 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV15 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV15 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV15 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV15 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV15> textEntry ;
};

struct ResourceDataV15 {
    dword crc;
    helpers::Array<AmbientLightDataV15> ambientLightResource ;
    helpers::Array<FileNameRefDataV15> fileNameRef ;
    helpers::Array<ScriptDataV15> script ;
    helpers::Array<TextResourceDataV15> textResource ;
};

struct SceneDataV15 {
    qword startingSequence;
    helpers::Array<SequenceDataV15> sequence ;
    ResourceDataV15 resources;
};

typedef SceneDataV15 Gw2StructCSCN;

/* Version: 14, ReferencedFunction: 0x1 */
struct PropertyDataV14 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV14 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV14 {
    float time;
    float value;
};

struct TriggerKeyDataV14 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV14 {
    qword name;
    helpers::Array<CurveKeyDataV14> curveKey ;
    helpers::Array<FlagKeyDataV14> flagKey ;
    helpers::Array<TriggerKeyDataV14> triggerKey ;
    byte type;
};

struct TrackGroupDataV14 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV14> prop ;
    helpers::Array<TrackDataV14> track ;
    byte type;
};

struct SequenceDataV14 {
    qword name;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    helpers::Array<TrackGroupDataV14> trackGroup ;
};

struct ColorDefDataV14 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV14 {
    ColorDefDataV14 ambientGroundColor;
    ColorDefDataV14 ambientSkyColor;
    ColorDefDataV14 fillColor;
    ColorDefDataV14 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV14 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV14 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV14 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV14 {
    qword name;
    dword id;
    dword voiceId;
    helpers::Array<TextEntryDataV14> textEntry ;
};

struct ResourceDataV14 {
    dword crc;
    helpers::Array<AmbientLightDataV14> ambientLightResource ;
    helpers::Array<FileNameRefDataV14> fileNameRef ;
    helpers::Array<ScriptDataV14> script ;
    helpers::Array<TextResourceDataV14> textResource ;
};

struct SceneDataV14 {
    qword startingSequence;
    helpers::Array<SequenceDataV14> sequence ;
    ResourceDataV14 resources;
};

typedef SceneDataV14 Gw2StructCSCN;

/* Version: 13, ReferencedFunction: 0x40F9155000000001 */
struct PropertyDataV13 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV13 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV13 {
    float time;
    float value;
};

struct TriggerKeyDataV13 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV13 {
    qword name;
    helpers::Array<CurveKeyDataV13> curveKey ;
    helpers::Array<FlagKeyDataV13> flagKey ;
    helpers::Array<TriggerKeyDataV13> triggerKey ;
    byte type;
};

struct TrackGroupDataV13 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV13> prop ;
    helpers::Array<TrackDataV13> track ;
    byte type;
};

struct SequenceDataV13 {
    qword name;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    helpers::Array<TrackGroupDataV13> trackGroup ;
};

struct ColorDefDataV13 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV13 {
    ColorDefDataV13 ambientGroundColor;
    ColorDefDataV13 ambientSkyColor;
    ColorDefDataV13 fillColor;
    ColorDefDataV13 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV13 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV13 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV13 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV13 {
    qword name;
    dword id;
    helpers::Array<TextEntryDataV13> textEntry ;
};

struct ResourceDataV13 {
    dword crc;
    helpers::Array<AmbientLightDataV13> ambientLightResource ;
    helpers::Array<FileNameRefDataV13> fileNameRef ;
    helpers::Array<ScriptDataV13> script ;
    helpers::Array<TextResourceDataV13> textResource ;
};

struct SceneDataV13 {
    qword startingSequence;
    helpers::Array<SequenceDataV13> sequence ;
    ResourceDataV13 resources;
};

typedef SceneDataV13 Gw2StructCSCN;

/* Version: 12, ReferencedFunction: 0x40F9140000000001 */
struct PropertyDataV12 {
    qword value;
    helpers::FileName pathVal;
    byte type;
};

struct CurveKeyDataV12 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV12 {
    float time;
    float value;
};

struct TriggerKeyDataV12 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV12 {
    qword name;
    helpers::Array<CurveKeyDataV12> curveKey ;
    helpers::Array<FlagKeyDataV12> flagKey ;
    helpers::Array<TriggerKeyDataV12> triggerKey ;
    byte type;
};

struct TrackGroupDataV12 {
    qword name;
    dword flags;
    helpers::Array<PropertyDataV12> prop ;
    helpers::Array<TrackDataV12> track ;
    byte type;
};

struct SequenceDataV12 {
    qword name;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    float length;
    helpers::Array<TrackGroupDataV12> trackGroup ;
};

struct ColorDefDataV12 {
    float intensity;
    byte3 color;
};

struct AmbientLightDataV12 {
    ColorDefDataV12 ambientGroundColor;
    ColorDefDataV12 ambientSkyColor;
    ColorDefDataV12 fillColor;
    ColorDefDataV12 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV12 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV12 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV12 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV12 {
    qword name;
    dword id;
    helpers::Array<TextEntryDataV12> textEntry ;
};

struct ResourceDataV12 {
    dword crc;
    helpers::Array<AmbientLightDataV12> ambientLightResource ;
    helpers::Array<FileNameRefDataV12> fileNameRef ;
    helpers::Array<ScriptDataV12> script ;
    helpers::Array<TextResourceDataV12> textResource ;
};

struct SceneDataV12 {
    qword startingSequence;
    helpers::Array<SequenceDataV12> sequence ;
    ResourceDataV12 resources;
};

typedef SceneDataV12 Gw2StructCSCN;

/* Version: 11, ReferencedFunction: 0x40F9134000000001 */
struct PropertyDataV11 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV11 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV11 {
    float time;
    float value;
};

struct TriggerKeyDataV11 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV11 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV11> curveKey ;
    helpers::Array<FlagKeyDataV11> flagKey ;
    helpers::Array<TriggerKeyDataV11> triggerKey ;
};

struct TrackGroupDataV11 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV11> prop ;
    helpers::Array<TrackDataV11> track ;
};

struct SequenceDataV11 {
    qword name;
    float length;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    helpers::Array<TrackGroupDataV11> trackGroup ;
};

struct ColorDefDataV11 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV11 {
    ColorDefDataV11 ambientGroundColor;
    ColorDefDataV11 ambientSkyColor;
    ColorDefDataV11 fillColor;
    ColorDefDataV11 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV11 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV11 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV11 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV11 {
    qword name;
    dword id;
    helpers::Array<TextEntryDataV11> textEntry ;
};

struct ResourceDataV11 {
    dword crc;
    helpers::Array<AmbientLightDataV11> ambientLightResource ;
    helpers::Array<FileNameRefDataV11> fileNameRef ;
    helpers::Array<ScriptDataV11> script ;
    helpers::Array<TextResourceDataV11> textResource ;
};

struct SceneDataV11 {
    qword startingSequence;
    helpers::Array<SequenceDataV11> sequence ;
    ResourceDataV11 resources;
};

typedef SceneDataV11 Gw2StructCSCN;

/* Version: 10, ReferencedFunction: 0x40F912E000000001 */
struct PropertyDataV10 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV10 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV10 {
    float time;
    float value;
};

struct TriggerKeyDataV10 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV10 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV10> curveKey ;
    helpers::Array<FlagKeyDataV10> flagKey ;
    helpers::Array<TriggerKeyDataV10> triggerKey ;
};

struct TrackGroupDataV10 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV10> prop ;
    helpers::Array<TrackDataV10> track ;
};

struct SequenceDataV10 {
    qword name;
    float length;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    helpers::Array<TrackGroupDataV10> trackGroup ;
};

struct ColorDefDataV10 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV10 {
    ColorDefDataV10 ambientGroundColor;
    ColorDefDataV10 ambientSkyColor;
    ColorDefDataV10 fillColor;
    ColorDefDataV10 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV10 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV10 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV10 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV10 {
    qword name;
    dword id;
    helpers::Array<TextEntryDataV10> textEntry ;
};

struct ResourceDataV10 {
    dword crc;
    helpers::Array<AmbientLightDataV10> ambientLightResource ;
    helpers::Array<FileNameRefDataV10> fileNameRef ;
    helpers::Array<ScriptDataV10> script ;
    helpers::Array<TextResourceDataV10> textResource ;
};

struct SceneDataV10 {
    qword startingSequence;
    helpers::Array<SequenceDataV10> sequence ;
    ResourceDataV10 resources;
};

typedef SceneDataV10 Gw2StructCSCN;

/* Version: 9, ReferencedFunction: 0x40F9122000000001 */
struct PropertyDataV9 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV9 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV9 {
    float time;
    float value;
};

struct TriggerKeyDataV9 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV9 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV9> curveKey ;
    helpers::Array<FlagKeyDataV9> flagKey ;
    helpers::Array<TriggerKeyDataV9> triggerKey ;
};

struct TrackGroupDataV9 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV9> prop ;
    helpers::Array<TrackDataV9> track ;
};

struct SequenceDataV9 {
    qword name;
    float length;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    helpers::Array<TrackGroupDataV9> trackGroup ;
};

struct ColorDefDataV9 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV9 {
    ColorDefDataV9 ambientGroundColor;
    ColorDefDataV9 ambientSkyColor;
    ColorDefDataV9 fillColor;
    ColorDefDataV9 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV9 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV9 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV9 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV9 {
    qword name;
    dword id;
    helpers::Array<TextEntryDataV9> textEntry ;
};

struct ResourceDataV9 {
    dword crc;
    helpers::Array<AmbientLightDataV9> ambientLightResource ;
    helpers::Array<FileNameRefDataV9> fileNameRef ;
    helpers::Array<ScriptDataV9> script ;
    helpers::Array<TextResourceDataV9> textResource ;
};

struct SceneDataV9 {
    qword startingSequence;
    helpers::Array<SequenceDataV9> sequence ;
    ResourceDataV9 resources;
};

typedef SceneDataV9 Gw2StructCSCN;

/* Version: 8, ReferencedFunction: 0x1 */
struct PropertyDataV8 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV8 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV8 {
    float time;
    float value;
};

struct TriggerKeyDataV8 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV8 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV8> curveKey ;
    helpers::Array<FlagKeyDataV8> flagKey ;
    helpers::Array<TriggerKeyDataV8> triggerKey ;
};

struct TrackGroupDataV8 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV8> prop ;
    helpers::Array<TrackDataV8> track ;
};

struct SequenceDataV8 {
    qword name;
    float length;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    helpers::Array<TrackGroupDataV8> trackGroup ;
};

struct ColorDefDataV8 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV8 {
    ColorDefDataV8 ambientGroundColor;
    ColorDefDataV8 ambientSkyColor;
    ColorDefDataV8 fillColor;
    ColorDefDataV8 hemisphericalColor;
    qword name;
};

struct FileNameRefDataV8 {
    qword name;
    helpers::FileName fileName;
};

struct ScriptDataV8 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV8 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV8 {
    qword name;
    dword id;
    helpers::Array<TextEntryDataV8> textEntry ;
};

struct ResourceDataV8 {
    helpers::Array<AmbientLightDataV8> ambientLightResource ;
    helpers::Array<FileNameRefDataV8> fileNameRef ;
    helpers::Array<ScriptDataV8> script ;
    helpers::Array<TextResourceDataV8> textResource ;
};

struct SceneDataV8 {
    qword startingSequence;
    helpers::Array<SequenceDataV8> sequence ;
    ResourceDataV8 resources;
};

typedef SceneDataV8 Gw2StructCSCN;

/* Version: 7, ReferencedFunction: 0x40F9111000000001 */
struct PropertyDataV7 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV7 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV7 {
    float time;
    float value;
};

struct TriggerKeyDataV7 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV7 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV7> curveKey ;
    helpers::Array<FlagKeyDataV7> flagKey ;
    helpers::Array<TriggerKeyDataV7> triggerKey ;
};

struct TrackGroupDataV7 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV7> prop ;
    helpers::Array<TrackDataV7> track ;
};

struct SequenceDataV7 {
    qword name;
    float length;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    helpers::Array<TrackGroupDataV7> trackGroup ;
};

struct ColorDefDataV7 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV7 {
    ColorDefDataV7 ambientGroundColor;
    ColorDefDataV7 ambientSkyColor;
    ColorDefDataV7 fillColor;
    ColorDefDataV7 hemisphericalColor;
    qword name;
};

struct ScriptDataV7 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV7 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV7 {
    qword name;
    dword id;
    helpers::Array<TextEntryDataV7> textEntry ;
};

struct ResourceDataV7 {
    helpers::Array<AmbientLightDataV7> ambientLightResource ;
    helpers::Array<ScriptDataV7> script ;
    helpers::Array<TextResourceDataV7> textResource ;
};

struct SceneDataV7 {
    qword startingSequence;
    helpers::Array<SequenceDataV7> sequence ;
    ResourceDataV7 resources;
};

typedef SceneDataV7 Gw2StructCSCN;

/* Version: 6, ReferencedFunction: 0x40F90FF000000001 */
struct PropertyDataV6 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV6 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV6 {
    float time;
    float value;
};

struct TriggerKeyDataV6 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV6 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV6> curveKey ;
    helpers::Array<FlagKeyDataV6> flagKey ;
    helpers::Array<TriggerKeyDataV6> triggerKey ;
};

struct TrackGroupDataV6 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV6> prop ;
    helpers::Array<TrackDataV6> track ;
};

struct SequenceDataV6 {
    qword name;
    float length;
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    helpers::Array<TrackGroupDataV6> trackGroup ;
};

struct ColorDefDataV6 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV6 {
    ColorDefDataV6 ambientGroundColor;
    ColorDefDataV6 ambientSkyColor;
    ColorDefDataV6 fillColor;
    ColorDefDataV6 hemisphericalColor;
    qword name;
};

struct ScriptDataV6 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV6 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV6 {
    qword name;
    dword id;
    helpers::Array<TextEntryDataV6> textEntry ;
};

struct ResourceDataV6 {
    helpers::Array<AmbientLightDataV6> ambientLightResource ;
    helpers::Array<ScriptDataV6> script ;
    helpers::Array<TextResourceDataV6> textResource ;
};

struct SceneDataV6 {
    qword startingSequence;
    helpers::Array<SequenceDataV6> sequence ;
    ResourceDataV6 resources;
};

typedef SceneDataV6 Gw2StructCSCN;

/* Version: 5, ReferencedFunction: 0x40F90F3000000001 */
struct PropertyDataV5 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV5 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV5 {
    float time;
    float value;
};

struct TriggerKeyDataV5 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV5 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV5> curveKey ;
    helpers::Array<FlagKeyDataV5> flagKey ;
    helpers::Array<TriggerKeyDataV5> triggerKey ;
};

struct TrackGroupDataV5 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV5> prop ;
    helpers::Array<TrackDataV5> track ;
};

struct SequenceDataV5 {
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword name;
    float length;
    helpers::Array<TrackGroupDataV5> trackGroup ;
};

struct ColorDefDataV5 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV5 {
    ColorDefDataV5 ambientGroundColor;
    ColorDefDataV5 ambientSkyColor;
    ColorDefDataV5 fillColor;
    ColorDefDataV5 hemisphericalColor;
    qword name;
};

struct ScriptDataV5 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV5 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV5 {
    qword name;
    dword id;
    helpers::Array<TextEntryDataV5> textEntry ;
};

struct ResourceDataV5 {
    helpers::Array<AmbientLightDataV5> ambientLightResource ;
    helpers::Array<ScriptDataV5> script ;
    helpers::Array<TextResourceDataV5> textResource ;
};

struct SceneDataV5 {
    qword startingSequence;
    helpers::Array<SequenceDataV5> sequence ;
    ResourceDataV5 resources;
};

typedef SceneDataV5 Gw2StructCSCN;

/* Version: 4, ReferencedFunction: 0x40F90E7000000001 */
struct PropertyDataV4 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV4 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV4 {
    float time;
    float value;
};

struct TriggerKeyDataV4 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV4 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV4> curveKey ;
    helpers::Array<FlagKeyDataV4> flagKey ;
    helpers::Array<TriggerKeyDataV4> triggerKey ;
};

struct TrackGroupDataV4 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV4> prop ;
    helpers::Array<TrackDataV4> track ;
};

struct SequenceDataV4 {
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword name;
    float length;
    helpers::Array<TrackGroupDataV4> trackGroup ;
};

struct ColorDefDataV4 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV4 {
    ColorDefDataV4 ambientGroundColor;
    ColorDefDataV4 ambientSkyColor;
    ColorDefDataV4 fillColor;
    ColorDefDataV4 hemisphericalColor;
    qword name;
};

struct ScriptDataV4 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV4 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV4 {
    qword name;
    dword id;
    helpers::Array<TextEntryDataV4> textEntry ;
};

struct ResourceDataV4 {
    helpers::Array<AmbientLightDataV4> ambientLightResource ;
    helpers::Array<ScriptDataV4> script ;
    helpers::Array<TextResourceDataV4> textResource ;
};

struct SceneDataV4 {
    qword startingSequence;
    helpers::Array<SequenceDataV4> sequence ;
    ResourceDataV4 resources;
};

typedef SceneDataV4 Gw2StructCSCN;

/* Version: 3, ReferencedFunction: 0x40F90D9000000001 */
struct PropertyDataV3 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV3 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV3 {
    float time;
    float value;
};

struct TriggerKeyDataV3 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV3 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV3> curveKey ;
    helpers::Array<FlagKeyDataV3> flagKey ;
    helpers::Array<TriggerKeyDataV3> triggerKey ;
};

struct TrackGroupDataV3 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV3> prop ;
    helpers::Array<TrackDataV3> track ;
};

struct SequenceDataV3 {
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword name;
    float length;
    helpers::Array<TrackGroupDataV3> trackGroup ;
};

struct ColorDefDataV3 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV3 {
    ColorDefDataV3 ambientGroundColor;
    ColorDefDataV3 ambientSkyColor;
    ColorDefDataV3 fillColor;
    ColorDefDataV3 hemisphericalColor;
    qword name;
};

struct ScriptDataV3 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV3 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV3 {
    qword name;
    helpers::Array<TextEntryDataV3> textEntry ;
};

struct ResourceDataV3 {
    helpers::Array<AmbientLightDataV3> ambientLightResource ;
    helpers::Array<ScriptDataV3> script ;
    helpers::Array<TextResourceDataV3> textResource ;
};

struct SceneDataV3 {
    qword startingSequence;
    helpers::Array<SequenceDataV3> sequence ;
    ResourceDataV3 resources;
};

typedef SceneDataV3 Gw2StructCSCN;

/* Version: 2, ReferencedFunction: 0x1 */
struct PropertyDataV2 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV2 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV2 {
    float time;
    float value;
};

struct TriggerKeyDataV2 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV2 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV2> curveKey ;
    helpers::Array<FlagKeyDataV2> flagKey ;
    helpers::Array<TriggerKeyDataV2> triggerKey ;
};

struct TrackGroupDataV2 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV2> prop ;
    helpers::Array<TrackDataV2> track ;
};

struct SequenceDataV2 {
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword name;
    float length;
    helpers::Array<TrackGroupDataV2> trackGroup ;
};

struct ColorDefDataV2 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV2 {
    ColorDefDataV2 ambientGroundColor;
    ColorDefDataV2 ambientSkyColor;
    ColorDefDataV2 fillColor;
    ColorDefDataV2 hemisphericalColor;
    qword name;
};

struct ScriptDataV2 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV2 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV2 {
    qword name;
    helpers::Array<TextEntryDataV2> textEntry ;
};

struct ResourceDataV2 {
    helpers::Array<AmbientLightDataV2> ambientLightResource ;
    helpers::Array<ScriptDataV2> script ;
    helpers::Array<TextResourceDataV2> textResource ;
};

struct SceneDataV2 {
    qword startingSequence;
    helpers::Array<SequenceDataV2> sequence ;
    ResourceDataV2 resources;
};

typedef SceneDataV2 Gw2StructCSCN;

/* Version: 1, ReferencedFunction: 0x40F90C4000000001 */
struct PropertyDataV1 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV1 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV1 {
    float time;
    float value;
};

struct TriggerKeyDataV1 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV1 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV1> curveKey ;
    helpers::Array<FlagKeyDataV1> flagKey ;
    helpers::Array<TriggerKeyDataV1> triggerKey ;
};

struct TrackGroupDataV1 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV1> prop ;
    helpers::Array<TrackDataV1> track ;
};

struct SequenceDataV1 {
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword name;
    float length;
    helpers::Array<TrackGroupDataV1> trackGroup ;
};

struct ColorDefDataV1 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV1 {
    ColorDefDataV1 ambientGroundColor;
    ColorDefDataV1 ambientSkyColor;
    ColorDefDataV1 fillColor;
    ColorDefDataV1 hemisphericalColor;
    qword name;
};

struct ScriptDataV1 {
    qword name;
    helpers::Array<byte> byteCode ;
};

struct TextEntryDataV1 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV1 {
    qword name;
    helpers::Array<TextEntryDataV1> textEntry ;
};

struct ResourceDataV1 {
    helpers::Array<AmbientLightDataV1> ambientLightResource ;
    helpers::Array<ScriptDataV1> script ;
    helpers::Array<TextResourceDataV1> textResource ;
};

struct SceneDataV1 {
    helpers::Array<SequenceDataV1> sequence ;
    ResourceDataV1 resources;
};

typedef SceneDataV1 Gw2StructCSCN;

/* Version: 0, ReferencedFunction: 0x1 */
struct PropertyDataV0 {
    byte type;
    qword value;
    helpers::FileName pathVal;
};

struct CurveKeyDataV0 {
    float time;
    float value;
    float inTangent;
    float outTangent;
};

struct FlagKeyDataV0 {
    float time;
    float value;
};

struct TriggerKeyDataV0 {
    float time;
    byte flags1;
    byte flags2;
    byte flags3;
    byte flags4;
    qword token1;
    qword token2;
    float value1;
    float value2;
    float value3;
    float value4;
};

struct TrackDataV0 {
    qword name;
    byte type;
    helpers::Array<CurveKeyDataV0> curveKey ;
    helpers::Array<FlagKeyDataV0> flagKey ;
    helpers::Array<TriggerKeyDataV0> triggerKey ;
};

struct TrackGroupDataV0 {
    qword name;
    byte type;
    dword flags;
    helpers::Array<PropertyDataV0> prop ;
    helpers::Array<TrackDataV0> track ;
};

struct SequenceDataV0 {
    helpers::FileName environmentMap;
    helpers::WString map;
    helpers::WString clientMap;
    qword name;
    float length;
    helpers::Array<TrackGroupDataV0> trackGroup ;
};

struct ColorDefDataV0 {
    byte3 color;
    float intensity;
};

struct AmbientLightDataV0 {
    ColorDefDataV0 ambientGroundColor;
    ColorDefDataV0 ambientSkyColor;
    ColorDefDataV0 fillColor;
    ColorDefDataV0 hemisphericalColor;
    qword name;
};

struct TextEntryDataV0 {
    helpers::WString text;
    byte language;
};

struct TextResourceDataV0 {
    qword name;
    helpers::Array<TextEntryDataV0> textEntry ;
};

struct ResourceDataV0 {
    helpers::Array<AmbientLightDataV0> ambientLightResource ;
    helpers::Array<TextResourceDataV0> textResource ;
};

struct SceneDataV0 {
    helpers::Array<SequenceDataV0> sequence ;
    ResourceDataV0 resources;
};

typedef SceneDataV0 Gw2StructCSCN;


/* ===============================================
 * Chunk: havk, versions: 17, strucTab: 0x141F9CE90
 * ===============================================
 */

/* Version: 16, ReferencedFunction: 0x1 */
struct PackMoppType {
    helpers::Array<byte> moppData ;
};

struct PackMapCollideCollisionV16 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<word> surfaces ;
    PackMoppType moppCodeData;
};

struct PackMapCollideBlockerV16 {
    helpers::Array<float3> vertices ;
};

struct PackMapCollideAnimationV16 {
    qword sequence;
    helpers::Array<dword> collisionIndices ;
    helpers::Array<dword> blockerIndices ;
};

struct PackMapCollideGeometryV16 {
    byte quantizedExtents;
    helpers::Array<dword> animations ;
    word navMeshIndex;
};

struct PackMapCollideModelObsV16 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapCollideModelPropV16 {
    qword token;
    qword sequence;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideModelZoneV16 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideWaterVolumeV16 {
    qword guid;
    helpers::WString name;
    dword flags;
    float2 verticalRange;
    helpers::Array<float2> vertices ;
};

struct PackMapCollideV16 {
    float3 boundsMin;
    float3 boundsMax;
    dword flags;
    float waterSurfaceZ;
    helpers::Array<PackMapCollideCollisionV16> collisions ;
    helpers::Array<PackMapCollideBlockerV16> blockers ;
    helpers::Array<PackMapCollideAnimationV16> animations ;
    helpers::Array<PackMapCollideGeometryV16> geometries ;
    helpers::Array<PackMapCollideModelObsV16> obsModels ;
    helpers::Array<PackMapCollideModelPropV16> propModels ;
    helpers::Array<PackMapCollideModelZoneV16> zoneModels ;
    helpers::Array<PackMapCollideWaterVolumeV16> waterVolumes ;
};

typedef PackMapCollideV16 Gw2Structhavk;

/* Version: 15, ReferencedFunction: 0x4104203000000001 */
struct PackMoppType {
    helpers::Array<byte> moppData ;
};

struct PackMapCollideCollisionV15 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<word> surfaces ;
    PackMoppType moppCodeData;
};

struct PackMapCollideBlockerV15 {
    helpers::Array<float3> vertices ;
};

struct PackMapCollideAnimationV15 {
    qword sequence;
    helpers::Array<dword> collisionIndices ;
    helpers::Array<dword> blockerIndices ;
};

struct PackMapCollideGeometryV15 {
    byte quantizedExtents;
    helpers::Array<dword> animations ;
    word navMeshIndex;
};

struct PackMapCollideModelObsV15 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapCollideModelPropV15 {
    qword token;
    qword sequence;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideModelZoneV15 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideWaterVolumeV15 {
    qword guid;
    dword flags;
    float2 verticalRange;
    helpers::Array<float2> vertices ;
};

struct PackMapCollideV15 {
    float3 boundsMin;
    float3 boundsMax;
    dword flags;
    float waterSurfaceZ;
    helpers::Array<PackMapCollideCollisionV15> collisions ;
    helpers::Array<PackMapCollideBlockerV15> blockers ;
    helpers::Array<PackMapCollideAnimationV15> animations ;
    helpers::Array<PackMapCollideGeometryV15> geometries ;
    helpers::Array<PackMapCollideModelObsV15> obsModels ;
    helpers::Array<PackMapCollideModelPropV15> propModels ;
    helpers::Array<PackMapCollideModelZoneV15> zoneModels ;
    helpers::Array<PackMapCollideWaterVolumeV15> waterVolumes ;
};

typedef PackMapCollideV15 Gw2Structhavk;

/* Version: 14, ReferencedFunction: 0x41041FA000000001 */
struct PackMoppType {
    helpers::Array<byte> moppData ;
};

struct PackMapCollideCollisionV14 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<word> surfaces ;
    PackMoppType moppCodeData;
};

struct PackMapCollideBlockerV14 {
    helpers::Array<float3> vertices ;
};

struct PackMapCollideNavMeshV14 {
    helpers::Array<byte> navMesh ;
    helpers::Array<byte> graph ;
    helpers::Array<byte> mediator ;
};

struct PackMapCollideAnimationV14 {
    qword sequence;
    helpers::Array<dword> collisionIndices ;
    helpers::Array<dword> blockerIndices ;
};

struct PackMapCollideGeometryV14 {
    byte quantizedExtents;
    helpers::Array<dword> animations ;
    word navMeshIndex;
};

struct PackMapCollideModelObsV14 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapCollideModelPropV14 {
    qword token;
    qword sequence;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideModelZoneV14 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideV14 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapCollideCollisionV14> collisions ;
    helpers::Array<PackMapCollideBlockerV14> blockers ;
    helpers::Array<PackMapCollideNavMeshV14> navMeshes ;
    helpers::Array<PackMapCollideAnimationV14> animations ;
    helpers::Array<PackMapCollideGeometryV14> geometries ;
    helpers::Array<PackMapCollideModelObsV14> obsModels ;
    helpers::Array<PackMapCollideModelPropV14> propModels ;
    helpers::Array<PackMapCollideModelZoneV14> zoneModels ;
};

typedef PackMapCollideV14 Gw2Structhavk;

/* Version: 13, ReferencedFunction: 0x41041B6000000001 */
struct PackMapCollideCollisionV13 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<word> surfaces ;
    helpers::Array<byte> moppCodeData ;
};

struct PackMapCollideBlockerV13 {
    helpers::Array<float3> vertices ;
};

struct PackMapCollideAnimationV13 {
    qword sequence;
    helpers::Array<dword> collisionIndices ;
    helpers::Array<dword> blockerIndices ;
};

struct PackMapCollideGeometryV13 {
    byte quantizedExtents;
    helpers::Array<dword> animations ;
};

struct PackMapCollideModelObsV13 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapCollideModelPropV13 {
    qword token;
    qword sequence;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideModelZoneV13 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideV13 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapCollideCollisionV13> collisions ;
    helpers::Array<PackMapCollideBlockerV13> blockers ;
    helpers::Array<PackMapCollideAnimationV13> animations ;
    helpers::Array<PackMapCollideGeometryV13> geometries ;
    helpers::Array<PackMapCollideModelObsV13> obsModels ;
    helpers::Array<PackMapCollideModelPropV13> propModels ;
    helpers::Array<PackMapCollideModelZoneV13> zoneModels ;
};

typedef PackMapCollideV13 Gw2Structhavk;

/* Version: 12, ReferencedFunction: 0x1 */
struct PackMapCollideMeshV12 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<word> surfaces ;
    float moppCodeScale;
    helpers::Array<byte> moppCodeData ;
};

struct PackMapCollideMeshRefV12 {
    qword sequence;
    dword meshIndex;
};

struct PackMapCollideGeometryV12 {
    byte quantizedExtents;
    helpers::Array<PackMapCollideMeshRefV12> meshRefs ;
};

struct PackMapCollideModelObsV12 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapCollideModelPropV12 {
    qword token;
    qword sequence;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideModelZoneV12 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideAiChunkV12 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

struct PackMapCollideV12 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapCollideMeshV12> meshes ;
    helpers::Array<PackMapCollideGeometryV12> geometries ;
    helpers::Array<PackMapCollideModelObsV12> obsModels ;
    helpers::Array<PackMapCollideModelPropV12> propModels ;
    helpers::Array<PackMapCollideModelZoneV12> zoneModels ;
    dword2 aiChunkDims;
    helpers::Array<PackMapCollideAiChunkV12> aiChunks ;
};

typedef PackMapCollideV12 Gw2Structhavk;

/* Version: 11, ReferencedFunction: 0x1 */
struct PackMapCollideMeshV11 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float moppCodeScale;
    helpers::Array<byte> moppCodeData ;
};

struct PackMapCollideMeshRefV11 {
    qword sequence;
    dword meshIndex;
};

struct PackMapCollideGeometryV11 {
    byte quantizedExtents;
    helpers::Array<PackMapCollideMeshRefV11> meshRefs ;
};

struct PackMapCollideModelObsV11 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapCollideModelPropV11 {
    qword token;
    qword sequence;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideModelZoneV11 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideAiChunkV11 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

struct PackMapCollideV11 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapCollideMeshV11> meshes ;
    helpers::Array<PackMapCollideGeometryV11> geometries ;
    helpers::Array<PackMapCollideModelObsV11> obsModels ;
    helpers::Array<PackMapCollideModelPropV11> propModels ;
    helpers::Array<PackMapCollideModelZoneV11> zoneModels ;
    dword2 aiChunkDims;
    helpers::Array<PackMapCollideAiChunkV11> aiChunks ;
};

typedef PackMapCollideV11 Gw2Structhavk;

/* Version: 10, ReferencedFunction: 0x1 */
struct PackMapCollideMeshV10 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float moppCodeScale;
    helpers::Array<byte> moppCodeData ;
};

struct PackMapCollideMeshRefV10 {
    qword sequence;
    dword meshIndex;
};

struct PackMapCollideGeometryV10 {
    helpers::Array<PackMapCollideMeshRefV10> meshRefs ;
};

struct PackMapCollideModelObsV10 {
    dword geometryIndex;
};

struct PackMapCollideModelPropV10 {
    qword token;
    qword sequence;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideModelZoneV10 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideAiChunkV10 {
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

struct PackMapCollideV10 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapCollideMeshV10> meshes ;
    helpers::Array<PackMapCollideGeometryV10> geometries ;
    helpers::Array<PackMapCollideModelObsV10> obsModels ;
    helpers::Array<PackMapCollideModelPropV10> propModels ;
    helpers::Array<PackMapCollideModelZoneV10> zoneModels ;
    float3 aiBoundaryMin;
    float3 aiBoundaryMax;
    dword2 aiChunkDims;
    helpers::Array<PackMapCollideAiChunkV10> aiChunks ;
};

typedef PackMapCollideV10 Gw2Structhavk;

/* Version: 9, ReferencedFunction: 0x1 */
struct PackMapCollideMeshV9 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float moppCodeScale;
    helpers::Array<byte> moppCodeData ;
};

struct PackMapCollideMeshRefV9 {
    qword sequence;
    dword meshIndex;
};

struct PackMapCollideGeometryV9 {
    helpers::Array<PackMapCollideMeshRefV9> meshRefs ;
};

struct PackMapCollideModelObsV9 {
    dword geometryIndex;
};

struct PackMapCollideModelPropV9 {
    qword token;
    qword sequence;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideModelZoneV9 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideAiChunkV9 {
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
};

struct PackMapCollideV9 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapCollideMeshV9> meshes ;
    helpers::Array<PackMapCollideGeometryV9> geometries ;
    helpers::Array<PackMapCollideModelObsV9> obsModels ;
    helpers::Array<PackMapCollideModelPropV9> propModels ;
    helpers::Array<PackMapCollideModelZoneV9> zoneModels ;
    float3 aiBoundaryMin;
    float3 aiBoundaryMax;
    dword2 aiChunkDims;
    helpers::Array<PackMapCollideAiChunkV9> aiChunks ;
};

typedef PackMapCollideV9 Gw2Structhavk;

/* Version: 8, ReferencedFunction: 0x4104204000000001 */
struct PackMapCollideMeshV8 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float moppCodeScale;
    helpers::Array<byte> moppCodeData ;
};

struct PackMapCollideMeshRefV8 {
    qword sequence;
    dword meshIndex;
};

struct PackMapCollideGeometryV8 {
    helpers::Array<PackMapCollideMeshRefV8> meshRefs ;
};

struct PackMapCollideModelPropV8 {
    qword token;
    qword sequence;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideModelZoneV8 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideAiChunkV8 {
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
};

struct PackMapCollideV8 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapCollideMeshV8> meshes ;
    helpers::Array<PackMapCollideGeometryV8> geometries ;
    helpers::Array<PackMapCollideModelPropV8> propModels ;
    helpers::Array<PackMapCollideModelZoneV8> zoneModels ;
    float3 aiBoundaryMin;
    float3 aiBoundaryMax;
    dword2 aiChunkDims;
    helpers::Array<PackMapCollideAiChunkV8> aiChunks ;
};

typedef PackMapCollideV8 Gw2Structhavk;

/* Version: 7, ReferencedFunction: 0x1 */
struct PackMapCollideMoppCodeV7 {
    helpers::Array<byte> cookedData ;
};

struct PackMapCollideMeshSizeV7 {
    float scale;
    dword moppCodeIndex;
};

struct PackMapCollideMeshV7 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<PackMapCollideMeshSizeV7> sizes ;
};

struct PackMapCollideMeshRefV7 {
    qword sequence;
    dword meshIndex;
};

struct PackMapCollideGeometryV7 {
    helpers::Array<PackMapCollideMeshRefV7> meshRefs ;
};

struct PackMapCollideModelPropV7 {
    qword token;
    qword sequence;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideModelZoneV7 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideAiChunkV7 {
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
};

struct PackMapCollideV7 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapCollideMoppCodeV7> moppCodes ;
    helpers::Array<PackMapCollideMeshV7> meshes ;
    helpers::Array<PackMapCollideGeometryV7> geometries ;
    helpers::Array<PackMapCollideModelPropV7> propModels ;
    helpers::Array<PackMapCollideModelZoneV7> zoneModels ;
    float3 aiBoundaryMin;
    float3 aiBoundaryMax;
    dword2 aiChunkDims;
    helpers::Array<PackMapCollideAiChunkV7> aiChunks ;
};

typedef PackMapCollideV7 Gw2Structhavk;

/* Version: 6, ReferencedFunction: 0x1 */
struct PackMapCollideMoppCodeV6 {
    helpers::Array<byte> cookedData ;
};

struct PackMapCollideMeshSizeV6 {
    float scale;
    dword moppCodeIndex;
};

struct PackMapCollideMeshV6 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<PackMapCollideMeshSizeV6> sizes ;
};

struct PackMapCollideMeshRefV6 {
    qword sequence;
    dword meshIndex;
};

struct PackMapCollideGeometryV6 {
    helpers::Array<PackMapCollideMeshRefV6> meshRefs ;
};

struct PackMapCollideModelPropV6 {
    qword token;
    qword sequence;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideModelZoneV6 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapCollideV6 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapCollideMoppCodeV6> moppCodes ;
    helpers::Array<PackMapCollideMeshV6> meshes ;
    helpers::Array<PackMapCollideGeometryV6> geometries ;
    helpers::Array<PackMapCollideModelPropV6> propModels ;
    helpers::Array<PackMapCollideModelZoneV6> zoneModels ;
};

typedef PackMapCollideV6 Gw2Structhavk;


/* ===============================================
 * Chunk: nm15, versions: 4, strucTab: 0x141F9D300
 * ===============================================
 */

/* Version: 3, ReferencedFunction: 0x1 */
struct PackMapNavMeshChunkV3 {
    dword chunkIndex;
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

typedef PackMapNavMeshChunkV3 Gw2Structnm15;

/* Version: 2, ReferencedFunction: 0x1 */
struct PackMapNavMeshChunkV2 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

typedef PackMapNavMeshChunkV2 Gw2Structnm15;

/* Version: 1, ReferencedFunction: 0x41046B0000000001 */
struct PackMapNavMeshChunkV1 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

typedef PackMapNavMeshChunkV1 Gw2Structnm15;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapNavMeshChunkV0 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

typedef PackMapNavMeshChunkV0 Gw2Structnm15;


/* ===============================================
 * Chunk: area, versions: 5, strucTab: 0x141F9CAB0
 * ===============================================
 */

/* Version: 4, ReferencedFunction: 0x41046A4000000001 */
struct PackMapAreaPolygonV4 {
    helpers::Array<float3> points ;
    float height;
};

struct PackMapAreaPortalV4 {
    float3 position;
    float3 extents;
    float3 rotation;
};

struct PackMapAreaVolumeV4 {
    helpers::Array<PackMapAreaPortalV4> portals ;
    float3 position;
    float3 extents;
    float3 pointInterior;
    float3 pointExterior;
};

struct PackMapAreaV4 {
    qword token;
    byte type;
    byte floor;
    dword flags;
    PackMapAreaPolygonV4 polygon;
    PackMapAreaVolumeV4 volume;
};

struct PackMapAreaToolV4 {
    helpers::WString annotation;
    float renderOffset;
};

struct PackMapAreasV4 {
    helpers::Array<PackMapAreaV4> areas ;
    helpers::Array<PackMapAreaToolV4> areaTools ;
};

typedef PackMapAreasV4 Gw2Structarea;

/* Version: 3, ReferencedFunction: 0x1 */
struct PackMapAreaPolygonV3 {
    helpers::Array<float3> points ;
    float height;
};

struct PackMapAreaPortalV3 {
    float3 position;
    float3 extents;
    float3 rotation;
};

struct PackMapAreaVolumeV3 {
    helpers::Array<PackMapAreaPortalV3> portals ;
    float3 position;
    float3 extents;
    float3 pointInterior;
    float3 pointExterior;
};

struct PackMapAreaV3 {
    qword token;
    byte type;
    byte floor;
    dword flags;
    PackMapAreaPolygonV3 polygon;
    PackMapAreaVolumeV3 volume;
};

struct PackMapAreaToolV3 {
    helpers::WString annotation;
    float renderOffset;
};

struct PackMapAreasV3 {
    helpers::Array<PackMapAreaV3> areas ;
    helpers::Array<PackMapAreaToolV3> areaTools ;
};

typedef PackMapAreasV3 Gw2Structarea;

/* Version: 2, ReferencedFunction: 0x1 */
struct PackMapAreaPolygonV2 {
    helpers::Array<float3> points ;
    float height;
};

struct PackMapAreaPortalV2 {
    float3 position;
    float3 extents;
    float3 rotation;
};

struct PackMapAreaVolumeV2 {
    helpers::Array<PackMapAreaPortalV2> portals ;
    float3 position;
    float3 extents;
    float3 pointInterior;
    float3 pointExterior;
};

struct PackMapAreaV2 {
    qword token;
    byte type;
    byte floor;
    dword flags;
    PackMapAreaPolygonV2 polygon;
    PackMapAreaVolumeV2 volume;
};

struct PackMapAreaToolV2 {
    helpers::WString annotation;
};

struct PackMapAreasV2 {
    helpers::Array<PackMapAreaV2> areas ;
    helpers::Array<PackMapAreaToolV2> areaTools ;
};

typedef PackMapAreasV2 Gw2Structarea;

/* Version: 1, ReferencedFunction: 0x41046A3000000001 */
struct PackMapAreaPolygonV1 {
    helpers::Array<float3> points ;
    float height;
};

struct PackMapAreaPortalV1 {
    float3 position;
    float3 extents;
    float3 rotation;
};

struct PackMapAreaVolumeV1 {
    helpers::Array<PackMapAreaPortalV1> portals ;
    float3 position;
    float3 extents;
    float3 pointInterior;
    float3 pointExterior;
};

struct PackMapAreaV1 {
    qword token;
    byte type;
    byte floor;
    PackMapAreaPolygonV1 polygon;
    PackMapAreaVolumeV1 volume;
};

struct PackMapAreasV1 {
    helpers::Array<PackMapAreaV1> areas ;
};

typedef PackMapAreasV1 Gw2Structarea;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapAreaV0 {
    float3 min;
    float3 max;
    float3 internal;
    float3 external;
    dword token;
    dword flags;
};

struct PackMapPortalV0 {
    helpers::Array<float3> portalVerts ;
};

struct PackMapAreasV0 {
    helpers::Array<PackMapAreaV0> areas ;
    helpers::Array<PackMapPortalV0> portals ;
};

typedef PackMapAreasV0 Gw2Structarea;


/* ===============================================
 * Chunk: audi, versions: 9, strucTab: 0x141F9CCD0
 * ===============================================
 */

/* Version: 8, ReferencedFunction: 0x1 */
struct PackMapAudioRegion {
    dword regionType;
    dword overrideMode;
    helpers::FileName filenameSourceDay;
    helpers::FileName filenameAmbientDay;
    helpers::FileName filenameSourceNight;
    helpers::FileName filenameAmbientNight;
    helpers::FileName filenameInterior;
    float exteriorVolume;
    dword priority;
    helpers::Array<float3> points ;
    float3 position;
    float3 orientation;
    float fadeBand;
    float height;
    float radius;
    qword guid;
    dword flags;
};

struct PackMapAudioRegionTool {
    helpers::WString annotation;
};

struct PackMapAudioDep {
    helpers::FileName dependency;
    dword flags;
};

struct MapAudio {
    helpers::FileName filenameAmbientDaySurface;
    helpers::FileName filenameAmbientDayUnderwater;
    helpers::FileName filenameAmbientNightSurface;
    helpers::FileName filenameAmbientNightUnderwater;
    helpers::Array<PackMapAudioRegion> audioRegions ;
    helpers::Array<PackMapAudioRegionTool> audioRegionTools ;
    helpers::Array<PackMapAudioDep> audioDepArray ;
};

typedef MapAudio Gw2Structaudi;

/* Version: 7, ReferencedFunction: 0x1 */
struct PackMapAudioRegion {
    dword regionType;
    dword overrideMode;
    helpers::FileName filenameSourceDay;
    helpers::FileName filenameAmbientDay;
    helpers::FileName filenameSourceNight;
    helpers::FileName filenameAmbientNight;
    helpers::FileName filenameInterior;
    float exteriorVolume;
    dword priority;
    helpers::Array<float3> points ;
    float3 position;
    float3 orientation;
    float fadeBand;
    float height;
    float radius;
    qword guid;
    dword flags;
};

struct PackMapAudioRegionTool {
    helpers::WString annotation;
};

struct MapAudio {
    helpers::FileName filenameAmbientDaySurface;
    helpers::FileName filenameAmbientDayUnderwater;
    helpers::FileName filenameAmbientNightSurface;
    helpers::FileName filenameAmbientNightUnderwater;
    helpers::Array<PackMapAudioRegion> audioRegions ;
    helpers::Array<PackMapAudioRegionTool> audioRegionTools ;
};

typedef MapAudio Gw2Structaudi;

/* Version: 6, ReferencedFunction: 0x1 */
struct PackMapAudioRegion {
    dword regionType;
    dword overrideMode;
    helpers::FileName filenameSourceDay;
    helpers::FileName filenameAmbientDay;
    helpers::FileName filenameSourceNight;
    helpers::FileName filenameAmbientNight;
    helpers::FileName filenameInterior;
    float exteriorVolume;
    dword priority;
    helpers::Array<float3> points ;
    float3 position;
    float3 orientation;
    float fadeBand;
    float height;
    float radius;
    qword guid;
    dword flags;
};

struct MapAudio {
    helpers::FileName filenameAmbientDaySurface;
    helpers::FileName filenameAmbientDayUnderwater;
    helpers::FileName filenameAmbientNightSurface;
    helpers::FileName filenameAmbientNightUnderwater;
    helpers::Array<PackMapAudioRegion> audioRegions ;
};

typedef MapAudio Gw2Structaudi;

/* Version: 5, ReferencedFunction: 0x1 */
struct PackMapAudioRegion {
    dword regionType;
    dword overrideMode;
    helpers::FileName filenameSourceDay;
    helpers::FileName filenameAmbientDay;
    helpers::FileName filenameSourceNight;
    helpers::FileName filenameAmbientNight;
    helpers::Array<float3> points ;
    float3 position;
    float3 orientation;
    float fadeBand;
    float height;
    float radius;
    qword guid;
    dword flags;
};

struct MapAudio {
    helpers::FileName filenameAmbientDaySurface;
    helpers::FileName filenameAmbientDayUnderwater;
    helpers::FileName filenameAmbientNightSurface;
    helpers::FileName filenameAmbientNightUnderwater;
    helpers::Array<PackMapAudioRegion> audioRegions ;
};

typedef MapAudio Gw2Structaudi;

/* Version: 4, ReferencedFunction: 0x4103F3D000000001 */
struct PackMapAudioRegion {
    dword regionType;
    dword overrideMode;
    helpers::FileName filenameSourceDay;
    helpers::FileName filenameAmbientDay;
    helpers::FileName filenameMusicDay;
    helpers::FileName filenameSourceNight;
    helpers::FileName filenameAmbientNight;
    helpers::FileName filenameMusicNight;
    helpers::Array<float3> points ;
    float3 position;
    float3 orientation;
    float fadeBand;
    float height;
    float radius;
    qword guid;
};

struct MapAudio {
    helpers::FileName filenameAmbientDaySurface;
    helpers::FileName filenameMusicDaySurface;
    helpers::FileName filenameAmbientDayUnderwater;
    helpers::FileName filenameMusicDayUnderwater;
    helpers::FileName filenameAmbientNightSurface;
    helpers::FileName filenameMusicNightSurface;
    helpers::FileName filenameAmbientNightUnderwater;
    helpers::FileName filenameMusicNightUnderwater;
    helpers::Array<PackMapAudioRegion> audioRegions ;
};

typedef MapAudio Gw2Structaudi;

/* Version: 3, ReferencedFunction: 0x4103F2A000000001 */
struct PackMapAudioRegion {
    dword regionType;
    dword overrideMode;
    helpers::FileName filenameSourceDay;
    helpers::FileName filenameAmbientDay;
    helpers::FileName filenameMusicDay;
    helpers::FileName filenameSourceNight;
    helpers::FileName filenameAmbientNight;
    helpers::FileName filenameMusicNight;
    helpers::Array<float3> points ;
    float3 position;
    float3 orientation;
    float fadeBand;
    float height;
    float radius;
};

struct MapAudio {
    helpers::FileName filenameAmbientDaySurface;
    helpers::FileName filenameMusicDaySurface;
    helpers::FileName filenameAmbientDayUnderwater;
    helpers::FileName filenameMusicDayUnderwater;
    helpers::FileName filenameAmbientNightSurface;
    helpers::FileName filenameMusicNightSurface;
    helpers::FileName filenameAmbientNightUnderwater;
    helpers::FileName filenameMusicNightUnderwater;
    helpers::Array<PackMapAudioRegion> audioRegions ;
};

typedef MapAudio Gw2Structaudi;

/* Version: 2, ReferencedFunction: 0x1 */
struct PackMapAudioRegion {
    dword regionType;
    dword overrideMode;
    helpers::FileName filenameSource;
    helpers::FileName filenameAmbient;
    helpers::FileName filenameMusic;
    helpers::Array<float3> points ;
    float3 position;
    float3 orientation;
    float fadeBand;
    float height;
    float radius;
};

struct MapAudio {
    helpers::FileName globalAmbientScriptFilename;
    helpers::FileName globalMusicScriptFilename;
    helpers::FileName globalAmbientUnderwaterScriptFilename;
    helpers::FileName globalMusicUnderwaterScriptFilename;
    helpers::Array<PackMapAudioRegion> audioRegions ;
};

typedef MapAudio Gw2Structaudi;

/* Version: 1, ReferencedFunction: 0x1 */
struct PackMapAudioRegion {
    dword regionType;
    dword overrideMode;
    helpers::FileName filenameSource;
    helpers::FileName filenameAmbient;
    helpers::FileName filenameMusic;
    helpers::Array<float3> points ;
    float3 position;
    float3 orientation;
    float fadeBand;
    float height;
    float radius;
};

struct MapAudio {
    helpers::FileName globalAmbientScriptFilename;
    helpers::FileName globalMusicScriptFilename;
    helpers::Array<PackMapAudioRegion> audioRegions ;
};

typedef MapAudio Gw2Structaudi;

/* Version: 0, ReferencedFunction: 0x1 */
struct MapAudio {
    helpers::FileName globalAmbientScriptFilename;
    helpers::FileName globalMusicScriptFilename;
};

typedef MapAudio Gw2Structaudi;


/* ===============================================
 * Chunk: bloc, versions: 1, strucTab: 0x141F9D590
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapBlockRecord {
    helpers::FileName filename;
};

struct PackMapBlock {
    dword2 blockDims;
    helpers::Array<PackMapBlockRecord> blockRecordArray ;
};

typedef PackMapBlock Gw2Structbloc;


/* ===============================================
 * Chunk: cg15, versions: 1, strucTab: 0x141F9D510
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapCoarseNavGraphNodeV0 {
    dword materialId;
    float3 bottomLeftBound;
    float3 topRightBound;
    float3 centroid;
    helpers::Array<dword> faces ;
};

struct PackMapCoarseNavGraphConnectionEdgeV0 {
    float3 edgeStart;
    float3 edgeEnd;
};

struct PackMapCoarseNavGraphConnectionV0 {
    dword targetSectionUid;
    dword targetNodeIndex;
    helpers::Array<PackMapCoarseNavGraphConnectionEdgeV0> edges ;
};

struct PackMapCoarseNavGraphNodeConnectionsV0 {
    dword nodeIndex;
    helpers::Array<PackMapCoarseNavGraphConnectionV0> connections ;
};

struct PackMapCoarseNavGraphSectionV0 {
    dword sectionUid;
    helpers::Array<PackMapCoarseNavGraphNodeV0> nodes ;
    helpers::Array<PackMapCoarseNavGraphNodeConnectionsV0> nodeConnections ;
};

struct PackMapCoarseNavGraphV0 {
    helpers::Array<PackMapCoarseNavGraphSectionV0> sections ;
};

typedef PackMapCoarseNavGraphV0 Gw2Structcg15;


/* ===============================================
 * Chunk: cube, versions: 5, strucTab: 0x141F9D670
 * ===============================================
 */

/* Version: 4, ReferencedFunction: 0x1 */
struct PackMapCubeMapSampleV4 {
    float3 position;
    helpers::FileName filenameDayDefault;
    helpers::FileName filenameNightDefault;
    helpers::FileName filenameDayScript;
    helpers::FileName filenameNightScript;
    helpers::FileName filenameDayDefaultHiRes;
    helpers::FileName filenameNightDefaultHiRes;
    helpers::FileName filenameDayScriptHiRes;
    helpers::FileName filenameNightScriptHiRes;
    qword envID;
};

struct PackMapCubeMapParamsV4 {
    dword modulateColor;
    float brightness;
    float contrast;
    dword blurPasses;
    helpers::WString envVolume;
};

struct PackMapCubeMapV4 {
    helpers::Array<PackMapCubeMapSampleV4> sampleArray ;
    helpers::Array<PackMapCubeMapParamsV4> paramsArray ;
};

typedef PackMapCubeMapV4 Gw2Structcube;

/* Version: 3, ReferencedFunction: 0x1 */
struct PackMapCubeMapSampleV3 {
    float3 position;
    helpers::FileName filenameDayDefault;
    helpers::FileName filenameNightDefault;
    helpers::FileName filenameDayScript;
    helpers::FileName filenameNightScript;
    qword envID;
};

struct PackMapCubeMapParamsV3 {
    dword modulateColor;
    float brightness;
    float contrast;
    dword blurPasses;
    helpers::WString envVolume;
};

struct PackMapCubeMapV3 {
    helpers::Array<PackMapCubeMapSampleV3> sampleArray ;
    helpers::Array<PackMapCubeMapParamsV3> paramsArray ;
};

typedef PackMapCubeMapV3 Gw2Structcube;

/* Version: 2, ReferencedFunction: 0x4016287000000001 */
struct PackMapCubeMapSampleV2 {
    float3 position;
    helpers::FileName filenameDayDefault;
    helpers::FileName filenameNightDefault;
    helpers::FileName filenameDayScript;
    helpers::FileName filenameNightScript;
};

struct PackMapCubeMapParamsV2 {
    dword modulateColor;
    float brightness;
    float contrast;
    dword blurPasses;
};

struct PackMapCubeMapV2 {
    helpers::Array<PackMapCubeMapSampleV2> sampleArray ;
    helpers::Array<PackMapCubeMapParamsV2> paramsArray ;
};

typedef PackMapCubeMapV2 Gw2Structcube;

/* Version: 1, ReferencedFunction: 0x41044A9000000001 */
struct PackMapCubeMapSampleV1 {
    float3 position;
    dword flags;
    helpers::Array<byte> dayPtr ;
    helpers::Array<byte> nightPtr ;
};

struct PackMapCubeMapParamsV1 {
    dword modulateColor;
    float brightness;
    float contrast;
    dword blurPasses;
};

struct PackMapCubeMapV1 {
    helpers::Array<PackMapCubeMapSampleV1> sampleArray ;
    helpers::Array<PackMapCubeMapParamsV1> paramsArray ;
};

typedef PackMapCubeMapV1 Gw2Structcube;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapCubeMapSampleV0 {
    float3 position;
    dword flags;
    helpers::Array<byte> dataPtr ;
};

struct PackMapCubeMapParamsV0 {
    dword modulateColor;
    float brightness;
    float contrast;
    dword blurPasses;
};

struct PackMapCubeMapV0 {
    helpers::Array<PackMapCubeMapSampleV0> sampleArray ;
    helpers::Array<PackMapCubeMapParamsV0> paramsArray ;
};

typedef PackMapCubeMapV0 Gw2Structcube;


/* ===============================================
 * Chunk: env, versions: 78, strucTab: 0x141F9E660
 * ===============================================
 */

/* Version: 77, ReferencedFunction: 0x41041B5000000001 */
struct PackMapEnvDataLightV76 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV76 {
    helpers::PtrStruct<PackMapEnvDataLightV76> lights ;
    float shadowInfluence;
    byte3 backlightColor;
    float backlightIntensity;
};

struct PackMapEnvDataLightingCharV47 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV47 {
    helpers::Array<PackMapEnvDataLightingCharV47> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV76 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
    dword reserved;
};

struct PackMapEnvDataLayerV76 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV76> attributes ;
    helpers::WString name;
    dword reserved;
};

struct PackMapEnvDataCloudsV76 {
    helpers::Array<PackMapEnvDataLayerV76> layers ;
};

struct PackMapEnvDataColoredLightRingsV47 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectExV47 {
    dword dummy;
};

struct PackMapEnvDataEffectV76 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float ssaoAmount;
    float ssaoBrighten;
    float ssaoContrast;
    float ssaoSunScale;
    dword flags;
    helpers::FileName clutTexturePath;
    helpers::Ptr<PackMapEnvDataEffectExV47> ext ;
};

struct PackMapEnvDataHazeV76 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV76 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    float texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
    dword reserved;
};

struct PackMapEnvDataPFieldCutoutV47 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV76 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvLensFlareAtomV47 {
    dword rows;
    dword columns;
    dword start;
    float fps;
    byte4 color;
    float2 offset;
    float2 scale;
    float baseRotation;
    float cameraRotation;
    byte flags;
};

struct PackMapEnvLensFlareTextureV47 {
    helpers::FileName texture;
};

struct PackMapEnvDataShaderConstantV47 {
    dword token;
    float4 value;
};

struct PackMapEnvLensFlareV47 {
    helpers::Array<PackMapEnvLensFlareAtomV47> atoms ;
    helpers::Array<PackMapEnvLensFlareTextureV47> textures ;
    helpers::FileName material;
    float2 fadeBand;
    float2 reverseFadeBand;
    float opacityCoeff;
    byte flags;
    helpers::Array<PackMapEnvDataShaderConstantV47> constants ;
};

struct PackMapEnvDataSkyCardAttributesExV47 {
    dword dummy;
};

struct PackMapEnvDataSkyCardAttributesV76 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
    helpers::Ptr<PackMapEnvLensFlareV47> lensFlare ;
    helpers::Ptr<PackMapEnvDataSkyCardAttributesExV47> ext ;
};

struct PackMapEnvDataShaderTextureV47 {
    helpers::FileName filename;
    float4 textureUV;
};

struct PackEnvDataSkyCardAnimationV47 {
    float2 textureAnimTranslation;
    float2 textureAnimScaleRangeX;
    float2 textureAnimScaleRangeY;
    float2 textureAnimScaleSpeed;
    float textureAnimRotation;
    dword texCoords;
};

struct PackMapEnvDataSkycardFlipbookV47 {
    dword rows;
    dword columns;
    dword start;
    dword count;
    float fps;
};

struct PackMapEnvDataSkyCardMaterialV47 {
    helpers::FileName filename;
    helpers::Array<PackMapEnvDataShaderConstantV47> constants ;
    helpers::Array<PackMapEnvDataShaderTextureV47> textures ;
    PackEnvDataSkyCardAnimationV47 textureAnimation;
    PackMapEnvDataSkycardFlipbookV47 flipbook;
};

struct PackMapEnvDataSkyCardExV47 {
    dword dummy;
};

struct PackMapEnvDataSkyCardV76 {
    PackMapEnvDataSkyCardAttributesV76 day;
    PackMapEnvDataSkyCardAttributesV76 night;
    dword flags;
    helpers::WString name;
    float3 location;
    helpers::Ptr<PackMapEnvDataSkyCardMaterialV47> material ;
    helpers::Ptr<PackMapEnvDataSkyCardExV47> ext ;
};

struct PackMapEnvDataSkyCardsV76 {
    helpers::Array<PackMapEnvDataSkyCardV76> cards ;
};

struct PackMapEnvDataSpawnModelDataV47 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    qword animSequence;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV47 {
    helpers::Array<PackMapEnvDataSpawnModelDataV47> spawns ;
};

struct PackMapEnvDataSpawnGroupsV47 {
    helpers::Array<PackMapEnvDataSpawnListV47> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV76 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV76 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataAudioV47 {
    qword token;
};

struct PackMapEnvDataBaseEx2V47 {
    dword dummy;
};

struct PackMapEnvDataBaseExV47 {
    helpers::Ptr<PackMapEnvDataBaseEx2V47> ext2 ;
    float brightTime;
    float dimTime;
    float darkCoeff;
    float darkExp;
    float darkMin;
    float darkMax;
    float brightMin;
    float brightMax;
    float brightScale;
    float darkScale;
    float4 waterReflectionParams;
};

struct PackMapEnvDataShapeV47 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV76 {
    helpers::Array<PackMapEnvDataLightingV76> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV47> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV76> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV47> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV76> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV76> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV76> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV47> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV76> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV76> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV47> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV76> water ;
    helpers::PtrStruct<PackMapEnvDataWindV76> wind ;
    helpers::PtrStruct<PackMapEnvDataAudioV47> audio ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    dword flags;
    helpers::Ptr<PackMapEnvDataBaseExV47> ext ;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV47> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV76 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataSkyModeCubeTexV47 {
    helpers::FileName texPathE;
    helpers::FileName texPathW;
    helpers::FileName texPathN;
    helpers::FileName texPathS;
    helpers::FileName texPathB;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV76 {
    helpers::Array<PackMapEnvDataLightingV76> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV47> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV76> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV47> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV76> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV76> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV76> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV47> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV76> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV76> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV47> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV76> water ;
    helpers::PtrStruct<PackMapEnvDataWindV76> wind ;
    helpers::PtrStruct<PackMapEnvDataAudioV47> audio ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    dword flags;
    helpers::Ptr<PackMapEnvDataBaseExV47> ext ;
    helpers::Array<PackMapEnvDataSkyModeTexV76> skyModeTex ;
    helpers::FileName starFile;
    helpers::Array<PackMapEnvDataSkyModeCubeTexV47> skyModeCubeTex ;
};

struct PackMapEnvDataOverrideV77 {
    helpers::Array<PackMapEnvDataLightingV76> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV47> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV76> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV47> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV76> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV76> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV76> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV47> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV76> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV76> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV47> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV76> water ;
    helpers::PtrStruct<PackMapEnvDataWindV76> wind ;
    helpers::PtrStruct<PackMapEnvDataAudioV47> audio ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    dword flags;
    helpers::Ptr<PackMapEnvDataBaseExV47> ext ;
    helpers::Array<PackMapEnvDataSkyModeTexV76> skyModeTex ;
    helpers::FileName starFile;
    helpers::Array<PackMapEnvDataSkyModeCubeTexV47> skyModeCubeTex ;
    qword token;
    qword guid;
};

struct PackMapEnvironmentV77 {
    helpers::Array<PackMapEnvDataLocalV76> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV76> dataGlobal ;
    helpers::Array<PackMapEnvDataOverrideV77> dataOverrideArray ;
};

typedef PackMapEnvironmentV77 Gw2Structenv;

/* Version: 76, ReferencedFunction: 0x41041B3000000001 */
struct PackMapEnvDataLightV76 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV76 {
    helpers::PtrStruct<PackMapEnvDataLightV76> lights ;
    float shadowInfluence;
    byte3 backlightColor;
    float backlightIntensity;
};

struct PackMapEnvDataLightingCharV47 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV47 {
    helpers::Array<PackMapEnvDataLightingCharV47> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV76 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
    dword reserved;
};

struct PackMapEnvDataLayerV76 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV76> attributes ;
    helpers::WString name;
    dword reserved;
};

struct PackMapEnvDataCloudsV76 {
    helpers::Array<PackMapEnvDataLayerV76> layers ;
};

struct PackMapEnvDataColoredLightRingsV47 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectExV47 {
    dword dummy;
};

struct PackMapEnvDataEffectV76 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float ssaoAmount;
    float ssaoBrighten;
    float ssaoContrast;
    float ssaoSunScale;
    dword flags;
    helpers::FileName clutTexturePath;
    helpers::Ptr<PackMapEnvDataEffectExV47> ext ;
};

struct PackMapEnvDataHazeV76 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV76 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    float texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
    dword reserved;
};

struct PackMapEnvDataPFieldCutoutV47 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV76 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvLensFlareAtomV47 {
    dword rows;
    dword columns;
    dword start;
    float fps;
    byte4 color;
    float2 offset;
    float2 scale;
    float baseRotation;
    float cameraRotation;
    byte flags;
};

struct PackMapEnvLensFlareTextureV47 {
    helpers::FileName texture;
};

struct PackMapEnvDataShaderConstantV47 {
    dword token;
    float4 value;
};

struct PackMapEnvLensFlareV47 {
    helpers::Array<PackMapEnvLensFlareAtomV47> atoms ;
    helpers::Array<PackMapEnvLensFlareTextureV47> textures ;
    helpers::FileName material;
    float2 fadeBand;
    float2 reverseFadeBand;
    float opacityCoeff;
    byte flags;
    helpers::Array<PackMapEnvDataShaderConstantV47> constants ;
};

struct PackMapEnvDataSkyCardAttributesExV47 {
    dword dummy;
};

struct PackMapEnvDataSkyCardAttributesV76 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
    helpers::Ptr<PackMapEnvLensFlareV47> lensFlare ;
    helpers::Ptr<PackMapEnvDataSkyCardAttributesExV47> ext ;
};

struct PackMapEnvDataShaderTextureV47 {
    helpers::FileName filename;
    float4 textureUV;
};

struct PackEnvDataSkyCardAnimationV47 {
    float2 textureAnimTranslation;
    float2 textureAnimScaleRangeX;
    float2 textureAnimScaleRangeY;
    float2 textureAnimScaleSpeed;
    float textureAnimRotation;
    dword texCoords;
};

struct PackMapEnvDataSkycardFlipbookV47 {
    dword rows;
    dword columns;
    dword start;
    dword count;
    float fps;
};

struct PackMapEnvDataSkyCardMaterialV47 {
    helpers::FileName filename;
    helpers::Array<PackMapEnvDataShaderConstantV47> constants ;
    helpers::Array<PackMapEnvDataShaderTextureV47> textures ;
    PackEnvDataSkyCardAnimationV47 textureAnimation;
    PackMapEnvDataSkycardFlipbookV47 flipbook;
};

struct PackMapEnvDataSkyCardExV47 {
    dword dummy;
};

struct PackMapEnvDataSkyCardV76 {
    PackMapEnvDataSkyCardAttributesV76 day;
    PackMapEnvDataSkyCardAttributesV76 night;
    dword flags;
    helpers::WString name;
    float3 location;
    helpers::Ptr<PackMapEnvDataSkyCardMaterialV47> material ;
    helpers::Ptr<PackMapEnvDataSkyCardExV47> ext ;
};

struct PackMapEnvDataSkyCardsV76 {
    helpers::Array<PackMapEnvDataSkyCardV76> cards ;
};

struct PackMapEnvDataSpawnModelDataV47 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    qword animSequence;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV47 {
    helpers::Array<PackMapEnvDataSpawnModelDataV47> spawns ;
};

struct PackMapEnvDataSpawnGroupsV47 {
    helpers::Array<PackMapEnvDataSpawnListV47> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV76 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV76 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataAudioV47 {
    qword token;
};

struct PackMapEnvDataBaseEx2V47 {
    dword dummy;
};

struct PackMapEnvDataBaseExV47 {
    helpers::Ptr<PackMapEnvDataBaseEx2V47> ext2 ;
    float brightTime;
    float dimTime;
    float darkCoeff;
    float darkExp;
    float darkMin;
    float darkMax;
    float brightMin;
    float brightMax;
    float brightScale;
    float darkScale;
    float4 waterReflectionParams;
};

struct PackMapEnvDataShapeV47 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV76 {
    helpers::Array<PackMapEnvDataLightingV76> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV47> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV76> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV47> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV76> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV76> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV76> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV47> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV76> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV76> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV47> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV76> water ;
    helpers::PtrStruct<PackMapEnvDataWindV76> wind ;
    helpers::PtrStruct<PackMapEnvDataAudioV47> audio ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    dword flags;
    helpers::Ptr<PackMapEnvDataBaseExV47> ext ;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV47> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV76 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataSkyModeCubeTexV47 {
    helpers::FileName texPathE;
    helpers::FileName texPathW;
    helpers::FileName texPathN;
    helpers::FileName texPathS;
    helpers::FileName texPathB;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV76 {
    helpers::Array<PackMapEnvDataLightingV76> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV47> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV76> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV47> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV76> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV76> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV76> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV47> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV76> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV76> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV47> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV76> water ;
    helpers::PtrStruct<PackMapEnvDataWindV76> wind ;
    helpers::PtrStruct<PackMapEnvDataAudioV47> audio ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    dword flags;
    helpers::Ptr<PackMapEnvDataBaseExV47> ext ;
    helpers::Array<PackMapEnvDataSkyModeTexV76> skyModeTex ;
    helpers::FileName starFile;
    helpers::Array<PackMapEnvDataSkyModeCubeTexV47> skyModeCubeTex ;
};

struct PackMapEnvironmentV76 {
    helpers::Array<PackMapEnvDataLocalV76> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV76> dataGlobal ;
};

typedef PackMapEnvironmentV76 Gw2Structenv;

/* Version: 75, ReferencedFunction: 0x41041A8000000001 */
struct PackMapEnvDataLightV75 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV75 {
    helpers::PtrStruct<PackMapEnvDataLightV75> lights ;
    float shadowInfluence;
    byte3 backlightColor;
    float backlightIntensity;
};

struct PackMapEnvDataLightingCharV46 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV46 {
    helpers::Array<PackMapEnvDataLightingCharV46> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV75 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
    dword reserved;
};

struct PackMapEnvDataLayerV75 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV75> attributes ;
    helpers::WString name;
    dword reserved;
};

struct PackMapEnvDataCloudsV75 {
    helpers::Array<PackMapEnvDataLayerV75> layers ;
};

struct PackMapEnvDataColoredLightRingsV46 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectExV46 {
    dword dummy;
};

struct PackMapEnvDataEffectV75 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float ssaoAmount;
    float ssaoBrighten;
    float ssaoContrast;
    float ssaoSunScale;
    dword flags;
    helpers::FileName clutTexturePath;
    helpers::Ptr<PackMapEnvDataEffectExV46> ext ;
};

struct PackMapEnvDataHazeV75 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV75 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    float texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
    dword reserved;
};

struct PackMapEnvDataPFieldCutoutV46 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV75 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvLensFlareAtomV46 {
    dword rows;
    dword columns;
    dword start;
    float fps;
    byte4 color;
    float2 offset;
    float2 scale;
    float baseRotation;
    float cameraRotation;
    byte flags;
};

struct PackMapEnvLensFlareTextureV46 {
    helpers::FileName texture;
};

struct PackMapEnvDataShaderConstantV46 {
    dword token;
    float4 value;
};

struct PackMapEnvLensFlareV46 {
    helpers::Array<PackMapEnvLensFlareAtomV46> atoms ;
    helpers::Array<PackMapEnvLensFlareTextureV46> textures ;
    helpers::FileName material;
    float2 fadeBand;
    float2 reverseFadeBand;
    float opacityCoeff;
    byte flags;
    helpers::Array<PackMapEnvDataShaderConstantV46> constants ;
};

struct PackMapEnvDataSkyCardAttributesExV46 {
    dword dummy;
};

struct PackMapEnvDataSkyCardAttributesV75 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
    helpers::Ptr<PackMapEnvLensFlareV46> lensFlare ;
    helpers::Ptr<PackMapEnvDataSkyCardAttributesExV46> ext ;
};

struct PackMapEnvDataShaderTextureV46 {
    helpers::FileName filename;
    float4 textureUV;
};

struct PackEnvDataSkyCardAnimationV46 {
    float2 textureAnimTranslation;
    float2 textureAnimScaleRangeX;
    float2 textureAnimScaleRangeY;
    float2 textureAnimScaleSpeed;
    float textureAnimRotation;
    dword texCoords;
};

struct PackMapEnvDataSkycardFlipbookV46 {
    dword rows;
    dword columns;
    dword start;
    dword count;
    float fps;
};

struct PackMapEnvDataSkyCardMaterialV46 {
    helpers::FileName filename;
    helpers::Array<PackMapEnvDataShaderConstantV46> constants ;
    helpers::Array<PackMapEnvDataShaderTextureV46> textures ;
    PackEnvDataSkyCardAnimationV46 textureAnimation;
    PackMapEnvDataSkycardFlipbookV46 flipbook;
};

struct PackMapEnvDataSkyCardExV46 {
    dword dummy;
};

struct PackMapEnvDataSkyCardV75 {
    PackMapEnvDataSkyCardAttributesV75 day;
    PackMapEnvDataSkyCardAttributesV75 night;
    dword flags;
    helpers::WString name;
    float3 location;
    helpers::Ptr<PackMapEnvDataSkyCardMaterialV46> material ;
    helpers::Ptr<PackMapEnvDataSkyCardExV46> ext ;
};

struct PackMapEnvDataSkyCardsV75 {
    helpers::Array<PackMapEnvDataSkyCardV75> cards ;
};

struct PackMapEnvDataSpawnModelDataV46 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    qword animSequence;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV46 {
    helpers::Array<PackMapEnvDataSpawnModelDataV46> spawns ;
};

struct PackMapEnvDataSpawnGroupsV46 {
    helpers::Array<PackMapEnvDataSpawnListV46> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV75 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV75 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataAudioV46 {
    qword token;
};

struct PackMapEnvDataBaseEx2V46 {
    dword dummy;
};

struct PackMapEnvDataBaseExV46 {
    helpers::Ptr<PackMapEnvDataBaseEx2V46> ext2 ;
    float brightTime;
    float dimTime;
    float darkCoeff;
    float darkExp;
    float darkMin;
    float darkMax;
    float brightMin;
    float brightMax;
    float brightScale;
    float darkScale;
    float4 waterReflectionParams;
};

struct PackMapEnvDataShapeV46 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV75 {
    helpers::Array<PackMapEnvDataLightingV75> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV46> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV75> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV46> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV75> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV75> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV75> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV46> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV75> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV75> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV46> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV75> water ;
    helpers::PtrStruct<PackMapEnvDataWindV75> wind ;
    helpers::PtrStruct<PackMapEnvDataAudioV46> audio ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    dword flags;
    helpers::Ptr<PackMapEnvDataBaseExV46> ext ;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV46> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV75 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV75 {
    helpers::Array<PackMapEnvDataLightingV75> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV46> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV75> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV46> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV75> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV75> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV75> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV46> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV75> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV75> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV46> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV75> water ;
    helpers::PtrStruct<PackMapEnvDataWindV75> wind ;
    helpers::PtrStruct<PackMapEnvDataAudioV46> audio ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    dword flags;
    helpers::Ptr<PackMapEnvDataBaseExV46> ext ;
    helpers::Array<PackMapEnvDataSkyModeTexV75> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV75 {
    helpers::Array<PackMapEnvDataLocalV75> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV75> dataGlobal ;
};

typedef PackMapEnvironmentV75 Gw2Structenv;

/* Version: 74, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV74 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV74 {
    helpers::PtrStruct<PackMapEnvDataLightV74> lights ;
    float shadowInfluence;
    byte3 backlightColor;
    float backlightIntensity;
};

struct PackMapEnvDataLightingCharV45 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV45 {
    helpers::Array<PackMapEnvDataLightingCharV45> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV74 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
    dword reserved;
};

struct PackMapEnvDataLayerV74 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV74> attributes ;
    helpers::WString name;
    dword reserved;
};

struct PackMapEnvDataCloudsV74 {
    helpers::Array<PackMapEnvDataLayerV74> layers ;
};

struct PackMapEnvDataColoredLightRingsV45 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV74 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV74 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV74 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    float texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
    dword reserved;
};

struct PackMapEnvDataPFieldCutoutV45 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV74 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvDataSkyCardAttributesV74 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV74 {
    PackMapEnvDataSkyCardAttributesV74 day;
    PackMapEnvDataSkyCardAttributesV74 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV74 {
    helpers::Array<PackMapEnvDataSkyCardV74> cards ;
};

struct PackMapEnvDataSpawnModelDataV45 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    qword animSequence;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV45 {
    helpers::Array<PackMapEnvDataSpawnModelDataV45> spawns ;
};

struct PackMapEnvDataSpawnGroupsV45 {
    helpers::Array<PackMapEnvDataSpawnListV45> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV74 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV74 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataAudioV45 {
    qword token;
};

struct PackMapEnvDataShapeV45 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV74 {
    helpers::Array<PackMapEnvDataLightingV74> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV45> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV74> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV45> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV74> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV74> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV74> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV45> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV74> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV74> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV45> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV74> water ;
    helpers::PtrStruct<PackMapEnvDataWindV74> wind ;
    helpers::PtrStruct<PackMapEnvDataAudioV45> audio ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::WString reserved;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV45> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV74 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV74 {
    helpers::Array<PackMapEnvDataLightingV74> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV45> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV74> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV45> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV74> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV74> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV74> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV45> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV74> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV74> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV45> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV74> water ;
    helpers::PtrStruct<PackMapEnvDataWindV74> wind ;
    helpers::PtrStruct<PackMapEnvDataAudioV45> audio ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::WString reserved;
    helpers::Array<PackMapEnvDataSkyModeTexV74> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV74 {
    helpers::Array<PackMapEnvDataLocalV74> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV74> dataGlobal ;
};

typedef PackMapEnvironmentV74 Gw2Structenv;

/* Version: 73, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV73 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV73 {
    helpers::PtrStruct<PackMapEnvDataLightV73> lights ;
    float shadowInfluence;
    byte3 backlightColor;
    float backlightIntensity;
};

struct PackMapEnvDataLightingCharV44 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV44 {
    helpers::Array<PackMapEnvDataLightingCharV44> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV73 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV73 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV73> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV73 {
    helpers::Array<PackMapEnvDataLayerV73> layers ;
};

struct PackMapEnvDataColoredLightRingsV44 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV73 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV73 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV73 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    float texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV44 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV73 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvDataSkyCardAttributesV73 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV73 {
    PackMapEnvDataSkyCardAttributesV73 day;
    PackMapEnvDataSkyCardAttributesV73 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV73 {
    helpers::Array<PackMapEnvDataSkyCardV73> cards ;
};

struct PackMapEnvDataSpawnModelDataV44 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    qword animSequence;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV44 {
    helpers::Array<PackMapEnvDataSpawnModelDataV44> spawns ;
};

struct PackMapEnvDataSpawnGroupsV44 {
    helpers::Array<PackMapEnvDataSpawnListV44> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV73 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV73 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataAudioV44 {
    qword token;
};

struct PackMapEnvDataShapeV44 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV73 {
    helpers::Array<PackMapEnvDataLightingV73> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV44> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV73> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV44> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV73> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV73> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV73> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV44> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV73> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV73> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV44> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV73> water ;
    helpers::PtrStruct<PackMapEnvDataWindV73> wind ;
    helpers::PtrStruct<PackMapEnvDataAudioV44> audio ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV44> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV73 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV73 {
    helpers::Array<PackMapEnvDataLightingV73> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV44> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV73> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV44> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV73> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV73> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV73> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV44> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV73> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV73> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV44> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV73> water ;
    helpers::PtrStruct<PackMapEnvDataWindV73> wind ;
    helpers::PtrStruct<PackMapEnvDataAudioV44> audio ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV73> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV73 {
    helpers::Array<PackMapEnvDataLocalV73> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV73> dataGlobal ;
};

typedef PackMapEnvironmentV73 Gw2Structenv;

/* Version: 72, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV72 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV72 {
    helpers::PtrStruct<PackMapEnvDataLightV72> lights ;
    float shadowInfluence;
    byte3 backlightColor;
    float backlightIntensity;
};

struct PackMapEnvDataLightingCharV43 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV43 {
    helpers::Array<PackMapEnvDataLightingCharV43> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV72 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV72 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV72> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV72 {
    helpers::Array<PackMapEnvDataLayerV72> layers ;
};

struct PackMapEnvDataColoredLightRingsV43 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV72 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV72 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV72 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    float texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV43 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV72 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvDataSkyCardAttributesV72 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV72 {
    PackMapEnvDataSkyCardAttributesV72 day;
    PackMapEnvDataSkyCardAttributesV72 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV72 {
    helpers::Array<PackMapEnvDataSkyCardV72> cards ;
};

struct PackMapEnvDataSpawnModelDataV43 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    qword animSequence;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV43 {
    helpers::Array<PackMapEnvDataSpawnModelDataV43> spawns ;
};

struct PackMapEnvDataSpawnGroupsV43 {
    helpers::Array<PackMapEnvDataSpawnListV43> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV72 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV72 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataShapeV43 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV72 {
    helpers::Array<PackMapEnvDataLightingV72> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV43> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV72> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV43> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV72> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV72> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV72> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV43> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV72> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV72> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV43> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV72> water ;
    helpers::PtrStruct<PackMapEnvDataWindV72> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    qword audioToken;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV43> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV72 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV72 {
    helpers::Array<PackMapEnvDataLightingV72> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV43> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV72> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV43> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV72> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV72> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV72> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV43> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV72> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV72> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV43> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV72> water ;
    helpers::PtrStruct<PackMapEnvDataWindV72> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    qword audioToken;
    helpers::Array<PackMapEnvDataSkyModeTexV72> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV72 {
    helpers::Array<PackMapEnvDataLocalV72> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV72> dataGlobal ;
};

typedef PackMapEnvironmentV72 Gw2Structenv;

/* Version: 71, ReferencedFunction: 0x410419B000000001 */
struct PackMapEnvDataLightV71 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV71 {
    helpers::PtrStruct<PackMapEnvDataLightV71> lights ;
    float shadowInfluence;
    byte3 backlightColor;
    float backlightIntensity;
};

struct PackMapEnvDataLightingCharV42 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV42 {
    helpers::Array<PackMapEnvDataLightingCharV42> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV71 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV71 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV71> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV71 {
    helpers::Array<PackMapEnvDataLayerV71> layers ;
};

struct PackMapEnvDataColoredLightRingsV42 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV71 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV71 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV71 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    float texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV42 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV71 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvDataSkyCardAttributesV71 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV71 {
    PackMapEnvDataSkyCardAttributesV71 day;
    PackMapEnvDataSkyCardAttributesV71 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV71 {
    helpers::Array<PackMapEnvDataSkyCardV71> cards ;
};

struct PackMapEnvDataSpawnModelDataV42 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    qword animSequence;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV42 {
    helpers::Array<PackMapEnvDataSpawnModelDataV42> spawns ;
};

struct PackMapEnvDataSpawnGroupsV42 {
    helpers::Array<PackMapEnvDataSpawnListV42> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV71 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV71 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataShapeV42 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV71 {
    helpers::Array<PackMapEnvDataLightingV71> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV42> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV71> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV42> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV71> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV71> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV71> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV42> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV71> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV71> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV42> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV71> water ;
    helpers::PtrStruct<PackMapEnvDataWindV71> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV42> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV71 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV71 {
    helpers::Array<PackMapEnvDataLightingV71> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV42> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV71> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV42> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV71> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV71> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV71> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV42> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV71> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV71> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV42> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV71> water ;
    helpers::PtrStruct<PackMapEnvDataWindV71> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV71> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV71 {
    helpers::Array<PackMapEnvDataLocalV71> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV71> dataGlobal ;
};

typedef PackMapEnvironmentV71 Gw2Structenv;

/* Version: 70, ReferencedFunction: 0x4104196000000001 */
struct PackMapEnvDataLightV70 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV70 {
    helpers::PtrStruct<PackMapEnvDataLightV70> lights ;
    float shadowInfluence;
};

struct PackMapEnvDataLightingCharV41 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV41 {
    helpers::Array<PackMapEnvDataLightingCharV41> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV70 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV70 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV70> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV70 {
    helpers::Array<PackMapEnvDataLayerV70> layers ;
};

struct PackMapEnvDataColoredLightRingsV41 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV70 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV70 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV70 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    float texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV41 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV70 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvDataSkyCardAttributesV70 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV70 {
    PackMapEnvDataSkyCardAttributesV70 day;
    PackMapEnvDataSkyCardAttributesV70 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV70 {
    helpers::Array<PackMapEnvDataSkyCardV70> cards ;
};

struct PackMapEnvDataSpawnModelDataV41 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    qword animSequence;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV41 {
    helpers::Array<PackMapEnvDataSpawnModelDataV41> spawns ;
};

struct PackMapEnvDataSpawnGroupsV41 {
    helpers::Array<PackMapEnvDataSpawnListV41> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV70 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV70 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataShapeV41 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV70 {
    helpers::Array<PackMapEnvDataLightingV70> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV41> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV70> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV41> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV70> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV70> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV70> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV41> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV70> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV70> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV41> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV70> water ;
    helpers::PtrStruct<PackMapEnvDataWindV70> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV41> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV70 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV70 {
    helpers::Array<PackMapEnvDataLightingV70> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV41> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV70> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV41> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV70> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV70> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV70> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV41> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV70> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV70> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV41> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV70> water ;
    helpers::PtrStruct<PackMapEnvDataWindV70> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV70> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV70 {
    helpers::Array<PackMapEnvDataLocalV70> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV70> dataGlobal ;
};

typedef PackMapEnvironmentV70 Gw2Structenv;

/* Version: 69, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV69 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV69 {
    helpers::PtrStruct<PackMapEnvDataLightV69> lights ;
    float shadowInfluence;
};

struct PackMapEnvDataLightingCharV40 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV40 {
    helpers::Array<PackMapEnvDataLightingCharV40> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV69 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV69 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV69> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV69 {
    helpers::Array<PackMapEnvDataLayerV69> layers ;
};

struct PackMapEnvDataColoredLightRingsV40 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV69 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV69 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV69 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV40 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV69 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvDataSkyCardAttributesV69 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV69 {
    PackMapEnvDataSkyCardAttributesV69 day;
    PackMapEnvDataSkyCardAttributesV69 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV69 {
    helpers::Array<PackMapEnvDataSkyCardV69> cards ;
};

struct PackMapEnvDataSpawnModelDataV40 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    qword animSequence;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV40 {
    helpers::Array<PackMapEnvDataSpawnModelDataV40> spawns ;
};

struct PackMapEnvDataSpawnGroupsV40 {
    helpers::Array<PackMapEnvDataSpawnListV40> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV69 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV69 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataShapeV40 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV69 {
    helpers::Array<PackMapEnvDataLightingV69> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV40> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV69> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV40> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV69> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV69> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV69> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV40> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV69> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV69> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV40> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV69> water ;
    helpers::PtrStruct<PackMapEnvDataWindV69> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV40> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV69 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV69 {
    helpers::Array<PackMapEnvDataLightingV69> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV40> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV69> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV40> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV69> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV69> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV69> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV40> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV69> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV69> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV40> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV69> water ;
    helpers::PtrStruct<PackMapEnvDataWindV69> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV69> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV69 {
    helpers::Array<PackMapEnvDataLocalV69> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV69> dataGlobal ;
};

typedef PackMapEnvironmentV69 Gw2Structenv;

/* Version: 68, ReferencedFunction: 0x410417B000000001 */
struct PackMapEnvDataLightV68 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV68 {
    helpers::PtrStruct<PackMapEnvDataLightV68> lights ;
    float shadowInfluence;
    helpers::Ptr<PackMapEnvDataLightV68> backlight ;
};

struct PackMapEnvDataLightingCharV39 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV39 {
    helpers::Array<PackMapEnvDataLightingCharV39> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV68 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV68 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV68> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV68 {
    helpers::Array<PackMapEnvDataLayerV68> layers ;
};

struct PackMapEnvDataColoredLightRingsV39 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV68 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV68 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV68 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV39 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV68 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvDataSkyCardAttributesV68 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV68 {
    PackMapEnvDataSkyCardAttributesV68 day;
    PackMapEnvDataSkyCardAttributesV68 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV68 {
    helpers::Array<PackMapEnvDataSkyCardV68> cards ;
};

struct PackMapEnvDataSpawnModelDataV39 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    qword animSequence;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV39 {
    helpers::Array<PackMapEnvDataSpawnModelDataV39> spawns ;
};

struct PackMapEnvDataSpawnGroupsV39 {
    helpers::Array<PackMapEnvDataSpawnListV39> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV68 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV68 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataShapeV39 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV68 {
    helpers::Array<PackMapEnvDataLightingV68> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV39> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV68> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV39> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV68> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV68> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV68> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV39> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV68> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV68> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV39> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV68> water ;
    helpers::PtrStruct<PackMapEnvDataWindV68> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV39> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV68 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV68 {
    helpers::Array<PackMapEnvDataLightingV68> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV39> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV68> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV39> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV68> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV68> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV68> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV39> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV68> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV68> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV39> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV68> water ;
    helpers::PtrStruct<PackMapEnvDataWindV68> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV68> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV68 {
    helpers::Array<PackMapEnvDataLocalV68> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV68> dataGlobal ;
};

typedef PackMapEnvironmentV68 Gw2Structenv;

/* Version: 67, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV67 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV67 {
    helpers::PtrStruct<PackMapEnvDataLightV67> lights ;
    float shadowInfluence;
};

struct PackMapEnvDataLightingCharV38 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV38 {
    helpers::Array<PackMapEnvDataLightingCharV38> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV67 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV67 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV67> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV67 {
    helpers::Array<PackMapEnvDataLayerV67> layers ;
};

struct PackMapEnvDataColoredLightRingsV38 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV67 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV67 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV67 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV38 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV67 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvDataSkyCardAttributesV67 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV67 {
    PackMapEnvDataSkyCardAttributesV67 day;
    PackMapEnvDataSkyCardAttributesV67 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV67 {
    helpers::Array<PackMapEnvDataSkyCardV67> cards ;
};

struct PackMapEnvDataSpawnModelDataV38 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    qword animSequence;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV38 {
    helpers::Array<PackMapEnvDataSpawnModelDataV38> spawns ;
};

struct PackMapEnvDataSpawnGroupsV38 {
    helpers::Array<PackMapEnvDataSpawnListV38> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV67 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV67 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataShapeV38 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV67 {
    helpers::Array<PackMapEnvDataLightingV67> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV38> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV67> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV38> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV67> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV67> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV67> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV38> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV67> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV67> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV38> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV67> water ;
    helpers::PtrStruct<PackMapEnvDataWindV67> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV38> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV67 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV67 {
    helpers::Array<PackMapEnvDataLightingV67> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV38> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV67> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV38> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV67> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV67> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV67> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV38> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV67> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV67> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV38> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV67> water ;
    helpers::PtrStruct<PackMapEnvDataWindV67> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV67> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV67 {
    helpers::Array<PackMapEnvDataLocalV67> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV67> dataGlobal ;
};

typedef PackMapEnvironmentV67 Gw2Structenv;

/* Version: 66, ReferencedFunction: 0x4104161000000001 */
struct PackMapEnvDataLightV66 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV66 {
    helpers::PtrStruct<PackMapEnvDataLightV66> lights ;
    float shadowInfluence;
};

struct PackMapEnvDataLightingCharV37 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV37 {
    helpers::Array<PackMapEnvDataLightingCharV37> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV66 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV66 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV66> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV66 {
    helpers::Array<PackMapEnvDataLayerV66> layers ;
};

struct PackMapEnvDataColoredLightRingsV37 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV66 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV66 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV66 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV37 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV66 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvDataSkyCardAttributesV66 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV66 {
    PackMapEnvDataSkyCardAttributesV66 day;
    PackMapEnvDataSkyCardAttributesV66 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV66 {
    helpers::Array<PackMapEnvDataSkyCardV66> cards ;
};

struct PackMapEnvDataSpawnModelDataV37 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV37 {
    helpers::Array<PackMapEnvDataSpawnModelDataV37> spawns ;
};

struct PackMapEnvDataSpawnGroupsV37 {
    helpers::Array<PackMapEnvDataSpawnListV37> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV66 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV66 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataShapeV37 {
    float3 center;
    float height;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    helpers::Array<float2> vertexArray ;
    byte shapeType;
};

struct PackMapEnvDataLocalV66 {
    helpers::Array<PackMapEnvDataLightingV66> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV37> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV66> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV37> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV66> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV66> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV66> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV37> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV66> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV66> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV37> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV66> water ;
    helpers::PtrStruct<PackMapEnvDataWindV66> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    byte type;
    qword guid;
    helpers::Array<PackMapEnvDataShapeV37> shapeArray ;
};

struct PackMapEnvDataSkyModeTexV66 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV66 {
    helpers::Array<PackMapEnvDataLightingV66> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV37> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV66> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV37> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV66> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV66> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV66> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV37> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV66> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV66> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV37> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV66> water ;
    helpers::PtrStruct<PackMapEnvDataWindV66> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV66> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV66 {
    helpers::Array<PackMapEnvDataLocalV66> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV66> dataGlobal ;
};

typedef PackMapEnvironmentV66 Gw2Structenv;

/* Version: 65, ReferencedFunction: 0x4104159000000001 */
struct PackMapEnvDataLightV65 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV65 {
    helpers::PtrStruct<PackMapEnvDataLightV65> lights ;
    float shadowInfluence;
};

struct PackMapEnvDataLightingCharV36 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV36 {
    helpers::Array<PackMapEnvDataLightingCharV36> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV65 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV65 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV65> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV65 {
    helpers::Array<PackMapEnvDataLayerV65> layers ;
};

struct PackMapEnvDataColoredLightRingsV36 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV65 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV65 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV65 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV36 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV65 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvDataSkyCardAttributesV65 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV65 {
    PackMapEnvDataSkyCardAttributesV65 day;
    PackMapEnvDataSkyCardAttributesV65 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV65 {
    helpers::Array<PackMapEnvDataSkyCardV65> cards ;
};

struct PackMapEnvDataSpawnModelDataV36 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV36 {
    helpers::Array<PackMapEnvDataSpawnModelDataV36> spawns ;
};

struct PackMapEnvDataSpawnGroupsV36 {
    helpers::Array<PackMapEnvDataSpawnListV36> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV65 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV65 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataLocalV65 {
    helpers::Array<PackMapEnvDataLightingV65> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV36> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV65> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV36> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV65> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV65> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV65> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV36> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV65> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV65> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV36> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV65> water ;
    helpers::PtrStruct<PackMapEnvDataWindV65> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV65 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV65 {
    helpers::Array<PackMapEnvDataLightingV65> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV36> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV65> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV36> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV65> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV65> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV65> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV36> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV65> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV65> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV36> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV65> water ;
    helpers::PtrStruct<PackMapEnvDataWindV65> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV65> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV65 {
    helpers::Array<PackMapEnvDataLocalV65> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV65> dataGlobal ;
};

typedef PackMapEnvironmentV65 Gw2Structenv;

/* Version: 64, ReferencedFunction: 0x4104145000000001 */
struct PackMapEnvDataLightV64 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV64 {
    helpers::PtrStruct<PackMapEnvDataLightV64> lights ;
};

struct PackMapEnvDataLightingCharV35 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV35 {
    helpers::Array<PackMapEnvDataLightingCharV35> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV64 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV64 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV64> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV64 {
    helpers::Array<PackMapEnvDataLayerV64> layers ;
};

struct PackMapEnvDataColoredLightRingsV35 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV64 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV64 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV64 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV35 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV64 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
    float verticalOffset;
};

struct PackMapEnvDataSkyCardAttributesV64 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV64 {
    PackMapEnvDataSkyCardAttributesV64 day;
    PackMapEnvDataSkyCardAttributesV64 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV64 {
    helpers::Array<PackMapEnvDataSkyCardV64> cards ;
};

struct PackMapEnvDataSpawnModelDataV35 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV35 {
    helpers::Array<PackMapEnvDataSpawnModelDataV35> spawns ;
};

struct PackMapEnvDataSpawnGroupsV35 {
    helpers::Array<PackMapEnvDataSpawnListV35> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV64 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV64 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
    byte gustSpeed;
};

struct PackMapEnvDataLocalV64 {
    helpers::Array<PackMapEnvDataLightingV64> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV35> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV64> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV35> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV64> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV64> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV64> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV35> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV64> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV64> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV35> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV64> water ;
    helpers::PtrStruct<PackMapEnvDataWindV64> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV64 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV64 {
    helpers::Array<PackMapEnvDataLightingV64> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV35> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV64> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV35> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV64> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV64> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV64> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV35> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV64> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV64> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV35> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV64> water ;
    helpers::PtrStruct<PackMapEnvDataWindV64> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV64> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV64 {
    helpers::Array<PackMapEnvDataLocalV64> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV64> dataGlobal ;
};

typedef PackMapEnvironmentV64 Gw2Structenv;

/* Version: 63, ReferencedFunction: 0x4104131000000001 */
struct PackMapEnvDataLightV63 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV63 {
    helpers::PtrStruct<PackMapEnvDataLightV63> lights ;
};

struct PackMapEnvDataLightingCharV34 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV34 {
    helpers::Array<PackMapEnvDataLightingCharV34> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV63 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV63 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV63> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV63 {
    helpers::Array<PackMapEnvDataLayerV63> layers ;
};

struct PackMapEnvDataColoredLightRingsV34 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV63 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV63 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV63 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV34 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV63 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV63 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV63 {
    PackMapEnvDataSkyCardAttributesV63 day;
    PackMapEnvDataSkyCardAttributesV63 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV63 {
    helpers::Array<PackMapEnvDataSkyCardV63> cards ;
};

struct PackMapEnvDataSpawnModelDataV34 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV34 {
    helpers::Array<PackMapEnvDataSpawnModelDataV34> spawns ;
};

struct PackMapEnvDataSpawnGroupsV34 {
    helpers::Array<PackMapEnvDataSpawnListV34> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV63 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    float foamSpawn;
    float foamDissolve;
    float foamDepthAttenuation;
    byte4 foamColor0;
    byte4 foamColor1;
};

struct PackMapEnvDataWindV63 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV63 {
    helpers::Array<PackMapEnvDataLightingV63> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV34> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV63> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV34> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV63> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV63> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV63> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV34> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV63> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV63> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV34> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV63> water ;
    helpers::PtrStruct<PackMapEnvDataWindV63> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV63 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV63 {
    helpers::Array<PackMapEnvDataLightingV63> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV34> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV63> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV34> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV63> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV63> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV63> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV34> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV63> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV63> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV34> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV63> water ;
    helpers::PtrStruct<PackMapEnvDataWindV63> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV63> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV63 {
    helpers::Array<PackMapEnvDataLocalV63> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV63> dataGlobal ;
};

typedef PackMapEnvironmentV63 Gw2Structenv;

/* Version: 62, ReferencedFunction: 0x410412D000000001 */
struct PackMapEnvDataLightV62 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV62 {
    helpers::PtrStruct<PackMapEnvDataLightV62> lights ;
};

struct PackMapEnvDataLightingCharV33 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV33 {
    helpers::Array<PackMapEnvDataLightingCharV33> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV62 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV62 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV62> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV62 {
    helpers::Array<PackMapEnvDataLayerV62> layers ;
};

struct PackMapEnvDataColoredLightRingsV33 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV62 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV62 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
    float2 sunDirRange;
};

struct PackMapEnvDataPFieldV62 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV33 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV62 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV62 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV62 {
    PackMapEnvDataSkyCardAttributesV62 day;
    PackMapEnvDataSkyCardAttributesV62 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV62 {
    helpers::Array<PackMapEnvDataSkyCardV62> cards ;
};

struct PackMapEnvDataSpawnModelDataV33 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV33 {
    helpers::Array<PackMapEnvDataSpawnModelDataV33> spawns ;
};

struct PackMapEnvDataSpawnGroupsV33 {
    helpers::Array<PackMapEnvDataSpawnListV33> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV62 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV62 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV62 {
    helpers::Array<PackMapEnvDataLightingV62> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV33> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV62> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV33> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV62> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV62> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV62> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV33> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV62> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV62> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV33> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV62> water ;
    helpers::PtrStruct<PackMapEnvDataWindV62> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV62 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV62 {
    helpers::Array<PackMapEnvDataLightingV62> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV33> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV62> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV33> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV62> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV62> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV62> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV33> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV62> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV62> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV33> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV62> water ;
    helpers::PtrStruct<PackMapEnvDataWindV62> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV62> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV62 {
    helpers::Array<PackMapEnvDataLocalV62> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV62> dataGlobal ;
};

typedef PackMapEnvironmentV62 Gw2Structenv;

/* Version: 61, ReferencedFunction: 0x410412A000000001 */
struct PackMapEnvDataLightV61 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV61 {
    helpers::PtrStruct<PackMapEnvDataLightV61> lights ;
};

struct PackMapEnvDataLightingCharV32 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV32 {
    helpers::Array<PackMapEnvDataLightingCharV32> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV61 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV61 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV61> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV61 {
    helpers::Array<PackMapEnvDataLayerV61> layers ;
};

struct PackMapEnvDataColoredLightRingsV32 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV61 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
    float2 flatteningCharacterRange;
};

struct PackMapEnvDataHazeV61 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV61 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV32 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV61 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV61 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV61 {
    PackMapEnvDataSkyCardAttributesV61 day;
    PackMapEnvDataSkyCardAttributesV61 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV61 {
    helpers::Array<PackMapEnvDataSkyCardV61> cards ;
};

struct PackMapEnvDataSpawnModelDataV32 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV32 {
    helpers::Array<PackMapEnvDataSpawnModelDataV32> spawns ;
};

struct PackMapEnvDataSpawnGroupsV32 {
    helpers::Array<PackMapEnvDataSpawnListV32> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV61 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV61 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV61 {
    helpers::Array<PackMapEnvDataLightingV61> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV32> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV61> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV32> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV61> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV61> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV61> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV32> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV61> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV61> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV32> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV61> water ;
    helpers::PtrStruct<PackMapEnvDataWindV61> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV61 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV61 {
    helpers::Array<PackMapEnvDataLightingV61> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV32> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV61> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV32> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV61> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV61> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV61> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV32> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV61> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV61> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV32> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV61> water ;
    helpers::PtrStruct<PackMapEnvDataWindV61> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV61> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV61 {
    helpers::Array<PackMapEnvDataLocalV61> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV61> dataGlobal ;
};

typedef PackMapEnvironmentV61 Gw2Structenv;

/* Version: 60, ReferencedFunction: 0x4104126000000001 */
struct PackMapEnvDataLightV60 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV60 {
    helpers::PtrStruct<PackMapEnvDataLightV60> lights ;
};

struct PackMapEnvDataLightingCharV31 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV31 {
    helpers::Array<PackMapEnvDataLightingCharV31> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV60 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV60 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV60> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV60 {
    helpers::Array<PackMapEnvDataLayerV60> layers ;
};

struct PackMapEnvDataColoredLightRingsV31 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV60 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
    float2 flatteningRange;
};

struct PackMapEnvDataHazeV60 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV60 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV31 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV60 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV60 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV60 {
    PackMapEnvDataSkyCardAttributesV60 day;
    PackMapEnvDataSkyCardAttributesV60 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV60 {
    helpers::Array<PackMapEnvDataSkyCardV60> cards ;
};

struct PackMapEnvDataSpawnModelDataV31 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV31 {
    helpers::Array<PackMapEnvDataSpawnModelDataV31> spawns ;
};

struct PackMapEnvDataSpawnGroupsV31 {
    helpers::Array<PackMapEnvDataSpawnListV31> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV60 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV60 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV60 {
    helpers::Array<PackMapEnvDataLightingV60> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV31> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV60> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV31> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV60> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV60> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV60> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV31> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV60> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV60> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV31> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV60> water ;
    helpers::PtrStruct<PackMapEnvDataWindV60> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV60 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV60 {
    helpers::Array<PackMapEnvDataLightingV60> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV31> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV60> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV31> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV60> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV60> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV60> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV31> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV60> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV60> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV31> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV60> water ;
    helpers::PtrStruct<PackMapEnvDataWindV60> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV60> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV60 {
    helpers::Array<PackMapEnvDataLocalV60> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV60> dataGlobal ;
};

typedef PackMapEnvironmentV60 Gw2Structenv;

/* Version: 59, ReferencedFunction: 0x410410C000000001 */
struct PackMapEnvDataLightV59 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV59 {
    helpers::PtrStruct<PackMapEnvDataLightV59> lights ;
};

struct PackMapEnvDataLightingCharV30 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV30 {
    helpers::Array<PackMapEnvDataLightingCharV30> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV59 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV59 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV59> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV59 {
    helpers::Array<PackMapEnvDataLayerV59> layers ;
};

struct PackMapEnvDataColoredLightRingsV30 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV59 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV59 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV59 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV30 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV59 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV59 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV59 {
    PackMapEnvDataSkyCardAttributesV59 day;
    PackMapEnvDataSkyCardAttributesV59 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV59 {
    helpers::Array<PackMapEnvDataSkyCardV59> cards ;
};

struct PackMapEnvDataSpawnModelDataV30 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    helpers::FileName modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV30 {
    helpers::Array<PackMapEnvDataSpawnModelDataV30> spawns ;
};

struct PackMapEnvDataSpawnGroupsV30 {
    helpers::Array<PackMapEnvDataSpawnListV30> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV59 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV59 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV59 {
    helpers::Array<PackMapEnvDataLightingV59> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV30> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV59> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV30> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV59> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV59> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV59> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV30> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV59> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV59> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV30> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV59> water ;
    helpers::PtrStruct<PackMapEnvDataWindV59> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV59 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV59 {
    helpers::Array<PackMapEnvDataLightingV59> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV30> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV59> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV30> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV59> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV59> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV59> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV30> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV59> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV59> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV30> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV59> water ;
    helpers::PtrStruct<PackMapEnvDataWindV59> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV59> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV59 {
    helpers::Array<PackMapEnvDataLocalV59> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV59> dataGlobal ;
};

typedef PackMapEnvironmentV59 Gw2Structenv;

/* Version: 58, ReferencedFunction: 0x41040FF000000001 */
struct PackMapEnvDataLightV58 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV58 {
    helpers::PtrStruct<PackMapEnvDataLightV58> lights ;
};

struct PackMapEnvDataLightingCharV29 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV29 {
    helpers::Array<PackMapEnvDataLightingCharV29> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV58 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV58 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV58> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV58 {
    helpers::Array<PackMapEnvDataLayerV58> layers ;
};

struct PackMapEnvDataColoredLightRingsV29 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV58 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV58 {
    byte4 nearColor;
    byte4 farColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV58 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV29 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV58 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV58 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV58 {
    PackMapEnvDataSkyCardAttributesV58 day;
    PackMapEnvDataSkyCardAttributesV58 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV58 {
    helpers::Array<PackMapEnvDataSkyCardV58> cards ;
};

struct PackMapEnvDataSpawnModelDataV29 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    helpers::WString modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV29 {
    helpers::Array<PackMapEnvDataSpawnModelDataV29> spawns ;
};

struct PackMapEnvDataSpawnGroupsV29 {
    helpers::Array<PackMapEnvDataSpawnListV29> spawnGroups ;
    helpers::Array<qword> targets ;
};

struct PackMapEnvDataWaterV58 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV58 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV58 {
    helpers::Array<PackMapEnvDataLightingV58> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV29> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV58> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV29> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV58> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV58> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV58> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV29> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV58> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV58> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV29> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV58> water ;
    helpers::PtrStruct<PackMapEnvDataWindV58> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV58 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV58 {
    helpers::Array<PackMapEnvDataLightingV58> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV29> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV58> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV29> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV58> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV58> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV58> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV29> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV58> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV58> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV29> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV58> water ;
    helpers::PtrStruct<PackMapEnvDataWindV58> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV58> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV58 {
    helpers::Array<PackMapEnvDataLocalV58> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV58> dataGlobal ;
};

typedef PackMapEnvironmentV58 Gw2Structenv;

/* Version: 57, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV57 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV57 {
    helpers::PtrStruct<PackMapEnvDataLightV57> lights ;
};

struct PackMapEnvDataLightingCharV28 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV28 {
    helpers::Array<PackMapEnvDataLightingCharV28> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV57 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV57 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV57> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV57 {
    helpers::Array<PackMapEnvDataLayerV57> layers ;
};

struct PackMapEnvDataColoredLightRingsV28 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV57 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV57 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV57 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV28 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV57 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV57 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV57 {
    PackMapEnvDataSkyCardAttributesV57 day;
    PackMapEnvDataSkyCardAttributesV57 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV57 {
    helpers::Array<PackMapEnvDataSkyCardV57> cards ;
};

struct PackMapEnvDataSpawnModelDataV28 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 heightRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    helpers::WString modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV28 {
    helpers::Array<PackMapEnvDataSpawnModelDataV28> spawns ;
};

struct PackMapEnvDataSpawnGroupsV28 {
    helpers::Array<PackMapEnvDataSpawnListV28> spawnGroups ;
    qword targetVolume;
};

struct PackMapEnvDataWaterV57 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV57 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV57 {
    helpers::Array<PackMapEnvDataLightingV57> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV28> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV57> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV28> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV57> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV57> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV57> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV28> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV57> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV57> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV28> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV57> water ;
    helpers::PtrStruct<PackMapEnvDataWindV57> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV57 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV57 {
    helpers::Array<PackMapEnvDataLightingV57> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV28> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV57> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV28> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV57> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV57> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV57> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV28> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV57> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV57> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV28> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV57> water ;
    helpers::PtrStruct<PackMapEnvDataWindV57> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV57> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV57 {
    helpers::Array<PackMapEnvDataLocalV57> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV57> dataGlobal ;
};

typedef PackMapEnvironmentV57 Gw2Structenv;

/* Version: 56, ReferencedFunction: 0x41040E9000000001 */
struct PackMapEnvDataLightV56 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV56 {
    helpers::PtrStruct<PackMapEnvDataLightV56> lights ;
};

struct PackMapEnvDataLightingCharV27 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV27 {
    helpers::Array<PackMapEnvDataLightingCharV27> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV56 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV56 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV56> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV56 {
    helpers::Array<PackMapEnvDataLayerV56> layers ;
};

struct PackMapEnvDataColoredLightRingsV27 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV56 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV56 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV56 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV27 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV56 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV56 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV56 {
    PackMapEnvDataSkyCardAttributesV56 day;
    PackMapEnvDataSkyCardAttributesV56 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV56 {
    helpers::Array<PackMapEnvDataSkyCardV56> cards ;
};

struct PackMapEnvDataSpawnModelDataV27 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float2 scaleRange;
    float2 rotXRange;
    float2 rotYRange;
    float2 rotZRange;
    float probability;
    float delay;
    dword flags;
    helpers::WString modelFile;
    word maxConcurrent;
};

struct PackMapEnvDataSpawnListV27 {
    helpers::Array<PackMapEnvDataSpawnModelDataV27> spawns ;
};

struct PackMapEnvDataSpawnGroupsV27 {
    helpers::Array<PackMapEnvDataSpawnListV27> spawnGroups ;
    qword targetVolume;
};

struct PackMapEnvDataWaterV56 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV56 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV56 {
    helpers::Array<PackMapEnvDataLightingV56> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV27> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV56> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV27> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV56> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV56> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV56> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV27> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV56> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV56> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV27> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV56> water ;
    helpers::PtrStruct<PackMapEnvDataWindV56> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV56 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV56 {
    helpers::Array<PackMapEnvDataLightingV56> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV27> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV56> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV27> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV56> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV56> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV56> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV27> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV56> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV56> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV27> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV56> water ;
    helpers::PtrStruct<PackMapEnvDataWindV56> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV56> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV56 {
    helpers::Array<PackMapEnvDataLocalV56> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV56> dataGlobal ;
};

typedef PackMapEnvironmentV56 Gw2Structenv;

/* Version: 55, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV55 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV55 {
    helpers::PtrStruct<PackMapEnvDataLightV55> lights ;
};

struct PackMapEnvDataLightingCharV26 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV26 {
    helpers::Array<PackMapEnvDataLightingCharV26> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV55 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV55 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV55> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV55 {
    helpers::Array<PackMapEnvDataLayerV55> layers ;
};

struct PackMapEnvDataColoredLightRingsV26 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV55 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV55 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV55 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV26 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV55 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV55 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV55 {
    PackMapEnvDataSkyCardAttributesV55 day;
    PackMapEnvDataSkyCardAttributesV55 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV55 {
    helpers::Array<PackMapEnvDataSkyCardV55> cards ;
};

struct PackMapEnvDataSpawnModelDataV26 {
    dword2 spawnRange;
    dword2 lifeSpan;
    float probability;
    float delay;
    word maxConcurrent;
    dword flags;
    helpers::WString modelFile;
};

struct PackMapEnvDataSpawnListV26 {
    helpers::Array<PackMapEnvDataSpawnModelDataV26> spawns ;
};

struct PackMapEnvDataSpawnGroupsV26 {
    helpers::Array<PackMapEnvDataSpawnListV26> spawnGroups ;
    qword targetVolume;
};

struct PackMapEnvDataWaterV55 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV55 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV55 {
    helpers::Array<PackMapEnvDataLightingV55> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV26> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV55> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV26> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV55> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV55> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV55> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV26> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV55> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV55> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV26> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV55> water ;
    helpers::PtrStruct<PackMapEnvDataWindV55> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV55 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV55 {
    helpers::Array<PackMapEnvDataLightingV55> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV26> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV55> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV26> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV55> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV55> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV55> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV26> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV55> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV55> skyCards ;
    helpers::Ptr<PackMapEnvDataSpawnGroupsV26> spawns ;
    helpers::PtrStruct<PackMapEnvDataWaterV55> water ;
    helpers::PtrStruct<PackMapEnvDataWindV55> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV55> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV55 {
    helpers::Array<PackMapEnvDataLocalV55> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV55> dataGlobal ;
};

typedef PackMapEnvironmentV55 Gw2Structenv;

/* Version: 54, ReferencedFunction: 0x41040DC000000001 */
struct PackMapEnvDataLightV54 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV54 {
    helpers::PtrStruct<PackMapEnvDataLightV54> lights ;
};

struct PackMapEnvDataLightingCharV25 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV25 {
    helpers::Array<PackMapEnvDataLightingCharV25> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV54 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV54 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV54> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV54 {
    helpers::Array<PackMapEnvDataLayerV54> layers ;
};

struct PackMapEnvDataColoredLightRingsV25 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV54 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV54 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV54 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV25 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV54 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV54 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV54 {
    PackMapEnvDataSkyCardAttributesV54 day;
    PackMapEnvDataSkyCardAttributesV54 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV54 {
    helpers::Array<PackMapEnvDataSkyCardV54> cards ;
};

struct PackMapEnvDataWaterV54 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV54 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV54 {
    helpers::Array<PackMapEnvDataLightingV54> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV25> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV54> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV25> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV54> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV54> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV54> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV25> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV54> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV54> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV54> water ;
    helpers::PtrStruct<PackMapEnvDataWindV54> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV54 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV54 {
    helpers::Array<PackMapEnvDataLightingV54> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV25> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV54> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV25> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV54> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV54> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV54> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV25> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV54> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV54> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV54> water ;
    helpers::PtrStruct<PackMapEnvDataWindV54> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV54> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV54 {
    helpers::Array<PackMapEnvDataLocalV54> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV54> dataGlobal ;
};

typedef PackMapEnvironmentV54 Gw2Structenv;

/* Version: 53, ReferencedFunction: 0x41040CF000000001 */
struct PackMapEnvDataLightV53 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV53 {
    helpers::PtrStruct<PackMapEnvDataLightV53> lights ;
};

struct PackMapEnvDataLightingCharV24 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV24 {
    helpers::Array<PackMapEnvDataLightingCharV24> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV53 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV53 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV53> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV53 {
    helpers::Array<PackMapEnvDataLayerV53> layers ;
};

struct PackMapEnvDataColoredLightRingsV24 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV53 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV53 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV53 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    float2 deviationSpeed;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV24 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV53 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV53 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV53 {
    PackMapEnvDataSkyCardAttributesV53 day;
    PackMapEnvDataSkyCardAttributesV53 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV53 {
    helpers::Array<PackMapEnvDataSkyCardV53> cards ;
};

struct PackMapEnvDataWaterV53 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV53 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV53 {
    helpers::Array<PackMapEnvDataLightingV53> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV24> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV53> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV24> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV53> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV53> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV53> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV24> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV53> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV53> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV53> water ;
    helpers::PtrStruct<PackMapEnvDataWindV53> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV53 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV53 {
    helpers::Array<PackMapEnvDataLightingV53> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV24> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV53> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV24> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV53> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV53> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV53> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV24> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV53> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV53> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV53> water ;
    helpers::PtrStruct<PackMapEnvDataWindV53> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV53> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV53 {
    helpers::Array<PackMapEnvDataLocalV53> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV53> dataGlobal ;
};

typedef PackMapEnvironmentV53 Gw2Structenv;

/* Version: 52, ReferencedFunction: 0x41040BF000000001 */
struct PackMapEnvDataLightV52 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV52 {
    helpers::PtrStruct<PackMapEnvDataLightV52> lights ;
};

struct PackMapEnvDataLightingCharV23 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV23 {
    helpers::Array<PackMapEnvDataLightingCharV23> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV52 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV52 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV52> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV52 {
    helpers::Array<PackMapEnvDataLayerV52> layers ;
};

struct PackMapEnvDataColoredLightRingsV23 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV52 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV52 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV52 {
    float altitude;
    float2 angle;
    word clusterCount;
    float2 clustering;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    word flags;
    float2 lifetime;
    float2 opacity;
    word particleCount;
    float2 period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    dword seed;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV23 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV52 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV52 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV52 {
    PackMapEnvDataSkyCardAttributesV52 day;
    PackMapEnvDataSkyCardAttributesV52 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV52 {
    helpers::Array<PackMapEnvDataSkyCardV52> cards ;
};

struct PackMapEnvDataWaterV52 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV52 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV52 {
    helpers::Array<PackMapEnvDataLightingV52> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV23> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV52> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV23> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV52> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV52> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV52> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV23> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV52> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV52> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV52> water ;
    helpers::PtrStruct<PackMapEnvDataWindV52> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV52 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV52 {
    helpers::Array<PackMapEnvDataLightingV52> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV23> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV52> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV23> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV52> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV52> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV52> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV23> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV52> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV52> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV52> water ;
    helpers::PtrStruct<PackMapEnvDataWindV52> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV52> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV52 {
    helpers::Array<PackMapEnvDataLocalV52> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV52> dataGlobal ;
};

typedef PackMapEnvironmentV52 Gw2Structenv;

/* Version: 51, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV51 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV51 {
    helpers::PtrStruct<PackMapEnvDataLightV51> lights ;
};

struct PackMapEnvDataLightingCharV22 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV22 {
    helpers::Array<PackMapEnvDataLightingCharV22> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV51 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV51 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV51> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV51 {
    helpers::Array<PackMapEnvDataLayerV51> layers ;
};

struct PackMapEnvDataColoredLightRingsV22 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV51 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV51 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV51 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float lifetime;
    float2 opacity;
    word particleCount;
    float period;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV22 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV51 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV51 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV51 {
    PackMapEnvDataSkyCardAttributesV51 day;
    PackMapEnvDataSkyCardAttributesV51 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV51 {
    helpers::Array<PackMapEnvDataSkyCardV51> cards ;
};

struct PackMapEnvDataWaterV51 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV51 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV51 {
    helpers::Array<PackMapEnvDataLightingV51> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV22> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV51> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV22> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV51> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV51> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV51> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV22> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV51> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV51> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV51> water ;
    helpers::PtrStruct<PackMapEnvDataWindV51> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV51 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV51 {
    helpers::Array<PackMapEnvDataLightingV51> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV22> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV51> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV22> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV51> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV51> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV51> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV22> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV51> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV51> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV51> water ;
    helpers::PtrStruct<PackMapEnvDataWindV51> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV51> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV51 {
    helpers::Array<PackMapEnvDataLocalV51> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV51> dataGlobal ;
};

typedef PackMapEnvironmentV51 Gw2Structenv;

/* Version: 50, ReferencedFunction: 0x41040A7000000001 */
struct PackMapEnvDataLightV50 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV50 {
    helpers::PtrStruct<PackMapEnvDataLightV50> lights ;
};

struct PackMapEnvDataLightingCharV21 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV21 {
    helpers::Array<PackMapEnvDataLightingCharV21> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV50 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV50 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV50> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV50 {
    helpers::Array<PackMapEnvDataLayerV50> layers ;
};

struct PackMapEnvDataColoredLightRingsV21 {
    float2 range;
    float distances[6];
    byte4 lightColors[6];
    byte4 shadowColors[6];
};

struct PackMapEnvDataEffectV50 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV50 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV50 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV21 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV50 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV50 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV50 {
    PackMapEnvDataSkyCardAttributesV50 day;
    PackMapEnvDataSkyCardAttributesV50 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV50 {
    helpers::Array<PackMapEnvDataSkyCardV50> cards ;
};

struct PackMapEnvDataWaterV50 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV50 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV50 {
    helpers::Array<PackMapEnvDataLightingV50> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV21> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV50> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV21> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV50> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV50> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV50> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV21> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV50> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV50> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV50> water ;
    helpers::PtrStruct<PackMapEnvDataWindV50> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV50 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV50 {
    helpers::Array<PackMapEnvDataLightingV50> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV21> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV50> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV21> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV50> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV50> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV50> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV21> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV50> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV50> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV50> water ;
    helpers::PtrStruct<PackMapEnvDataWindV50> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV50> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV50 {
    helpers::Array<PackMapEnvDataLocalV50> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV50> dataGlobal ;
};

typedef PackMapEnvironmentV50 Gw2Structenv;

/* Version: 49, ReferencedFunction: 0x410408E000000001 */
struct PackMapEnvDataLightV49 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV49 {
    helpers::PtrStruct<PackMapEnvDataLightV49> lights ;
};

struct PackMapEnvDataLightingCharV20 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLightingCharGroupV20 {
    helpers::Array<PackMapEnvDataLightingCharV20> lightingChar ;
};

struct PackMapEnvDataLayerAttributesV49 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV49 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV49> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV49 {
    helpers::Array<PackMapEnvDataLayerV49> layers ;
};

struct PackMapEnvDataColoredLightRingsV20 {
    float2 range;
    byte4 colors[6];
    float distances[6];
};

struct PackMapEnvDataEffectV49 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV49 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV49 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV20 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV49 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV49 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV49 {
    PackMapEnvDataSkyCardAttributesV49 day;
    PackMapEnvDataSkyCardAttributesV49 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV49 {
    helpers::Array<PackMapEnvDataSkyCardV49> cards ;
};

struct PackMapEnvDataWaterV49 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV49 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV49 {
    helpers::Array<PackMapEnvDataLightingV49> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV20> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV49> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV20> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV49> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV49> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV49> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV20> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV49> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV49> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV49> water ;
    helpers::PtrStruct<PackMapEnvDataWindV49> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV49 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV49 {
    helpers::Array<PackMapEnvDataLightingV49> lighting ;
    helpers::Array<PackMapEnvDataLightingCharGroupV20> lightingCharGroups ;
    helpers::Ptr<PackMapEnvDataCloudsV49> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV20> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV49> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV49> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV49> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV20> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV49> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV49> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV49> water ;
    helpers::PtrStruct<PackMapEnvDataWindV49> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV49> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV49 {
    helpers::Array<PackMapEnvDataLocalV49> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV49> dataGlobal ;
};

typedef PackMapEnvironmentV49 Gw2Structenv;

/* Version: 48, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV48 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV48 {
    helpers::PtrStruct<PackMapEnvDataLightV48> lights ;
};

struct PackMapEnvDataLightingCharV19 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLayerAttributesV48 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV48 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV48> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV48 {
    helpers::Array<PackMapEnvDataLayerV48> layers ;
};

struct PackMapEnvDataColoredLightRingsV19 {
    float2 range;
    byte4 colors[6];
    float distances[6];
};

struct PackMapEnvDataEffectV48 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV48 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV48 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV19 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV48 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV48 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV48 {
    PackMapEnvDataSkyCardAttributesV48 day;
    PackMapEnvDataSkyCardAttributesV48 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV48 {
    helpers::Array<PackMapEnvDataSkyCardV48> cards ;
};

struct PackMapEnvDataWaterV48 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV48 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV48 {
    helpers::Array<PackMapEnvDataLightingV48> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV19> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV48> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV19> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV48> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV48> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV48> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV19> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV48> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV48> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV48> water ;
    helpers::PtrStruct<PackMapEnvDataWindV48> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV48 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV48 {
    helpers::Array<PackMapEnvDataLightingV48> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV19> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV48> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV19> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV48> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV48> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV48> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV19> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV48> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV48> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV48> water ;
    helpers::PtrStruct<PackMapEnvDataWindV48> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    qword bindTarget;
    helpers::Array<PackMapEnvDataSkyModeTexV48> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV48 {
    helpers::Array<PackMapEnvDataLocalV48> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV48> dataGlobal ;
};

typedef PackMapEnvironmentV48 Gw2Structenv;

/* Version: 47, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV47 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV47 {
    helpers::PtrStruct<PackMapEnvDataLightV47> lights ;
};

struct PackMapEnvDataLightingCharV18 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLayerAttributesV47 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV47 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV47> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV47 {
    helpers::Array<PackMapEnvDataLayerV47> layers ;
};

struct PackMapEnvDataColoredLightRingsV18 {
    float2 range;
    byte4 colors[6];
    float distances[6];
};

struct PackMapEnvDataEffectV47 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV47 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV47 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV18 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV47 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV47 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV47 {
    PackMapEnvDataSkyCardAttributesV47 day;
    PackMapEnvDataSkyCardAttributesV47 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV47 {
    helpers::Array<PackMapEnvDataSkyCardV47> cards ;
};

struct PackMapEnvDataWaterV47 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV47 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV47 {
    helpers::Array<PackMapEnvDataLightingV47> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV18> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV47> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV18> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV47> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV47> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV47> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV18> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV47> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV47> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV47> water ;
    helpers::PtrStruct<PackMapEnvDataWindV47> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV47 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV47 {
    helpers::Array<PackMapEnvDataLightingV47> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV18> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV47> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV18> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV47> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV47> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV47> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV18> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV47> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV47> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV47> water ;
    helpers::PtrStruct<PackMapEnvDataWindV47> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    helpers::Array<PackMapEnvDataSkyModeTexV47> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV47 {
    helpers::Array<PackMapEnvDataLocalV47> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV47> dataGlobal ;
};

typedef PackMapEnvironmentV47 Gw2Structenv;

/* Version: 46, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV46 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV46 {
    helpers::PtrStruct<PackMapEnvDataLightV46> lights ;
};

struct PackMapEnvDataLightingCharV17 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLayerAttributesV46 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV46 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV46> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV46 {
    helpers::Array<PackMapEnvDataLayerV46> layers ;
};

struct PackMapEnvDataColoredLightRingsV17 {
    float2 range;
    byte4 colors[6];
    float distances[6];
};

struct PackMapEnvDataEffectV46 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV46 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV46 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV17 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV46 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV46 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV46 {
    PackMapEnvDataSkyCardAttributesV46 day;
    PackMapEnvDataSkyCardAttributesV46 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV46 {
    helpers::Array<PackMapEnvDataSkyCardV46> cards ;
};

struct PackMapEnvDataWaterV46 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV46 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV46 {
    helpers::Array<PackMapEnvDataLightingV46> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV17> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV46> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV17> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV46> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV46> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV46> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV17> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV46> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV46> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV46> water ;
    helpers::PtrStruct<PackMapEnvDataWindV46> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV46 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV46 {
    helpers::Array<PackMapEnvDataLightingV46> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV17> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV46> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV17> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV46> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV46> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV46> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV17> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV46> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV46> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV46> water ;
    helpers::PtrStruct<PackMapEnvDataWindV46> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    helpers::Array<PackMapEnvDataSkyModeTexV46> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV46 {
    helpers::Array<PackMapEnvDataLocalV46> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV46> dataGlobal ;
};

typedef PackMapEnvironmentV46 Gw2Structenv;

/* Version: 45, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV45 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV45 {
    helpers::PtrStruct<PackMapEnvDataLightV45> lights ;
};

struct PackMapEnvDataLightingCharV16 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLayerAttributesV45 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV45 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV45> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV45 {
    helpers::Array<PackMapEnvDataLayerV45> layers ;
};

struct PackMapEnvDataColoredLightRingsV16 {
    float2 range;
    byte4 colors[6];
    float distances[6];
};

struct PackMapEnvDataEffectV45 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV45 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV45 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV16 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV45 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV45 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV45 {
    PackMapEnvDataSkyCardAttributesV45 day;
    PackMapEnvDataSkyCardAttributesV45 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV45 {
    helpers::Array<PackMapEnvDataSkyCardV45> cards ;
};

struct PackMapEnvDataWaterV45 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV45 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV45 {
    helpers::Array<PackMapEnvDataLightingV45> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV16> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV45> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV16> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV45> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV45> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV45> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV16> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV45> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV45> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV45> water ;
    helpers::PtrStruct<PackMapEnvDataWindV45> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV45 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV45 {
    helpers::Array<PackMapEnvDataLightingV45> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV16> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV45> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV16> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV45> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV45> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV45> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV16> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV45> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV45> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV45> water ;
    helpers::PtrStruct<PackMapEnvDataWindV45> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    helpers::Array<PackMapEnvDataSkyModeTexV45> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV45 {
    helpers::Array<PackMapEnvDataLocalV45> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV45> dataGlobal ;
};

typedef PackMapEnvironmentV45 Gw2Structenv;

/* Version: 44, ReferencedFunction: 0x4104058000000001 */
struct PackMapEnvDataLightV44 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV44 {
    helpers::PtrStruct<PackMapEnvDataLightV44> lights ;
};

struct PackMapEnvDataLightingCharV15 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLayerAttributesV44 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV44 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV44> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV44 {
    helpers::Array<PackMapEnvDataLayerV44> layers ;
};

struct PackMapEnvDataColoredLightRingsV15 {
    float2 range;
    byte4 colors[6];
    float distances[6];
};

struct PackMapEnvDataEffectV44 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV44 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV44 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV15 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV44 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV44 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV44 {
    PackMapEnvDataSkyCardAttributesV44 day;
    PackMapEnvDataSkyCardAttributesV44 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV44 {
    helpers::Array<PackMapEnvDataSkyCardV44> cards ;
};

struct PackMapEnvDataWaterV44 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV44 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV44 {
    helpers::Array<PackMapEnvDataLightingV44> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV15> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV44> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV15> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV44> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV44> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV44> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV15> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV44> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV44> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV44> water ;
    helpers::PtrStruct<PackMapEnvDataWindV44> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV44 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV44 {
    helpers::Array<PackMapEnvDataLightingV44> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV15> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV44> clouds ;
    helpers::PtrStruct<PackMapEnvDataColoredLightRingsV15> coloredLightRings ;
    helpers::PtrStruct<PackMapEnvDataEffectV44> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV44> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV44> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV15> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV44> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV44> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV44> water ;
    helpers::PtrStruct<PackMapEnvDataWindV44> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    helpers::Array<PackMapEnvDataSkyModeTexV44> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV44 {
    helpers::Array<PackMapEnvDataLocalV44> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV44> dataGlobal ;
};

typedef PackMapEnvironmentV44 Gw2Structenv;

/* Version: 43, ReferencedFunction: 0x410403D000000001 */
struct PackMapEnvDataLightV43 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV43 {
    helpers::PtrStruct<PackMapEnvDataLightV43> lights ;
};

struct PackMapEnvDataLightingCharV14 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLayerAttributesV43 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
    float fadeWidth;
    float fadeEnd;
};

struct PackMapEnvDataLayerV43 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV43> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV43 {
    helpers::Array<PackMapEnvDataLayerV43> layers ;
};

struct PackMapEnvDataEffectV43 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV43 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV43 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV14 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV43 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV43 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
    float brightness;
};

struct PackMapEnvDataSkyCardV43 {
    PackMapEnvDataSkyCardAttributesV43 day;
    PackMapEnvDataSkyCardAttributesV43 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV43 {
    helpers::Array<PackMapEnvDataSkyCardV43> cards ;
};

struct PackMapEnvDataWaterV43 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapEnvDataWindV43 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV43 {
    helpers::Array<PackMapEnvDataLightingV43> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV14> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV43> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV43> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV43> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV43> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV14> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV43> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV43> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV43> water ;
    helpers::PtrStruct<PackMapEnvDataWindV43> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV43 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV43 {
    helpers::Array<PackMapEnvDataLightingV43> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV14> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV43> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV43> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV43> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV43> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV14> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV43> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV43> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV43> water ;
    helpers::PtrStruct<PackMapEnvDataWindV43> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    helpers::Array<PackMapEnvDataSkyModeTexV43> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV43 {
    helpers::Array<PackMapEnvDataLocalV43> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV43> dataGlobal ;
};

typedef PackMapEnvironmentV43 Gw2Structenv;

/* Version: 42, ReferencedFunction: 0x4104030000000001 */
struct PackMapEnvDataLightV42 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV42 {
    helpers::PtrStruct<PackMapEnvDataLightV42> lights ;
};

struct PackMapEnvDataLightingCharV13 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLayerAttributesV42 {
    float brightness;
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV42 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV42> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV42 {
    helpers::Array<PackMapEnvDataLayerV42> layers ;
};

struct PackMapEnvDataEffectV42 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV42 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV42 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV13 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV42 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV42 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV42 {
    PackMapEnvDataSkyCardAttributesV42 day;
    PackMapEnvDataSkyCardAttributesV42 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV42 {
    helpers::Array<PackMapEnvDataSkyCardV42> cards ;
};

struct PackMapEnvDataWaterV42 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
};

struct PackMapEnvDataWindV42 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV42 {
    helpers::Array<PackMapEnvDataLightingV42> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV13> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV42> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV42> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV42> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV42> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV13> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV42> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV42> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV42> water ;
    helpers::PtrStruct<PackMapEnvDataWindV42> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV42 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV42 {
    helpers::Array<PackMapEnvDataLightingV42> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV13> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV42> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV42> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV42> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV42> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV13> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV42> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV42> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV42> water ;
    helpers::PtrStruct<PackMapEnvDataWindV42> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    helpers::Array<PackMapEnvDataSkyModeTexV42> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV42 {
    helpers::Array<PackMapEnvDataLocalV42> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV42> dataGlobal ;
};

typedef PackMapEnvironmentV42 Gw2Structenv;

/* Version: 41, ReferencedFunction: 0x4104019000000001 */
struct PackMapEnvDataLightV41 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV41 {
    helpers::PtrStruct<PackMapEnvDataLightV41> lights ;
};

struct PackMapEnvDataLightingCharV12 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLayerAttributesV41 {
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV41 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV41> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV41 {
    helpers::Array<PackMapEnvDataLayerV41> layers ;
};

struct PackMapEnvDataEffectV41 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV41 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV41 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV12 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV41 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV41 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV41 {
    PackMapEnvDataSkyCardAttributesV41 day;
    PackMapEnvDataSkyCardAttributesV41 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV41 {
    helpers::Array<PackMapEnvDataSkyCardV41> cards ;
};

struct PackMapEnvDataWaterV41 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    float depthAttenuation;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
};

struct PackMapEnvDataWindV41 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV41 {
    helpers::Array<PackMapEnvDataLightingV41> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV12> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV41> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV41> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV41> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV41> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV12> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV41> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV41> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV41> water ;
    helpers::PtrStruct<PackMapEnvDataWindV41> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV41 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV41 {
    helpers::Array<PackMapEnvDataLightingV41> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV12> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV41> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV41> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV41> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV41> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV12> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV41> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV41> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV41> water ;
    helpers::PtrStruct<PackMapEnvDataWindV41> wind ;
    helpers::WString name;
    helpers::Array<byte> nightMods ;
    helpers::Array<PackMapEnvDataSkyModeTexV41> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV41 {
    helpers::Array<PackMapEnvDataLocalV41> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV41> dataGlobal ;
};

typedef PackMapEnvironmentV41 Gw2Structenv;

/* Version: 40, ReferencedFunction: 0x4104015000000001 */
struct PackMapEnvDataLightV40 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV40 {
    helpers::PtrStruct<PackMapEnvDataLightV40> lights ;
};

struct PackMapEnvDataLightingCharV11 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLayerAttributesV40 {
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV40 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV40> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV40 {
    helpers::Array<PackMapEnvDataLayerV40> layers ;
};

struct PackMapEnvDataEffectV40 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV40 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV40 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV11 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV40 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV40 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV40 {
    PackMapEnvDataSkyCardAttributesV40 day;
    PackMapEnvDataSkyCardAttributesV40 night;
    dword flags;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV40 {
    helpers::Array<PackMapEnvDataSkyCardV40> cards ;
};

struct PackMapEnvDataWaterV40 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
    float depthAttenuation;
};

struct PackMapEnvDataWindV40 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV40 {
    helpers::Array<PackMapEnvDataLightingV40> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV11> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV40> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV40> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV40> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV40> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV11> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV40> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV40> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV40> water ;
    helpers::PtrStruct<PackMapEnvDataWindV40> wind ;
    helpers::WString name;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV40 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV40 {
    helpers::Array<PackMapEnvDataLightingV40> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV11> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV40> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV40> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV40> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV40> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV11> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV40> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV40> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV40> water ;
    helpers::PtrStruct<PackMapEnvDataWindV40> wind ;
    helpers::WString name;
    helpers::Array<PackMapEnvDataSkyModeTexV40> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV40 {
    helpers::Array<PackMapEnvDataLocalV40> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV40> dataGlobal ;
};

typedef PackMapEnvironmentV40 Gw2Structenv;

/* Version: 39, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV39 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV39 {
    helpers::PtrStruct<PackMapEnvDataLightV39> lights ;
};

struct PackMapEnvDataLightingCharV10 {
    float sunScale;
    float saturation;
    float sunFill;
    float ambScale;
    float ambFill;
    byte flags;
};

struct PackMapEnvDataLayerAttributesV39 {
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV39 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV39> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV39 {
    helpers::Array<PackMapEnvDataLayerV39> layers ;
};

struct PackMapEnvDataEffectV39 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV39 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV39 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV10 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV39 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV39 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV39 {
    PackMapEnvDataSkyCardAttributesV39 day;
    PackMapEnvDataSkyCardAttributesV39 night;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV39 {
    helpers::Array<PackMapEnvDataSkyCardV39> cards ;
};

struct PackMapEnvDataWaterV39 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
    float depthAttenuation;
};

struct PackMapEnvDataWindV39 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV39 {
    helpers::Array<PackMapEnvDataLightingV39> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV10> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV39> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV39> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV39> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV39> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV10> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV39> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV39> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV39> water ;
    helpers::PtrStruct<PackMapEnvDataWindV39> wind ;
    helpers::WString name;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
    qword guid;
};

struct PackMapEnvDataSkyModeTexV39 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV39 {
    helpers::Array<PackMapEnvDataLightingV39> lighting ;
    helpers::Array<PackMapEnvDataLightingCharV10> lightingChar ;
    helpers::Ptr<PackMapEnvDataCloudsV39> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV39> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV39> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV39> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV10> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV39> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV39> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV39> water ;
    helpers::PtrStruct<PackMapEnvDataWindV39> wind ;
    helpers::WString name;
    helpers::Array<PackMapEnvDataSkyModeTexV39> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV39 {
    helpers::Array<PackMapEnvDataLocalV39> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV39> dataGlobal ;
};

typedef PackMapEnvironmentV39 Gw2Structenv;

/* Version: 38, ReferencedFunction: 0x410400B000000001 */
struct PackMapEnvDataLightV38 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV38 {
    helpers::PtrStruct<PackMapEnvDataLightV38> lights ;
};

struct PackMapEnvDataLayerAttributesV38 {
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV38 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV38> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV38 {
    helpers::Array<PackMapEnvDataLayerV38> layers ;
};

struct PackMapEnvDataEffectV38 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
    float focalDepth;
    float focalRange;
};

struct PackMapEnvDataHazeV38 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV38 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV9 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV38 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV38 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV38 {
    PackMapEnvDataSkyCardAttributesV38 day;
    PackMapEnvDataSkyCardAttributesV38 night;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV38 {
    helpers::Array<PackMapEnvDataSkyCardV38> cards ;
};

struct PackMapEnvDataWaterV38 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
    float depthAttenuation;
};

struct PackMapEnvDataWindV38 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV38 {
    helpers::Array<PackMapEnvDataLightingV38> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV38> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV38> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV38> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV38> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV9> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV38> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV38> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV38> water ;
    helpers::PtrStruct<PackMapEnvDataWindV38> wind ;
    helpers::WString name;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
};

struct PackMapEnvDataSkyModeTexV38 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV38 {
    helpers::Array<PackMapEnvDataLightingV38> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV38> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV38> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV38> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV38> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV9> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV38> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV38> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV38> water ;
    helpers::PtrStruct<PackMapEnvDataWindV38> wind ;
    helpers::WString name;
    helpers::Array<PackMapEnvDataSkyModeTexV38> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV38 {
    helpers::Array<PackMapEnvDataLocalV38> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV38> dataGlobal ;
};

typedef PackMapEnvironmentV38 Gw2Structenv;

/* Version: 37, ReferencedFunction: 0x4104001000000001 */
struct PackMapEnvDataLightV37 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV37 {
    helpers::PtrStruct<PackMapEnvDataLightV37> lights ;
};

struct PackMapEnvDataLayerAttributesV37 {
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV37 {
    float altitude;
    float cutOut;
    float depth;
    float extent;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV37> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV37 {
    helpers::Array<PackMapEnvDataLayerV37> layers ;
};

struct PackMapEnvDataEffectV37 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
};

struct PackMapEnvDataHazeV37 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV37 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV8 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV37 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV37 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV37 {
    PackMapEnvDataSkyCardAttributesV37 day;
    PackMapEnvDataSkyCardAttributesV37 night;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV37 {
    helpers::Array<PackMapEnvDataSkyCardV37> cards ;
};

struct PackMapEnvDataWaterV37 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
    float depthAttenuation;
};

struct PackMapEnvDataWindV37 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV37 {
    helpers::Array<PackMapEnvDataLightingV37> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV37> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV37> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV37> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV37> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV8> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV37> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV37> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV37> water ;
    helpers::PtrStruct<PackMapEnvDataWindV37> wind ;
    helpers::WString name;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
};

struct PackMapEnvDataSkyModeTexV37 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV37 {
    helpers::Array<PackMapEnvDataLightingV37> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV37> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV37> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV37> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV37> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV8> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV37> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV37> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV37> water ;
    helpers::PtrStruct<PackMapEnvDataWindV37> wind ;
    helpers::WString name;
    helpers::Array<PackMapEnvDataSkyModeTexV37> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV37 {
    helpers::Array<PackMapEnvDataLocalV37> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV37> dataGlobal ;
};

typedef PackMapEnvironmentV37 Gw2Structenv;

/* Version: 36, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV36 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV36 {
    helpers::PtrStruct<PackMapEnvDataLightV36> lights ;
};

struct PackMapEnvDataLayerAttributesV36 {
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV36 {
    float altitude;
    float cutOut;
    float depth;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV36> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV36 {
    helpers::Array<PackMapEnvDataLayerV36> layers ;
};

struct PackMapEnvDataEffectV36 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
};

struct PackMapEnvDataHazeV36 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV36 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV7 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV36 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV36 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV36 {
    PackMapEnvDataSkyCardAttributesV36 day;
    PackMapEnvDataSkyCardAttributesV36 night;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV36 {
    helpers::Array<PackMapEnvDataSkyCardV36> cards ;
};

struct PackMapEnvDataWaterV36 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
    float depthAttenuation;
};

struct PackMapEnvDataWindV36 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV36 {
    helpers::Array<PackMapEnvDataLightingV36> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV36> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV36> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV36> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV36> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV7> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV36> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV36> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV36> water ;
    helpers::PtrStruct<PackMapEnvDataWindV36> wind ;
    helpers::WString name;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
};

struct PackMapEnvDataSkyModeTexV36 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV36 {
    helpers::Array<PackMapEnvDataLightingV36> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV36> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV36> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV36> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV36> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV7> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV36> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV36> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV36> water ;
    helpers::PtrStruct<PackMapEnvDataWindV36> wind ;
    helpers::WString name;
    helpers::Array<PackMapEnvDataSkyModeTexV36> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV36 {
    helpers::Array<PackMapEnvDataLocalV36> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV36> dataGlobal ;
};

typedef PackMapEnvironmentV36 Gw2Structenv;

/* Version: 35, ReferencedFunction: 0x4103FFB000000001 */
struct PackMapEnvDataLightV35 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV35 {
    helpers::PtrStruct<PackMapEnvDataLightV35> lights ;
};

struct PackMapEnvDataLayerAttributesV35 {
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV35 {
    float altitude;
    float cutOut;
    float depth;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV35> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV35 {
    helpers::Array<PackMapEnvDataLayerV35> layers ;
};

struct PackMapEnvDataEffectV35 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
};

struct PackMapEnvDataHazeV35 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV35 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataPFieldCutoutV6 {
    helpers::WString name;
    float4 x;
    float4 y;
    float4 z;
};

struct PackMapEnvDataSkyV35 {
    byte flags;
    float dayBrightness;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightBrightness;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV35 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV35 {
    PackMapEnvDataSkyCardAttributesV35 day;
    PackMapEnvDataSkyCardAttributesV35 night;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV35 {
    helpers::Array<PackMapEnvDataSkyCardV35> cards ;
};

struct PackMapEnvDataWaterV35 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
};

struct PackMapEnvDataWindV35 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV35 {
    helpers::Array<PackMapEnvDataLightingV35> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV35> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV35> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV35> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV35> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV6> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV35> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV35> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV35> water ;
    helpers::PtrStruct<PackMapEnvDataWindV35> wind ;
    helpers::WString name;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
};

struct PackMapEnvDataSkyModeTexV35 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV35 {
    helpers::Array<PackMapEnvDataLightingV35> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV35> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV35> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV35> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV35> particleFields ;
    helpers::Array<PackMapEnvDataPFieldCutoutV6> particleFieldCutouts ;
    helpers::Ptr<PackMapEnvDataSkyV35> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV35> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV35> water ;
    helpers::PtrStruct<PackMapEnvDataWindV35> wind ;
    helpers::WString name;
    helpers::Array<PackMapEnvDataSkyModeTexV35> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV35 {
    helpers::Array<PackMapEnvDataLocalV35> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV35> dataGlobal ;
};

typedef PackMapEnvironmentV35 Gw2Structenv;

/* Version: 34, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV34 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV34 {
    helpers::PtrStruct<PackMapEnvDataLightV34> lights ;
};

struct PackMapEnvDataLayerAttributesV34 {
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV34 {
    float altitude;
    float cutOut;
    float depth;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV34> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV34 {
    helpers::Array<PackMapEnvDataLayerV34> layers ;
};

struct PackMapEnvDataEffectV34 {
    byte4 glow;
    byte4 tintColor;
    byte4 tintTargetColor;
    float saturation;
    float tintAmount;
    float tintFocus;
    byte4 glowLevel;
    float glowAmplify;
};

struct PackMapEnvDataHazeV34 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV34 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataSkyV34 {
    byte flags;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV34 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV34 {
    PackMapEnvDataSkyCardAttributesV34 day;
    PackMapEnvDataSkyCardAttributesV34 night;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV34 {
    helpers::Array<PackMapEnvDataSkyCardV34> cards ;
};

struct PackMapEnvDataWaterV34 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
};

struct PackMapEnvDataWindV34 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV34 {
    helpers::Array<PackMapEnvDataLightingV34> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV34> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV34> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV34> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV34> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV34> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV34> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV34> water ;
    helpers::PtrStruct<PackMapEnvDataWindV34> wind ;
    helpers::WString name;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
};

struct PackMapEnvDataSkyModeTexV34 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV34 {
    helpers::Array<PackMapEnvDataLightingV34> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV34> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV34> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV34> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV34> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV34> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV34> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV34> water ;
    helpers::PtrStruct<PackMapEnvDataWindV34> wind ;
    helpers::WString name;
    helpers::Array<PackMapEnvDataSkyModeTexV34> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV34 {
    helpers::Array<PackMapEnvDataLocalV34> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV34> dataGlobal ;
};

typedef PackMapEnvironmentV34 Gw2Structenv;

/* Version: 33, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV33 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV33 {
    helpers::PtrStruct<PackMapEnvDataLightV33> lights ;
};

struct PackMapEnvDataLayerAttributesV33 {
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV33 {
    float altitude;
    float cutOut;
    float depth;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV33> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV33 {
    helpers::Array<PackMapEnvDataLayerV33> layers ;
};

struct PackMapEnvDataEffectV33 {
    byte4 glow;
    byte4 tintColor;
    float saturation;
    float tintAmount;
    byte4 glowLevel;
    float glowAmplify;
};

struct PackMapEnvDataHazeV33 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV33 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataSkyV33 {
    byte flags;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV33 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV33 {
    PackMapEnvDataSkyCardAttributesV33 day;
    PackMapEnvDataSkyCardAttributesV33 night;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV33 {
    helpers::Array<PackMapEnvDataSkyCardV33> cards ;
};

struct PackMapEnvDataWaterV33 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
};

struct PackMapEnvDataWindV33 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV33 {
    helpers::Array<PackMapEnvDataLightingV33> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV33> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV33> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV33> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV33> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV33> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV33> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV33> water ;
    helpers::PtrStruct<PackMapEnvDataWindV33> wind ;
    helpers::WString name;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
};

struct PackMapEnvDataSkyModeTexV33 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV33 {
    helpers::Array<PackMapEnvDataLightingV33> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV33> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV33> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV33> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV33> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV33> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV33> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV33> water ;
    helpers::PtrStruct<PackMapEnvDataWindV33> wind ;
    helpers::WString name;
    helpers::Array<PackMapEnvDataSkyModeTexV33> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV33 {
    helpers::Array<PackMapEnvDataLocalV33> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV33> dataGlobal ;
};

typedef PackMapEnvironmentV33 Gw2Structenv;

/* Version: 32, ReferencedFunction: 0x4103FDF000000001 */
struct PackMapEnvDataLightV32 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV32 {
    helpers::PtrStruct<PackMapEnvDataLightV32> lights ;
};

struct PackMapEnvDataLayerAttributesV32 {
    float density;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV32 {
    float altitude;
    float cutOut;
    float depth;
    float scale;
    helpers::FileName texture;
    helpers::Array<PackMapEnvDataLayerAttributesV32> attributes ;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV32 {
    helpers::Array<PackMapEnvDataLayerV32> layers ;
};

struct PackMapEnvDataEffectV32 {
    byte4 glow;
    byte4 tintColor;
    float saturation;
    float tintAmount;
    byte4 glowLevel;
    float glowAmplify;
};

struct PackMapEnvDataHazeV32 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV32 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataSkyV32 {
    byte flags;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV32 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV32 {
    PackMapEnvDataSkyCardAttributesV32 day;
    PackMapEnvDataSkyCardAttributesV32 night;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV32 {
    helpers::Array<PackMapEnvDataSkyCardV32> cards ;
};

struct PackMapEnvDataWaterV32 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
};

struct PackMapEnvDataWindV32 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV32 {
    helpers::Array<PackMapEnvDataLightingV32> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV32> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV32> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV32> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV32> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV32> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV32> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV32> water ;
    helpers::PtrStruct<PackMapEnvDataWindV32> wind ;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
};

struct PackMapEnvDataSkyModeTexV32 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV32 {
    helpers::Array<PackMapEnvDataLightingV32> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV32> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV32> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV32> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV32> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV32> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV32> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV32> water ;
    helpers::PtrStruct<PackMapEnvDataWindV32> wind ;
    helpers::Array<PackMapEnvDataSkyModeTexV32> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV32 {
    helpers::Array<PackMapEnvDataLocalV32> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV32> dataGlobal ;
};

typedef PackMapEnvironmentV32 Gw2Structenv;

/* Version: 31, ReferencedFunction: 0x4103FD7000000001 */
struct PackMapEnvDataLightV31 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV31 {
    helpers::PtrStruct<PackMapEnvDataLightV31> lights ;
};

struct PackMapEnvDataLayerAttributesV31 {
    float density;
    float depth;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV31 {
    float altitude;
    float cutOut;
    float scale;
    helpers::FileName texture;
    PackMapEnvDataLayerAttributesV31 day;
    PackMapEnvDataLayerAttributesV31 night;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV31 {
    helpers::Array<PackMapEnvDataLayerV31> layers ;
};

struct PackMapEnvDataEffectV31 {
    byte4 glow;
    byte4 tintColor;
    float saturation;
    float tintAmount;
    byte4 glowLevel;
    float glowAmplify;
};

struct PackMapEnvDataHazeV31 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV31 {
    float altitude;
    float2 angle;
    float depth;
    float deviation;
    word extent;
    float fade;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataSkyV31 {
    byte flags;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV31 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV31 {
    PackMapEnvDataSkyCardAttributesV31 day;
    PackMapEnvDataSkyCardAttributesV31 night;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV31 {
    helpers::Array<PackMapEnvDataSkyCardV31> cards ;
};

struct PackMapEnvDataWaterV31 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    float patternEdge;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
};

struct PackMapEnvDataWindV31 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV31 {
    helpers::Array<PackMapEnvDataLightingV31> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV31> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV31> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV31> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV31> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV31> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV31> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV31> water ;
    helpers::PtrStruct<PackMapEnvDataWindV31> wind ;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
};

struct PackMapEnvDataSkyModeTexV31 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV31 {
    helpers::Array<PackMapEnvDataLightingV31> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV31> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV31> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV31> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV31> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV31> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV31> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV31> water ;
    helpers::PtrStruct<PackMapEnvDataWindV31> wind ;
    helpers::Array<PackMapEnvDataSkyModeTexV31> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV31 {
    helpers::Array<PackMapEnvDataLocalV31> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV31> dataGlobal ;
};

typedef PackMapEnvironmentV31 Gw2Structenv;

/* Version: 30, ReferencedFunction: 0x4103FCE000000001 */
struct PackMapEnvDataLightV30 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV30 {
    helpers::PtrStruct<PackMapEnvDataLightV30> lights ;
};

struct PackMapEnvDataLayerAttributesV30 {
    float density;
    float depth;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV30 {
    float altitude;
    float cutOut;
    float scale;
    helpers::FileName texture;
    PackMapEnvDataLayerAttributesV30 day;
    PackMapEnvDataLayerAttributesV30 night;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV30 {
    helpers::Array<PackMapEnvDataLayerV30> layers ;
};

struct PackMapEnvDataEffectV30 {
    byte4 glow;
    byte4 tintColor;
    float saturation;
    float tintAmount;
    byte4 glowLevel;
    float glowAmplify;
};

struct PackMapEnvDataHazeV30 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV30 {
    float2 angle;
    float deviation;
    word extent;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataSkyV30 {
    byte flags;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV30 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV30 {
    PackMapEnvDataSkyCardAttributesV30 day;
    PackMapEnvDataSkyCardAttributesV30 night;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV30 {
    helpers::Array<PackMapEnvDataSkyCardV30> cards ;
};

struct PackMapEnvDataWaterV30 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
};

struct PackMapEnvDataWindV30 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV30 {
    helpers::Array<PackMapEnvDataLightingV30> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV30> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV30> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV30> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV30> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV30> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV30> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV30> water ;
    helpers::PtrStruct<PackMapEnvDataWindV30> wind ;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
};

struct PackMapEnvDataSkyModeTexV30 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV30 {
    helpers::Array<PackMapEnvDataLightingV30> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV30> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV30> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV30> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV30> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV30> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV30> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV30> water ;
    helpers::PtrStruct<PackMapEnvDataWindV30> wind ;
    helpers::Array<PackMapEnvDataSkyModeTexV30> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV30 {
    helpers::Array<PackMapEnvDataLocalV30> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV30> dataGlobal ;
};

typedef PackMapEnvironmentV30 Gw2Structenv;

/* Version: 29, ReferencedFunction: 0x1 */
struct PackMapEnvDataLightV29 {
    byte3 color;
    float intensity;
    float3 direction;
};

struct PackMapEnvDataLightingV29 {
    helpers::PtrStruct<PackMapEnvDataLightV29> lights ;
};

struct PackMapEnvDataLayerAttributesV29 {
    float density;
    float depth;
    float haze;
    float lightIntensity;
    float2 velocity;
};

struct PackMapEnvDataLayerV29 {
    float altitude;
    float scale;
    helpers::FileName texture;
    PackMapEnvDataLayerAttributesV29 day;
    PackMapEnvDataLayerAttributesV29 night;
    helpers::WString name;
};

struct PackMapEnvDataCloudsV29 {
    helpers::Array<PackMapEnvDataLayerV29> layers ;
};

struct PackMapEnvDataEffectV29 {
    byte4 glow;
    byte4 tintColor;
    float saturation;
    float tintAmount;
    byte4 glowLevel;
    float glowAmplify;
};

struct PackMapEnvDataHazeV29 {
    byte4 distColor;
    float2 distRange;
    byte4 heightColor;
    float2 heightRange;
    float depthCue;
};

struct PackMapEnvDataPFieldV29 {
    float2 angle;
    float deviation;
    word extent;
    float3 fieldDirection;
    byte flags;
    float2 opacity;
    word particleCount;
    float2 rotation;
    float2 scaleX;
    float2 scaleY;
    float2 speed;
    dword2 texColRow;
    word texFPS;
    helpers::FileName texPath;
    byte type;
    helpers::WString name;
};

struct PackMapEnvDataSkyV29 {
    byte flags;
    float dayHazeBottom;
    float dayHazeDensity;
    float dayHazeFalloff;
    float dayLightIntensity;
    float dayStarDensity;
    float nightHazeBottom;
    float nightHazeDensity;
    float nightHazeFalloff;
    float nightLightIntensity;
    float nightStarDensity;
};

struct PackMapEnvDataSkyCardAttributesV29 {
    float azimuth;
    float density;
    float hazeDensity;
    float latitude;
    float lightIntensity;
    float minHaze;
    float2 scale;
    float speed;
    helpers::FileName texture;
    float4 textureUV;
};

struct PackMapEnvDataSkyCardV29 {
    PackMapEnvDataSkyCardAttributesV29 day;
    PackMapEnvDataSkyCardAttributesV29 night;
    helpers::WString name;
};

struct PackMapEnvDataSkyCardsV29 {
    helpers::Array<PackMapEnvDataSkyCardV29> cards ;
};

struct PackMapEnvDataWaterV29 {
    dword waterFlags;
    float animAmplitude;
    float animChoppiness;
    float2 animWind;
    float bumpAmount;
    float bumpAngle0;
    float bumpAngle1;
    float bumpScale0;
    float bumpScale1;
    float bumpSpeed0;
    float bumpSpeed1;
    float bumpTile0;
    float bumpTile1;
    float patternAngle;
    float patternTile;
    float patternSpeed;
    byte4 surfaceShallowColor;
    byte4 surfaceDeepColor;
    byte4 patternColor;
    float surfaceFresnel;
    float distortAmount;
    helpers::FileName bumpTexture;
    helpers::FileName patternTexture;
};

struct PackMapEnvDataWindV29 {
    byte azimuth;
    byte elevation;
    byte noise;
    byte speed;
    byte gust;
    byte gustFreq;
};

struct PackMapEnvDataLocalV29 {
    helpers::Array<PackMapEnvDataLightingV29> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV29> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV29> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV29> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV29> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV29> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV29> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV29> water ;
    helpers::PtrStruct<PackMapEnvDataWindV29> wind ;
    float3 center;
    float2 zRange;
    float fadeHorizInner;
    float fadeHorizOuter;
    float fadeVertical;
    byte type;
    helpers::Array<float2> vertexArray ;
};

struct PackMapEnvDataSkyModeTexV29 {
    helpers::FileName texPathNE;
    helpers::FileName texPathSW;
    helpers::FileName texPathT;
};

struct PackMapEnvDataGlobalV29 {
    helpers::Array<PackMapEnvDataLightingV29> lighting ;
    helpers::Ptr<PackMapEnvDataCloudsV29> clouds ;
    helpers::PtrStruct<PackMapEnvDataEffectV29> effect ;
    helpers::PtrStruct<PackMapEnvDataHazeV29> haze ;
    helpers::PtrStruct<PackMapEnvDataPFieldV29> particleFields ;
    helpers::Ptr<PackMapEnvDataSkyV29> sky ;
    helpers::Ptr<PackMapEnvDataSkyCardsV29> skyCards ;
    helpers::PtrStruct<PackMapEnvDataWaterV29> water ;
    helpers::PtrStruct<PackMapEnvDataWindV29> wind ;
    helpers::Array<PackMapEnvDataSkyModeTexV29> skyModeTex ;
    helpers::FileName starFile;
};

struct PackMapEnvironmentV29 {
    helpers::Array<PackMapEnvDataLocalV29> dataLocalArray ;
    helpers::Ptr<PackMapEnvDataGlobalV29> dataGlobal ;
};

typedef PackMapEnvironmentV29 Gw2Structenv;


/* ===============================================
 * Chunk: laye, versions: 2, strucTab: 0x141F9EE28
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x1 */
struct PackMapLayerProp {
    qword guid;
    helpers::Array<dword> layerIds ;
};

struct PackMapLayerLight {
    qword guid;
    helpers::Array<dword> layerIds ;
};

struct PackMapLayer {
    dword layerId;
    helpers::Array<dword4> metaData ;
};

struct PackMapLayers {
    helpers::Array<PackMapLayerProp> props ;
    helpers::Array<PackMapLayerLight> lights ;
    helpers::Array<PackMapLayer> layers ;
};

typedef PackMapLayers Gw2Structlaye;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapLayerProp {
    qword guid;
    helpers::Array<dword> layerIds ;
};

struct PackMapLayer {
    dword layerId;
    helpers::Array<dword4> metaData ;
};

struct PackMapLayers {
    helpers::Array<PackMapLayerProp> props ;
    helpers::Array<PackMapLayer> layers ;
};

typedef PackMapLayers Gw2Structlaye;


/* ===============================================
 * Chunk: lght, versions: 20, strucTab: 0x141F9F000
 * ===============================================
 */

/* Version: 19, ReferencedFunction: 0x41045D9000000001 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapPortalData {
    float fadeCamera;
    float fadeLight;
    float lighten;
    float darken;
};

struct PackMapPortalLight {
    qword guid;
    helpers::Array<float3> points ;
    helpers::Array<PackMapPortalData> portalData ;
    word broadId;
};

struct PackMapSpotShadow {
    helpers::FileName shadowFilename;
};

struct PackMapSpotLod {
    float distance;
    dword flags;
    dword lightFlags;
    byte3 color;
    float intensity;
    float nearDist;
    float farDist;
    float innerAngle;
    float outerAngle;
};

struct PackMapSpotLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float3 upDirection;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
    helpers::Ptr<PackMapSpotShadow> shadowData ;
    PackMapSpotLod lodData[2];
};

struct PackMapSpotLightgroups {
    qword guid;
    helpers::Array<PackMapSpotLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword2 dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 position;
    float3 extents;
    float3 rotation;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    helpers::Array<float3> floodPoints ;
    dword flags;
    helpers::Array<PackMapVolumeImage> images ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapLights {
    helpers::Array<PackMapPointLightgroups> pointLights ;
    helpers::Array<PackMapPortalLight> portalLights ;
    helpers::Array<PackMapSpotLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
    dword maxLightVsConstants;
};

typedef PackMapLights Gw2Structlght;

/* Version: 18, ReferencedFunction: 0x1 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapPortalData {
    float fadeCamera;
    float fadeLight;
    float lighten;
    float darken;
};

struct PackMapPortalLight {
    qword guid;
    helpers::Array<float3> points ;
    helpers::Array<PackMapPortalData> portalData ;
    word broadId;
};

struct PackMapSpotShadow {
    helpers::FileName shadowFilename;
};

struct PackMapSpotLod {
    float distance;
    dword flags;
    dword lightFlags;
    byte3 color;
    float intensity;
    float nearDist;
    float farDist;
    float innerAngle;
    float outerAngle;
};

struct PackMapSpotLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float3 upDirection;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
    helpers::Ptr<PackMapSpotShadow> shadowData ;
    PackMapSpotLod lodData[2];
};

struct PackMapSpotLightgroups {
    qword guid;
    helpers::Array<PackMapSpotLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword2 dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 position;
    float3 extents;
    float3 rotation;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    helpers::Array<float3> floodPoints ;
    dword flags;
    helpers::Array<PackMapVolumeImage> images ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapLights {
    helpers::Array<PackMapPointLightgroups> pointLights ;
    helpers::Array<PackMapPortalLight> portalLights ;
    helpers::Array<PackMapSpotLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapLights Gw2Structlght;

/* Version: 17, ReferencedFunction: 0x1 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapPortalData {
    float fadeCamera;
    float fadeLight;
    float lighten;
    float darken;
};

struct PackMapPortalLight {
    qword guid;
    helpers::Array<float3> points ;
    helpers::Array<PackMapPortalData> portalData ;
    word broadId;
};

struct PackMapSpotShadow {
    helpers::FileName shadowFilename;
};

struct PackMapSpotLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float3 upDirection;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
    helpers::Ptr<PackMapSpotShadow> shadowData ;
};

struct PackMapSpotLightgroups {
    qword guid;
    helpers::Array<PackMapSpotLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword2 dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 position;
    float3 extents;
    float3 rotation;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    helpers::Array<float3> floodPoints ;
    dword flags;
    helpers::Array<PackMapVolumeImage> images ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapLights {
    helpers::Array<PackMapPointLightgroups> pointLights ;
    helpers::Array<PackMapPortalLight> portalLights ;
    helpers::Array<PackMapSpotLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapLights Gw2Structlght;

/* Version: 16, ReferencedFunction: 0x1 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapPortalData {
    float fadeCamera;
    float fadeLight;
    float lighten;
    float darken;
};

struct PackMapPortalLight {
    qword guid;
    helpers::Array<float3> points ;
    helpers::Array<PackMapPortalData> portalData ;
    word broadId;
};

struct PackMapSpotShadow {
    helpers::FileName shadowFilename;
};

struct PackMapSpotLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
    helpers::Ptr<PackMapSpotShadow> shadowData ;
};

struct PackMapSpotLightgroups {
    qword guid;
    helpers::Array<PackMapSpotLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword2 dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 position;
    float3 extents;
    float3 rotation;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    helpers::Array<float3> floodPoints ;
    dword flags;
    helpers::Array<PackMapVolumeImage> images ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapLights {
    helpers::Array<PackMapPointLightgroups> pointLights ;
    helpers::Array<PackMapPortalLight> portalLights ;
    helpers::Array<PackMapSpotLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapLights Gw2Structlght;

/* Version: 15, ReferencedFunction: 0x41045CC000000001 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapPortalData {
    float fadeCamera;
    float fadeLight;
    float lighten;
    float darken;
};

struct PackMapPortalLight {
    qword guid;
    helpers::Array<float3> points ;
    helpers::Array<PackMapPortalData> portalData ;
    word broadId;
};

struct PackMapPointLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
};

struct PackMapSpotLightgroups {
    qword guid;
    helpers::Array<PackMapPointLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword2 dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 position;
    float3 extents;
    float3 rotation;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    helpers::Array<float3> floodPoints ;
    dword flags;
    helpers::Array<PackMapVolumeImage> images ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapLightsV15 {
    helpers::Array<PackMapPointLightgroups> pointLights ;
    helpers::Array<PackMapPortalLight> portalLights ;
    helpers::Array<PackMapSpotLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapLightsV15 Gw2Structlght;

/* Version: 14, ReferencedFunction: 0x1 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapProtalLight {
    qword guid;
    float fadeCamera;
    float fadeLight;
    float lighten;
    float darken;
    helpers::Array<float3> points ;
    word broadId;
};

struct PackMapPointLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
};

struct PackMapSpotLightgroups {
    qword guid;
    helpers::Array<PackMapPointLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword2 dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 position;
    float3 extents;
    float3 rotation;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    helpers::Array<float3> floodPoints ;
    dword flags;
    helpers::Array<PackMapVolumeImage> images ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapLightsV14 {
    helpers::Array<PackMapPointLightgroups> pointLights ;
    helpers::Array<PackMapProtalLight> portalLights ;
    helpers::Array<PackMapSpotLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapLightsV14 Gw2Structlght;

/* Version: 13, ReferencedFunction: 0x41045B2000000001 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapPointLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapPointLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword2 dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 position;
    float3 extents;
    float3 rotation;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    helpers::Array<float3> floodPoints ;
    dword flags;
    helpers::Array<PackMapVolumeImage> images ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> pointLights ;
    helpers::Array<PackMapPointLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapLights Gw2Structlght;

/* Version: 12, ReferencedFunction: 0x410458C000000001 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapPointLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapPointLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword2 dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 position;
    float3 extents;
    float3 rotation;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    float3 floodPoint;
    dword flags;
    helpers::Array<PackMapVolumeImage> images ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> pointLights ;
    helpers::Array<PackMapPointLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapLights Gw2Structlght;

/* Version: 11, ReferencedFunction: 0x410458C000000001 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapPointLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapPointLight> lights ;
    helpers::Array<PackMapCurve> curves ;
    word broadId;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword2 dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 position;
    float3 extents;
    float3 rotation;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    float3 floodPoint;
    dword flags;
    helpers::Array<PackMapVolumeImage> images ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> pointLights ;
    helpers::Array<PackMapPointLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapLights Gw2Structlght;

/* Version: 10, ReferencedFunction: 0x4104658000000001 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapPointLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapPointLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword2 dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 position;
    float3 extents;
    float3 rotation;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    float3 floodPoint;
    dword flags;
    helpers::Array<PackMapVolumeImage> images ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> pointLights ;
    helpers::Array<PackMapPointLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
};

typedef PackMapLights Gw2Structlght;

/* Version: 9, ReferencedFunction: 0x410464C000000001 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapPointLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapPointLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 position;
    float3 extents;
    float3 rotation;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    float3 floodPoint;
    dword flags;
    helpers::Array<PackMapVolumeImage> images ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> pointLights ;
    helpers::Array<PackMapPointLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
};

typedef PackMapLights Gw2Structlght;

/* Version: 8, ReferencedFunction: 0x4104644000000001 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapPointLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapPointLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 minExt;
    float3 maxExt;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    float3 floodPoint;
    helpers::Array<PackMapVolumeImage> images ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> pointLights ;
    helpers::Array<PackMapPointLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
};

typedef PackMapLights Gw2Structlght;

/* Version: 7, ReferencedFunction: 0x1 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapPointLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapPointLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 minExt;
    float3 maxExt;
    float2 intensities;
    float4 pack;
    helpers::WString name;
    helpers::Array<PackMapVolumeImage> images ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> pointLights ;
    helpers::Array<PackMapPointLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
};

typedef PackMapLights Gw2Structlght;

/* Version: 6, ReferencedFunction: 0x1 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapPointLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapPointLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapVolumeImage {
    helpers::FileName filename;
    dword dims;
    dword format;
    helpers::Array<byte> image ;
};

struct PackMapVolumeLight {
    qword guid;
    float3 minExt;
    float3 maxExt;
    float2 intensities;
    float4 pack;
    helpers::Array<PackMapVolumeImage> images ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> pointLights ;
    helpers::Array<PackMapPointLightgroups> spotLights ;
    helpers::Array<PackMapVolumeLight> volumeLights ;
};

typedef PackMapLights Gw2Structlght;

/* Version: 5, ReferencedFunction: 0x4104627000000001 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapPointLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
    float3 direction;
    float innerAngle;
    float outerAngle;
    helpers::FileName textureName;
};

struct PackMapPointLightgroups {
    qword guid;
    helpers::Array<PackMapPointLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> pointLights ;
    helpers::Array<PackMapPointLightgroups> spotLights ;
};

typedef PackMapLights Gw2Structlght;

/* Version: 4, ReferencedFunction: 0x4104605000000001 */
struct PackMapLight {
    float3 position;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    float offset;
    float amplitude;
    dword curveType;
};

struct PackMapLightgroups {
    qword guid;
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> lights ;
};

typedef PackMapLights Gw2Structlght;

/* Version: 3, ReferencedFunction: 0x41045EF000000001 */
struct PackMapLight {
    dword type;
    float3 position;
    float elevation;
    float azimuth;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapCurve {
    float gust;
    float gustFreq;
    float noise;
    float phase;
    dword curveType;
};

struct PackMapLightgroups {
    helpers::Array<PackMapLight> lights ;
    helpers::Array<PackMapCurve> curves ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> lights ;
};

typedef PackMapLights Gw2Structlght;

/* Version: 2, ReferencedFunction: 0x41045DA000000001 */
struct PackMapLight {
    dword type;
    float3 position;
    float elevation;
    float azimuth;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
    dword flags;
};

struct PackMapLightgroups {
    helpers::Array<PackMapLight> lights ;
};

struct PackMapLights {
    helpers::Array<PackMapLightgroups> groups ;
};

typedef PackMapLights Gw2Structlght;

/* Version: 1, ReferencedFunction: 0x1 */
struct PackMapLight {
    dword type;
    float3 position;
    float elevation;
    float azimuth;
    byte3 color;
    float intensity;
    float nearDistance;
    float farDistance;
};

struct PackMapLights {
    helpers::Array<PackMapLight> lights ;
};

typedef PackMapLights Gw2Structlght;


/* ===============================================
 * Chunk: msn, versions: 3, strucTab: 0x141F9F2C0
 * ===============================================
 */

/* Version: 2, ReferencedFunction: 0x1 */
struct PackMapInterestPoint {
    float3 position;
    float3 forward;
    helpers::WString description;
};

struct MapMission {
    helpers::Array<PackMapInterestPoint> interestPoint ;
};

typedef MapMission Gw2Structmsn;

/* Version: 1, ReferencedFunction: 0x1 */
struct PackMapInterestPoint {
    float3 position;
    float3 forward;
};

struct MapMission {
    helpers::Array<PackMapInterestPoint> interestPoint ;
};

typedef MapMission Gw2Structmsn;


/* ===============================================
 * Chunk: nm15, versions: 4, strucTab: 0x141F9D240
 * ===============================================
 */

/* Version: 3, ReferencedFunction: 0x4016287000000001 */
struct PackMapNavMeshChunkV3 {
    dword chunkIndex;
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

struct PackMapNavMeshMoverV3 {
    dword chunkIndex;
    qword mapPropId;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> mediatorData ;
};

struct PackMapNavMeshV3 {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    helpers::Array<PackMapNavMeshChunkV3> chunkArray ;
    helpers::Array<PackMapNavMeshMoverV3> dynamicArray ;
};

typedef PackMapNavMeshV3 Gw2Structnm15;

/* Version: 2, ReferencedFunction: 0x1 */
struct PackMapNavMeshChunkV2 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

struct PackMapNavMeshMoverV2 {
    qword mapPropId;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> mediatorData ;
};

struct PackMapNavMeshV2 {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    helpers::Array<PackMapNavMeshChunkV2> chunkArray ;
    helpers::Array<PackMapNavMeshMoverV2> dynamicArray ;
};

typedef PackMapNavMeshV2 Gw2Structnm15;

/* Version: 1, ReferencedFunction: 0x41046B2000000001 */
struct PackMapNavMeshChunkV1 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

struct PackMapNavMeshV1 {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    helpers::Array<PackMapNavMeshChunkV1> chunkArray ;
};

typedef PackMapNavMeshV1 Gw2Structnm15;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapNavMeshChunkV0 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

struct PackMapNavMeshV0 {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    helpers::Array<PackMapNavMeshChunkV0> chunkArray ;
};

typedef PackMapNavMeshV0 Gw2Structnm15;


/* ===============================================
 * Chunk: nmex, versions: 4, strucTab: 0x141F9D2A0
 * ===============================================
 */

/* Version: 3, ReferencedFunction: 0x1 */
struct PackMapNavMeshChunkExternalV3 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::FileName filename;
};

struct PackMapNavMeshMoverV3 {
    dword chunkIndex;
    qword mapPropId;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> mediatorData ;
};

struct PackMapNavMeshExternalV3 {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    helpers::Array<PackMapNavMeshChunkExternalV3> chunkArray ;
    helpers::Array<PackMapNavMeshMoverV3> dynamicArray ;
};

typedef PackMapNavMeshExternalV3 Gw2Structnmex;

/* Version: 2, ReferencedFunction: 0x1 */
struct PackMapNavMeshChunkExternalV2 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::FileName filename;
};

struct PackMapNavMeshMoverV2 {
    qword mapPropId;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> mediatorData ;
};

struct PackMapNavMeshExternalV2 {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    helpers::Array<PackMapNavMeshChunkExternalV2> chunkArray ;
    helpers::Array<PackMapNavMeshMoverV2> dynamicArray ;
};

typedef PackMapNavMeshExternalV2 Gw2Structnmex;

/* Version: 1, ReferencedFunction: 0x1 */
struct PackMapNavMeshChunkExternalV1 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::FileName filename;
};

struct PackMapNavMeshExternalV1 {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    helpers::Array<PackMapNavMeshChunkExternalV1> chunkArray ;
};

typedef PackMapNavMeshExternalV1 Gw2Structnmex;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapNavMeshChunkExternalV0 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::FileName filename;
};

struct PackMapNavMeshExternalV0 {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    helpers::Array<PackMapNavMeshChunkExternalV0> chunkArray ;
};

typedef PackMapNavMeshExternalV0 Gw2Structnmex;


/* ===============================================
 * Chunk: obs, versions: 3, strucTab: 0x141F9F310
 * ===============================================
 */

/* Version: 2, ReferencedFunction: 0x1 */
struct PackMapEditCollision {
    dword token;
    dword flags;
    helpers::Array<float3> bottmVertices ;
    helpers::Array<float3> topVertices ;
    helpers::WString name;
    qword surface;
};

struct MapObstacles {
    helpers::Array<PackMapEditCollision> obstacles ;
};

typedef MapObstacles Gw2Structobs;

/* Version: 1, ReferencedFunction: 0x1 */
struct PackMapEditCollision {
    dword token;
    dword flags;
    helpers::Array<float3> bottmVertices ;
    helpers::Array<float3> topVertices ;
    helpers::WString name;
};

struct MapObstacles {
    helpers::Array<PackMapEditCollision> obstacles ;
};

typedef MapObstacles Gw2Structobs;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapEditCollision {
    dword token;
    dword flags;
    helpers::Array<float3> bottmVertices ;
    helpers::Array<float3> topVertices ;
};

struct MapObstacles {
    helpers::Array<PackMapEditCollision> obstacles ;
};

typedef MapObstacles Gw2Structobs;


/* ===============================================
 * Chunk: occ, versions: 1, strucTab: 0x141F9F480
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct MapOcclusion {
    dword token;
    dword flags;
    helpers::Array<float3> vertices ;
    helpers::WString name;
};

struct MapOcclusions {
    helpers::Array<MapOcclusion> Occlusions ;
};

typedef MapOcclusions Gw2Structocc;


/* ===============================================
 * Chunk: octm, versions: 1, strucTab: 0x141F9F498
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct MapOcclusionTome {
    dword enableTomeQueries;
    helpers::Array<byte> tome ;
    helpers::Array<byte> propIDMap ;
    helpers::Array<byte> reserved ;
};

typedef MapOcclusionTome Gw2Structoctm;


/* ===============================================
 * Chunk: parm, versions: 1, strucTab: 0x141F9F4B0
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct MapParam {
    float4 rect;
    dword flags;
    byte16 guid;
};

typedef MapParam Gw2Structparm;


/* ===============================================
 * Chunk: phys, versions: 11, strucTab: 0x141F9F660
 * ===============================================
 */

/* Version: 10, ReferencedFunction: 0x1 */
struct PackMapPhysicsMeshV10 {
    helpers::Array<word> indexArray ;
    helpers::Array<float3> vertexArray ;
    helpers::Array<byte> moppCodeData ;
};

struct PackMapPhysicsObjectV10 {
    helpers::Ptr<PackMapPhysicsMeshV10> mesh ;
    helpers::Array<byte> sceneFilePtr ;
};

struct PackMapPhysicsObjectRefV10 {
    qword sequence;
    dword objectIndex;
};

struct PackMapPhysicsGeometryV10 {
    helpers::WString filePath;
    byte quantizedExtents;
    helpers::Array<PackMapPhysicsObjectRefV10> objRefArray ;
    helpers::Array<word> surface ;
};

struct PackMapPhysicsModelPropV10 {
    qword token;
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelZoneV8 {
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelObstacleV10 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapPhysicsBlockV10 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsObjectV10> objectArray ;
    helpers::Array<PackMapPhysicsGeometryV10> geometryArray ;
    helpers::Array<PackMapPhysicsModelPropV10> propModelArray ;
    helpers::Array<PackMapPhysicsModelPropV10> debrisModelArray ;
    helpers::Array<PackMapPhysicsModelZoneV8> zoneModelArray ;
    helpers::Array<PackMapPhysicsModelObstacleV10> obsModelArray ;
};

struct PackMapPhysicsV10 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsBlockV10> blockArray ;
};

typedef PackMapPhysicsV10 Gw2Structphys;

/* Version: 9, ReferencedFunction: 0x4103F61000000001 */
struct PackMapPhysicsMeshV9 {
    helpers::Array<word> indexArray ;
    helpers::Array<float3> vertexArray ;
    helpers::Array<byte> moppCodeData ;
};

struct PackMapPhysicsObjectV9 {
    helpers::Ptr<PackMapPhysicsMeshV9> mesh ;
    helpers::Array<byte> sceneFilePtr ;
};

struct PackMapPhysicsObjectRefV9 {
    qword sequence;
    dword objectIndex;
};

struct PackMapPhysicsGeometryV9 {
    helpers::WString filePath;
    byte quantizedExtents;
    helpers::Array<PackMapPhysicsObjectRefV9> objRefArray ;
};

struct PackMapPhysicsModelPropV9 {
    qword token;
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelZoneV7 {
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelObstacleV9 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapPhysicsBlockV9 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsObjectV9> objectArray ;
    helpers::Array<PackMapPhysicsGeometryV9> geometryArray ;
    helpers::Array<PackMapPhysicsModelPropV9> propModelArray ;
    helpers::Array<PackMapPhysicsModelPropV9> debrisModelArray ;
    helpers::Array<PackMapPhysicsModelZoneV7> zoneModelArray ;
    helpers::Array<PackMapPhysicsModelObstacleV9> obsModelArray ;
};

struct PackMapPhysicsV9 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsBlockV9> blockArray ;
};

typedef PackMapPhysicsV9 Gw2Structphys;

/* Version: 8, ReferencedFunction: 0x1 */
struct PackMapPhysicsMeshV8 {
    helpers::Array<word> indexArray ;
    helpers::Array<float3> vertexArray ;
    helpers::Array<byte> moppCodeData ;
};

struct SceneBoxShapeV7 {
    float3 dimensions;
    float3 position;
    float4 rotation;
};

struct SceneSphereShapeV7 {
    float3 center;
    float radius;
};

struct SceneCapsuleShapeV7 {
    float3 p0;
    float3 p1;
    float radius;
};

struct SceneMeshShapeV7 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
};

struct SceneFilePhysicsV7 {
    helpers::Array<SceneBoxShapeV7> boxes ;
    helpers::Array<SceneSphereShapeV7> spheres ;
    helpers::Array<SceneCapsuleShapeV7> capsules ;
    helpers::Array<SceneMeshShapeV7> meshes ;
};

struct ScenePathNodeV6 {
    float3 position;
    float4 rotation;
    dword flags;
    float smoothing;
    byte singlesided;
};

struct ScenePathV6 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV6> points ;
    byte closed;
};

struct SceneEdgeV6 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV6 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV6> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
    helpers::Array<byte> surfaces ;
};

struct SceneGameSurfaceV6 {
    helpers::Array<qword> tokens ;
};

struct SceneFileGameV6 {
    helpers::Array<ScenePathV6> paths ;
    helpers::Array<SceneGameMeshV6> meshes ;
    helpers::Array<SceneGameSurfaceV6> surfaces ;
};

struct PackMapPhysicsObjectV8 {
    helpers::Ptr<PackMapPhysicsMeshV8> mesh ;
    helpers::Ptr<SceneFilePhysicsV7> physics ;
    helpers::Ptr<SceneFileGameV6> game ;
};

struct PackMapPhysicsObjectRefV8 {
    qword sequence;
    dword objectIndex;
};

struct PackMapPhysicsGeometryV8 {
    helpers::WString filePath;
    byte quantizedExtents;
    helpers::Array<PackMapPhysicsObjectRefV8> objRefArray ;
};

struct PackMapPhysicsModelPropV8 {
    qword token;
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelZoneV6 {
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelObstacleV8 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapPhysicsBlockV8 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsObjectV8> objectArray ;
    helpers::Array<PackMapPhysicsGeometryV8> geometryArray ;
    helpers::Array<PackMapPhysicsModelPropV8> propModelArray ;
    helpers::Array<PackMapPhysicsModelPropV8> debrisModelArray ;
    helpers::Array<PackMapPhysicsModelZoneV6> zoneModelArray ;
    helpers::Array<PackMapPhysicsModelObstacleV8> obsModelArray ;
};

struct PackMapPhysicsV8 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsBlockV8> blockArray ;
};

typedef PackMapPhysicsV8 Gw2Structphys;

/* Version: 7, ReferencedFunction: 0x1 */
struct PackMapPhysicsMeshV7 {
    helpers::Array<word> indexArray ;
    helpers::Array<float3> vertexArray ;
    helpers::Array<byte> moppCodeData ;
};

struct SceneBoxShapeV7 {
    float3 dimensions;
    float3 position;
    float4 rotation;
};

struct SceneSphereShapeV7 {
    float3 center;
    float radius;
};

struct SceneCapsuleShapeV7 {
    float3 p0;
    float3 p1;
    float radius;
};

struct SceneMeshShapeV7 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
};

struct SceneFilePhysicsV7 {
    helpers::Array<SceneBoxShapeV7> boxes ;
    helpers::Array<SceneSphereShapeV7> spheres ;
    helpers::Array<SceneCapsuleShapeV7> capsules ;
    helpers::Array<SceneMeshShapeV7> meshes ;
};

struct ScenePathNodeV6 {
    float3 position;
    float4 rotation;
    dword flags;
    float smoothing;
    byte singlesided;
};

struct ScenePathV6 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV6> points ;
    byte closed;
};

struct SceneEdgeV6 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV6 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV6> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
    helpers::Array<byte> surfaces ;
};

struct SceneGameSurfaceV6 {
    helpers::Array<qword> tokens ;
};

struct SceneFileGameV6 {
    helpers::Array<ScenePathV6> paths ;
    helpers::Array<SceneGameMeshV6> meshes ;
    helpers::Array<SceneGameSurfaceV6> surfaces ;
};

struct PackMapPhysicsObjectV7 {
    helpers::Ptr<PackMapPhysicsMeshV7> mesh ;
    helpers::Ptr<SceneFilePhysicsV7> physics ;
    helpers::Ptr<SceneFileGameV6> game ;
};

struct PackMapPhysicsObjectRefV7 {
    qword sequence;
    dword objectIndex;
};

struct PackMapPhysicsGeometryV7 {
    helpers::WString filePath;
    byte quantizedExtents;
    helpers::Array<PackMapPhysicsObjectRefV7> objRefArray ;
};

struct PackMapPhysicsModelPropV7 {
    qword token;
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelZoneV5 {
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelObstacleV7 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapPhysicsBlockV7 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsObjectV7> objectArray ;
    helpers::Array<PackMapPhysicsGeometryV7> geometryArray ;
    helpers::Array<PackMapPhysicsModelPropV7> propModelArray ;
    helpers::Array<PackMapPhysicsModelZoneV5> zoneModelArray ;
    helpers::Array<PackMapPhysicsModelObstacleV7> obsModelArray ;
};

struct PackMapPhysicsV7 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsBlockV7> blockArray ;
};

typedef PackMapPhysicsV7 Gw2Structphys;

/* Version: 6, ReferencedFunction: 0x4103F60000000001 */
struct PackMapPhysicsMeshV6 {
    helpers::Array<word> indexArray ;
    helpers::Array<float3> vertexArray ;
    helpers::Array<byte> moppCodeData ;
};

struct SceneBoxShapeV7 {
    float3 dimensions;
    float3 position;
    float4 rotation;
};

struct SceneSphereShapeV7 {
    float3 center;
    float radius;
};

struct SceneCapsuleShapeV7 {
    float3 p0;
    float3 p1;
    float radius;
};

struct SceneMeshShapeV7 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
};

struct SceneFilePhysicsV7 {
    helpers::Array<SceneBoxShapeV7> boxes ;
    helpers::Array<SceneSphereShapeV7> spheres ;
    helpers::Array<SceneCapsuleShapeV7> capsules ;
    helpers::Array<SceneMeshShapeV7> meshes ;
};

struct ScenePathNodeV6 {
    float3 position;
    float4 rotation;
    dword flags;
    float smoothing;
    byte singlesided;
};

struct ScenePathV6 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV6> points ;
    byte closed;
};

struct SceneEdgeV6 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV6 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV6> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
    helpers::Array<byte> surfaces ;
};

struct SceneGameSurfaceV6 {
    helpers::Array<qword> tokens ;
};

struct SceneFileGameV6 {
    helpers::Array<ScenePathV6> paths ;
    helpers::Array<SceneGameMeshV6> meshes ;
    helpers::Array<SceneGameSurfaceV6> surfaces ;
};

struct PackMapPhysicsObjectV6 {
    helpers::Ptr<PackMapPhysicsMeshV6> mesh ;
    helpers::Ptr<SceneFilePhysicsV7> physics ;
    helpers::Ptr<SceneFileGameV6> game ;
};

struct PackMapPhysicsObjectRefV6 {
    qword sequence;
    dword objectIndex;
};

struct PackMapPhysicsGeometryV6 {
    helpers::WString filePath;
    byte quantizedExtents;
    helpers::Array<PackMapPhysicsObjectRefV6> objRefArray ;
};

struct PackMapPhysicsModelPropV6 {
    qword token;
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelZoneV4 {
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelObstacleV6 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapPhysicsV6 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsObjectV6> objectArray ;
    helpers::Array<PackMapPhysicsGeometryV6> geometryArray ;
    helpers::Array<PackMapPhysicsModelPropV6> propModelArray ;
    helpers::Array<PackMapPhysicsModelZoneV4> zoneModelArray ;
    helpers::Array<PackMapPhysicsModelObstacleV6> obsModelArray ;
};

typedef PackMapPhysicsV6 Gw2Structphys;

/* Version: 5, ReferencedFunction: 0x4103F60000000001 */
struct PackMapPhysicsMeshV5 {
    helpers::Array<word> indexArray ;
    helpers::Array<float3> vertexArray ;
    helpers::Array<byte> moppCodeData ;
};

struct SceneBoxShapeV7 {
    float3 dimensions;
    float3 position;
    float4 rotation;
};

struct SceneSphereShapeV7 {
    float3 center;
    float radius;
};

struct SceneCapsuleShapeV7 {
    float3 p0;
    float3 p1;
    float radius;
};

struct SceneMeshShapeV7 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
};

struct SceneFilePhysicsV7 {
    helpers::Array<SceneBoxShapeV7> boxes ;
    helpers::Array<SceneSphereShapeV7> spheres ;
    helpers::Array<SceneCapsuleShapeV7> capsules ;
    helpers::Array<SceneMeshShapeV7> meshes ;
};

struct ScenePathNodeV5 {
    float3 position;
    float4 rotation;
    float radius;
    dword flags;
    float smoothing;
    byte singlesided;
};

struct ScenePathV5 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV5> points ;
    byte closed;
};

struct SceneEdgeV5 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV5 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV5> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
    helpers::Array<dword> surfaceFlags ;
};

struct SceneFileGameV5 {
    helpers::Array<ScenePathV5> paths ;
    helpers::Array<SceneGameMeshV5> meshes ;
};

struct PackMapPhysicsObjectV5 {
    helpers::Ptr<PackMapPhysicsMeshV5> mesh ;
    helpers::Ptr<SceneFilePhysicsV7> physics ;
    helpers::Ptr<SceneFileGameV5> game ;
};

struct PackMapPhysicsObjectRefV5 {
    qword sequence;
    dword objectIndex;
};

struct PackMapPhysicsGeometryV5 {
    helpers::WString filePath;
    byte quantizedExtents;
    helpers::Array<PackMapPhysicsObjectRefV5> objRefArray ;
};

struct PackMapPhysicsModelPropV5 {
    qword token;
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelZoneV3 {
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelObstacleV5 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapPhysicsV5 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsObjectV5> objectArray ;
    helpers::Array<PackMapPhysicsGeometryV5> geometryArray ;
    helpers::Array<PackMapPhysicsModelPropV5> propModelArray ;
    helpers::Array<PackMapPhysicsModelZoneV3> zoneModelArray ;
    helpers::Array<PackMapPhysicsModelObstacleV5> obsModelArray ;
};

typedef PackMapPhysicsV5 Gw2Structphys;

/* Version: 4, ReferencedFunction: 0x4103F60000000001 */
struct PackMapPhysicsMeshV4 {
    helpers::Array<word> indexArray ;
    helpers::Array<float3> vertexArray ;
    helpers::Array<byte> moppCodeData ;
};

struct SceneBoxShapeV7 {
    float3 dimensions;
    float3 position;
    float4 rotation;
};

struct SceneSphereShapeV7 {
    float3 center;
    float radius;
};

struct SceneCapsuleShapeV7 {
    float3 p0;
    float3 p1;
    float radius;
};

struct SceneMeshShapeV7 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
};

struct SceneFilePhysicsV7 {
    helpers::Array<SceneBoxShapeV7> boxes ;
    helpers::Array<SceneSphereShapeV7> spheres ;
    helpers::Array<SceneCapsuleShapeV7> capsules ;
    helpers::Array<SceneMeshShapeV7> meshes ;
};

struct ScenePathNodeV5 {
    float3 position;
    float4 rotation;
    float radius;
    dword flags;
    float smoothing;
    byte singlesided;
};

struct ScenePathV5 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV5> points ;
    byte closed;
};

struct SceneEdgeV5 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV5 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV5> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
    helpers::Array<dword> surfaceFlags ;
};

struct SceneFileGameV5 {
    helpers::Array<ScenePathV5> paths ;
    helpers::Array<SceneGameMeshV5> meshes ;
};

struct PackMapPhysicsObjectV4 {
    helpers::Ptr<PackMapPhysicsMeshV4> mesh ;
    helpers::Ptr<SceneFilePhysicsV7> physics ;
    helpers::Ptr<SceneFileGameV5> game ;
};

struct PackMapPhysicsObjectRefV4 {
    qword sequence;
    dword objectIndex;
};

struct PackMapPhysicsGeometryV4 {
    helpers::FileName filePath;
    byte quantizedExtents;
    helpers::Array<PackMapPhysicsObjectRefV4> objRefArray ;
};

struct PackMapPhysicsModelPropV4 {
    qword token;
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelZoneV2 {
    float scale;
    float3 translate;
    float4 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelObstacleV4 {
    float3 translate;
    dword geometryIndex;
};

struct PackMapPhysicsV4 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsObjectV4> objectArray ;
    helpers::Array<PackMapPhysicsGeometryV4> geometryArray ;
    helpers::Array<PackMapPhysicsModelPropV4> propModelArray ;
    helpers::Array<PackMapPhysicsModelZoneV2> zoneModelArray ;
    helpers::Array<PackMapPhysicsModelObstacleV4> obsModelArray ;
};

typedef PackMapPhysicsV4 Gw2Structphys;

/* Version: 3, ReferencedFunction: 0x1 */
struct PackMapPhysicsMeshV3 {
    helpers::Array<word> indexArray ;
    helpers::Array<float3> vertexArray ;
    helpers::Array<byte> moppCodeData ;
};

struct PackMapPhysicsShapeDataV3 {
    float scale;
    helpers::Array<byte> gameDataPtr ;
};

struct PackMapPhysicsGeometryV3 {
    helpers::Array<dword> shapeDataIndexArray ;
};

struct PackMapPhysicsModelPropV3 {
    dword2 token;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelZoneV1 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsV3 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsMeshV3> meshArray ;
    helpers::Array<PackMapPhysicsShapeDataV3> shapeArray ;
    helpers::Array<PackMapPhysicsGeometryV3> geometryArray ;
    helpers::Array<PackMapPhysicsModelPropV3> propModelArray ;
    helpers::Array<PackMapPhysicsModelZoneV1> zoneModelArray ;
};

typedef PackMapPhysicsV3 Gw2Structphys;

/* Version: 2, ReferencedFunction: 0x4103F5F000000001 */
struct PackMapPhysicsShapeDataV2 {
    float scale;
    helpers::Array<byte> gameDataPtr ;
};

struct PackMapPhysicsGeometryV2 {
    helpers::Array<dword> shapeDataIndexArray ;
};

struct PackMapPhysicsModelPropV2 {
    dword2 token;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsModelZoneV0 {
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsV2 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsShapeDataV2> shapeArray ;
    helpers::Array<PackMapPhysicsGeometryV2> geometryArray ;
    helpers::Array<PackMapPhysicsModelPropV2> propModelArray ;
    helpers::Array<PackMapPhysicsModelZoneV0> zoneModelArray ;
};

typedef PackMapPhysicsV2 Gw2Structphys;

/* Version: 1, ReferencedFunction: 0x4103F5E000000001 */
struct PackMapPhysicsShapeDataV1 {
    float scale;
    helpers::Array<byte> gameDataPtr ;
};

struct PackMapPhysicsGeometryV1 {
    helpers::Array<dword> shapeDataIndexArray ;
};

struct PackMapPhysicsModelPropV1 {
    dword2 token;
    float scale;
    float3 translate;
    float3 rotate;
    dword geometryIndex;
};

struct PackMapPhysicsV1 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<PackMapPhysicsShapeDataV1> shapeArray ;
    helpers::Array<PackMapPhysicsGeometryV1> geometryArray ;
    helpers::Array<PackMapPhysicsModelPropV1> propModelArray ;
};

typedef PackMapPhysicsV1 Gw2Structphys;


/* ===============================================
 * Chunk: pnvm, versions: 3, strucTab: 0x141F9F770
 * ===============================================
 */

/* Version: 2, ReferencedFunction: 0x1 */
struct PackMapPhysicsNavMeshChunkV2 {
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> mediatorMoppData ;
    helpers::Array<byte> coarseGraphData ;
};

struct PackMapPhysicsNavMeshV2 {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    float erosionRadius;
    helpers::Array<PackMapPhysicsNavMeshChunkV2> chunkArray ;
};

typedef PackMapPhysicsNavMeshV2 Gw2Structpnvm;

/* Version: 1, ReferencedFunction: 0x410421F000000001 */
struct PackMapPhysicsNavMeshChunkV1 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> mediatorMoppData ;
    helpers::Array<byte> coarseGraphData ;
};

struct PackMapPhysicsNavMeshV1 {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    helpers::Array<PackMapPhysicsNavMeshChunkV1> chunkArray ;
};

typedef PackMapPhysicsNavMeshV1 Gw2Structpnvm;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapPhysicsNavMeshChunkV0 {
    float3 boundsMin;
    float3 boundsMax;
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> mediatorMoppData ;
};

struct PackMapPhysicsNavMeshV0 {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    helpers::Array<PackMapPhysicsNavMeshChunkV0> chunkArray ;
};

typedef PackMapPhysicsNavMeshV0 Gw2Structpnvm;


/* ===============================================
 * Chunk: prp2, versions: 22, strucTab: 0x141F9F7C0
 * ===============================================
 */

/* Version: 21, ReferencedFunction: 0x1 */
struct PackMapPropConstantV18 {
    dword token;
    float4 constant;
    dword submodel;
};

struct PackMapPropObjV21 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<PackMapPropConstantV18> constants ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    dword reserved;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
};

struct PackMapPropObjAnimSeqV21 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<PackMapPropConstantV18> constants ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    dword reserved;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    qword animSequence;
};

struct PackMapPropTransformV21 {
    float3 position;
    float3 rotation;
    float scale;
};

struct PackMapPropObjInstanceV21 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<PackMapPropConstantV18> constants ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    dword reserved;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    helpers::Array<PackMapPropTransformV21> transforms ;
    helpers::Array<qword> origGuidArray ;
};

struct PackMapPropObjToolV21 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
};

struct PackMapPropObjMetaV21 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<PackMapPropConstantV18> constants ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    dword reserved;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    dword layerMask;
    byte glomType;
    qword parent;
    float3 glomOrigin;
};

struct PackMapPropObjVolumeV21 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
    float3 glomClipScale;
    float3 position;
    float3 rotation;
    float scale;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapPropV21 {
    helpers::Array<PackMapPropObjV21> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV21> propAnimArray ;
    helpers::Array<PackMapPropObjInstanceV21> propInstanceArray ;
    helpers::Array<PackMapPropObjToolV21> propToolArray ;
    helpers::Array<PackMapPropObjMetaV21> propMetaArray ;
    helpers::Array<PackMapPropObjVolumeV21> propVolumeArray ;
    helpers::WString reserved;
    PackBroadphaseType broadPhase;
    dword nextBroadId;
};

typedef PackMapPropV21 Gw2Structprp2;

/* Version: 20, ReferencedFunction: 0x1 */
struct PackMapPropConstantV17 {
    dword token;
    float4 constant;
    dword submodel;
};

struct PackMapPropObjV20 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<PackMapPropConstantV17> constants ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
};

struct PackMapPropObjAnimSeqV20 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<PackMapPropConstantV17> constants ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    qword animSequence;
};

struct PackMapPropTransformV20 {
    float3 position;
    float3 rotation;
    float scale;
};

struct PackMapPropObjInstanceV20 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<PackMapPropConstantV17> constants ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    helpers::Array<PackMapPropTransformV20> transforms ;
    helpers::Array<qword> origGuidArray ;
};

struct PackMapPropObjToolV20 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
};

struct PackMapPropObjMetaV20 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<PackMapPropConstantV17> constants ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    dword layerMask;
    byte glomType;
    qword parent;
    float3 glomOrigin;
};

struct PackMapPropObjVolumeV20 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
    float3 glomClipScale;
    float3 position;
    float3 rotation;
    float scale;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapPropV20 {
    helpers::Array<PackMapPropObjV20> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV20> propAnimArray ;
    helpers::Array<PackMapPropObjInstanceV20> propInstanceArray ;
    helpers::Array<PackMapPropObjToolV20> propToolArray ;
    helpers::Array<PackMapPropObjMetaV20> propMetaArray ;
    helpers::Array<PackMapPropObjVolumeV20> propVolumeArray ;
    PackBroadphaseType broadPhase;
    dword nextBroadId;
};

typedef PackMapPropV20 Gw2Structprp2;

/* Version: 19, ReferencedFunction: 0x1 */
struct PackMapPropObjV19 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<dword> constTokens ;
    helpers::Array<float4> constValues ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
};

struct PackMapPropObjAnimSeqV19 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<dword> constTokens ;
    helpers::Array<float4> constValues ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    qword animSequence;
};

struct PackMapPropTransformV19 {
    float3 position;
    float3 rotation;
    float scale;
};

struct PackMapPropObjInstanceV19 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<dword> constTokens ;
    helpers::Array<float4> constValues ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    helpers::Array<PackMapPropTransformV19> transforms ;
    helpers::Array<qword> origGuidArray ;
};

struct PackMapPropObjToolV19 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
};

struct PackMapPropObjMetaV19 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    helpers::Array<dword> constTokens ;
    helpers::Array<float4> constValues ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    dword layerMask;
    byte glomType;
    qword parent;
    float3 glomOrigin;
};

struct PackMapPropObjVolumeV19 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
    float3 glomClipScale;
    float3 position;
    float3 rotation;
    float scale;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapPropV19 {
    helpers::Array<PackMapPropObjV19> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV19> propAnimArray ;
    helpers::Array<PackMapPropObjInstanceV19> propInstanceArray ;
    helpers::Array<PackMapPropObjToolV19> propToolArray ;
    helpers::Array<PackMapPropObjMetaV19> propMetaArray ;
    helpers::Array<PackMapPropObjVolumeV19> propVolumeArray ;
    PackBroadphaseType broadPhase;
    dword nextBroadId;
};

typedef PackMapPropV19 Gw2Structprp2;

/* Version: 18, ReferencedFunction: 0x1 */
struct PackMapPropObjV18 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
};

struct PackMapPropObjAnimSeqV18 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    qword animSequence;
};

struct PackMapPropTransformV18 {
    float3 position;
    float3 rotation;
    float scale;
};

struct PackMapPropObjInstanceV18 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    helpers::Array<PackMapPropTransformV18> transforms ;
    helpers::Array<qword> origGuidArray ;
};

struct PackMapPropObjToolV18 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
};

struct PackMapPropObjMetaV18 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    byte sortLayer;
    dword layerMask;
    byte glomType;
    qword parent;
    float3 glomOrigin;
};

struct PackMapPropObjVolumeV18 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
    float3 glomClipScale;
    float3 position;
    float3 rotation;
    float scale;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapPropV18 {
    helpers::Array<PackMapPropObjV18> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV18> propAnimArray ;
    helpers::Array<PackMapPropObjInstanceV18> propInstanceArray ;
    helpers::Array<PackMapPropObjToolV18> propToolArray ;
    helpers::Array<PackMapPropObjMetaV18> propMetaArray ;
    helpers::Array<PackMapPropObjVolumeV18> propVolumeArray ;
    PackBroadphaseType broadPhase;
    dword nextBroadId;
};

typedef PackMapPropV18 Gw2Structprp2;

/* Version: 17, ReferencedFunction: 0x4104454000000001 */
struct PackMapPropObjV17 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
};

struct PackMapPropObjAnimSeqV17 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    qword animSequence;
};

struct PackMapPropTransformV17 {
    float3 position;
    float3 rotation;
    float scale;
};

struct PackMapPropObjInstanceV17 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    helpers::Array<PackMapPropTransformV17> transforms ;
    helpers::Array<qword> origGuidArray ;
};

struct PackMapPropObjToolV17 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
};

struct PackMapPropObjMetaV17 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    dword layerMask;
    byte glomType;
    qword parent;
    float3 glomOrigin;
};

struct PackMapPropObjVolumeV17 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
    float3 glomClipScale;
    float3 position;
    float3 rotation;
    float scale;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapPropV17 {
    helpers::Array<PackMapPropObjV17> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV17> propAnimArray ;
    helpers::Array<PackMapPropObjInstanceV17> propInstanceArray ;
    helpers::Array<PackMapPropObjToolV17> propToolArray ;
    helpers::Array<PackMapPropObjMetaV17> propMetaArray ;
    helpers::Array<PackMapPropObjVolumeV17> propVolumeArray ;
    PackBroadphaseType broadPhase;
    dword nextBroadId;
};

typedef PackMapPropV17 Gw2Structprp2;

/* Version: 16, ReferencedFunction: 0x1 */
struct PackMapPropObjV16 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
};

struct PackMapPropObjAnimSeqV16 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    qword animSequence;
};

struct PackMapPropTransformV16 {
    float3 position;
    float3 rotation;
    float scale;
};

struct PackMapPropObjInstanceV16 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    helpers::Array<PackMapPropTransformV16> transforms ;
    helpers::Array<qword> origGuidArray ;
};

struct PackMapPropObjToolV16 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
};

struct PackMapPropObjMetaV16 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    qword permutation;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    dword layerMask;
    byte glomType;
    qword parent;
    float3 glomOrigin;
};

struct PackMapPropObjVolumeV16 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
    float3 glomClipScale;
    float3 position;
    float3 rotation;
    float scale;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapPropV16 {
    helpers::Array<PackMapPropObjV16> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV16> propAnimArray ;
    helpers::Array<PackMapPropObjInstanceV16> propInstanceArray ;
    helpers::Array<PackMapPropObjToolV16> propToolArray ;
    helpers::Array<PackMapPropObjMetaV16> propMetaArray ;
    helpers::Array<PackMapPropObjVolumeV16> propVolumeArray ;
    PackBroadphaseType broadPhase;
    dword nextBroadId;
};

typedef PackMapPropV16 Gw2Structprp2;

/* Version: 15, ReferencedFunction: 0x1 */
struct PackMapPropObjV15 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
};

struct PackMapPropObjAnimSeqV15 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    qword animSequence;
};

struct PackMapPropTransformV15 {
    float3 position;
    float3 rotation;
    float scale;
};

struct PackMapPropObjInstanceV15 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    helpers::Array<PackMapPropTransformV15> transforms ;
    helpers::Array<qword> origGuidArray ;
};

struct PackMapPropObjToolV15 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
};

struct PackMapPropObjMetaV15 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float4 bounds;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    dword layerMask;
    byte glomType;
    qword parent;
    float3 glomOrigin;
};

struct PackMapPropObjVolumeV15 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
    float3 glomClipScale;
    float3 position;
    float3 rotation;
    float scale;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapPropV15 {
    helpers::Array<PackMapPropObjV15> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV15> propAnimArray ;
    helpers::Array<PackMapPropObjInstanceV15> propInstanceArray ;
    helpers::Array<PackMapPropObjToolV15> propToolArray ;
    helpers::Array<PackMapPropObjMetaV15> propMetaArray ;
    helpers::Array<PackMapPropObjVolumeV15> propVolumeArray ;
    PackBroadphaseType broadPhase;
    dword nextBroadId;
};

typedef PackMapPropV15 Gw2Structprp2;

/* Version: 14, ReferencedFunction: 0x410444D000000001 */
struct PackMapPropObjV14 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
};

struct PackMapPropObjAnimSeqV14 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    qword animSequence;
};

struct PackMapPropObjToolV14 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
};

struct PackMapPropObjMetaV14 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    word bucketId;
    byte byte;
    dword layerMask;
    byte glomType;
    qword parent;
    float3 glomOrigin;
};

struct PackMapPropObjVolumeV14 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
    float3 glomClipScale;
    float3 position;
    float3 rotation;
    float scale;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapPropV14 {
    helpers::Array<PackMapPropObjV14> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV14> propAnimArray ;
    helpers::Array<PackMapPropObjToolV14> propToolArray ;
    helpers::Array<PackMapPropObjMetaV14> propMetaArray ;
    helpers::Array<PackMapPropObjVolumeV14> propVolumeArray ;
    PackBroadphaseType broadPhase;
    dword nextBroadId;
};

typedef PackMapPropV14 Gw2Structprp2;

/* Version: 13, ReferencedFunction: 0x1 */
struct PackMapPropObjV13 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    byte byte;
};

struct PackMapPropObjAnimSeqV13 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    byte byte;
    qword animSequence;
};

struct PackMapPropObjToolV13 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
};

struct PackMapPropObjMetaV13 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    byte byte;
    dword layerMask;
    byte glomType;
    qword parent;
    float3 glomOrigin;
};

struct PackMapPropObjVolumeV13 {
    qword guid;
    dword layerMask;
    byte glomType;
    helpers::Array<qword> children ;
    float3 glomClipScale;
    float3 position;
    float3 rotation;
    float scale;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapPropV13 {
    helpers::Array<PackMapPropObjV13> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV13> propAnimArray ;
    helpers::Array<PackMapPropObjToolV13> propToolArray ;
    helpers::Array<PackMapPropObjMetaV13> propMetaArray ;
    helpers::Array<PackMapPropObjVolumeV13> propVolumeArray ;
    PackBroadphaseType broadPhase;
    dword nextBroadId;
};

typedef PackMapPropV13 Gw2Structprp2;

/* Version: 12, ReferencedFunction: 0x41042C5000000001 */
struct PackMapPropObjV12 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    byte byte;
};

struct PackMapPropObjAnimSeqV12 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    byte byte;
    qword animSequence;
};

struct PackMapPropObjToolV12 {
    qword guid;
    dword layerMask;
    byte glomType;
};

struct PackMapPropObjMetaV12 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    byte byte;
    dword layerMask;
    byte glomType;
    qword parent;
    float3 glomOrigin;
};

struct PackMapPropObjVolumeV12 {
    qword guid;
    dword layerMask;
    byte glomType;
    float3 glomClipScale;
    float3 position;
    float3 rotation;
    float scale;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapPropV12 {
    helpers::Array<PackMapPropObjV12> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV12> propAnimArray ;
    helpers::Array<PackMapPropObjToolV12> propToolArray ;
    helpers::Array<PackMapPropObjMetaV12> propMetaArray ;
    helpers::Array<PackMapPropObjVolumeV12> propVolumeArray ;
    PackBroadphaseType broadPhase;
    dword nextBroadId;
};

typedef PackMapPropV12 Gw2Structprp2;

/* Version: 11, ReferencedFunction: 0x41042A6000000001 */
struct PackMapPropObjV11 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    byte byte;
};

struct PackMapPropObjAnimSeqV11 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    word broadId;
    byte byte;
    qword animSequence;
};

struct PackMapPropObjToolV11 {
    qword guid;
    dword layerMask;
    float3 glomOrigin;
    float3 glomClipScale;
    qword glomTargetId;
    byte glomType;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapPropV11 {
    helpers::Array<PackMapPropObjV11> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV11> propAnimArray ;
    helpers::Array<PackMapPropObjToolV11> propToolArray ;
    PackBroadphaseType broadPhase;
    dword nextBroadId;
};

typedef PackMapPropV11 Gw2Structprp2;

/* Version: 10, ReferencedFunction: 0x41044A4000000001 */
struct PackMapPropObjV10 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    byte byte;
};

struct PackMapPropObjAnimSeqV10 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    byte byte;
    qword animSequence;
};

struct PackMapPropObjToolV10 {
    qword guid;
    dword layerMask;
    float3 glomOrigin;
    float3 glomClipScale;
    qword glomTargetId;
    byte glomType;
};

struct PackMapPropV10 {
    helpers::Array<PackMapPropObjV10> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV10> propAnimArray ;
    helpers::Array<PackMapPropObjToolV10> propToolArray ;
};

typedef PackMapPropV10 Gw2Structprp2;

/* Version: 9, ReferencedFunction: 0x410448F000000001 */
struct PackMapPropObjV9 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    byte byte;
};

struct PackMapPropObjAnimSeqV9 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    byte byte;
    qword animSequence;
};

struct PackMapPropObjToolV9 {
    qword guid;
    dword layerMask;
    float3 glomOrigin;
    float3 glomClipScale;
    qword glomTargetId;
    byte glomType;
};

struct PackMapPropV9 {
    helpers::Array<PackMapPropObjV9> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV9> propAnimArray ;
    helpers::Array<PackMapPropObjToolV9> propToolArray ;
};

typedef PackMapPropV9 Gw2Structprp2;

/* Version: 8, ReferencedFunction: 0x1 */
struct PackMapPropObjV8 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    byte byte;
};

struct PackMapPropObjAnimSeqV8 {
    helpers::FileName filename;
    helpers::Array<filename> blitTextures ;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    byte byte;
    qword animSequence;
};

struct PackMapPropObjToolV8 {
    qword guid;
    dword layerMask;
    float3 glomOrigin;
    float3 glomClipScale;
    qword glomTargetId;
    byte glomType;
};

struct PackMapPropV8 {
    helpers::Array<PackMapPropObjV8> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV8> propAnimArray ;
    helpers::Array<PackMapPropObjToolV8> propToolArray ;
};

typedef PackMapPropV8 Gw2Structprp2;

/* Version: 7, ReferencedFunction: 0x4104488000000001 */
struct PackMapPropObjV7 {
    helpers::FileName filename;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    byte byte;
};

struct PackMapPropObjAnimSeqV7 {
    helpers::FileName filename;
    qword guid;
    float3 position;
    float3 rotation;
    byte4 color;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    byte byte;
    qword animSequence;
};

struct PackMapPropObjToolV7 {
    qword guid;
    dword layerMask;
    float3 glomOrigin;
    float3 glomClipScale;
    qword glomTargetId;
    byte glomType;
};

struct PackMapPropV7 {
    helpers::Array<PackMapPropObjV7> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV7> propAnimArray ;
    helpers::Array<PackMapPropObjToolV7> propToolArray ;
};

typedef PackMapPropV7 Gw2Structprp2;

/* Version: 6, ReferencedFunction: 0x410446D000000001 */
struct PackMapPropObjV6 {
    helpers::FileName filename;
    qword guid;
    float3 position;
    float3 rotation;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    byte byte;
};

struct PackMapPropObjAnimSeqV6 {
    helpers::FileName filename;
    qword guid;
    float3 position;
    float3 rotation;
    float scale;
    float lod1;
    float lod2;
    dword flags;
    byte byte;
    qword animSequence;
};

struct PackMapPropObjToolV6 {
    qword guid;
    dword layerMask;
    float3 glomOrigin;
    float3 glomClipScale;
    qword glomTargetId;
    byte glomType;
};

struct PackMapPropV6 {
    helpers::Array<PackMapPropObjV6> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV6> propAnimArray ;
    helpers::Array<PackMapPropObjToolV6> propToolArray ;
};

typedef PackMapPropV6 Gw2Structprp2;

/* Version: 5, ReferencedFunction: 0x1 */
struct PackMapPropObjV5 {
    helpers::FileName filename;
    qword guid;
    float3 position;
    float3 rotation;
    float scale;
    word lod1;
    word lod2;
    dword flags;
    byte byte;
};

struct PackMapPropObjAnimSeqV5 {
    helpers::FileName filename;
    qword guid;
    float3 position;
    float3 rotation;
    float scale;
    word lod1;
    word lod2;
    dword flags;
    byte byte;
    qword animSequence;
};

struct PackMapPropObjToolV5 {
    qword guid;
    dword layerMask;
    float3 glomOrigin;
    float3 glomClipScale;
    qword glomTargetId;
    byte glomType;
};

struct PackMapPropV5 {
    helpers::Array<PackMapPropObjV5> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV5> propAnimArray ;
    helpers::Array<PackMapPropObjToolV5> propToolArray ;
};

typedef PackMapPropV5 Gw2Structprp2;

/* Version: 4, ReferencedFunction: 0x1 */
struct PackMapPropObjV4 {
    helpers::FileName filename;
    qword guid;
    float3 position;
    float3 rotation;
    float scale;
    word lod1;
    word lod2;
    dword flags;
    byte byte;
};

struct PackMapPropObjAnimSeqV4 {
    helpers::FileName filename;
    qword guid;
    float3 position;
    float3 rotation;
    float scale;
    word lod1;
    word lod2;
    dword flags;
    byte byte;
    qword animSequence;
};

struct PackMapPropObjToolV4 {
    qword guid;
    dword layerMask;
};

struct PackMapPropV4 {
    helpers::Array<PackMapPropObjV4> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV4> propAnimArray ;
    helpers::Array<PackMapPropObjToolV4> propToolArray ;
};

typedef PackMapPropV4 Gw2Structprp2;

/* Version: 3, ReferencedFunction: 0x1 */
struct PackMapPropObjV3 {
    helpers::FileName filename;
    qword guid;
    float3 position;
    float3 rotation;
    float scale;
    word lod1;
    word lod2;
    dword flags;
};

struct PackMapPropObjAnimSeqV3 {
    helpers::FileName filename;
    qword guid;
    float3 position;
    float3 rotation;
    float scale;
    word lod1;
    word lod2;
    dword flags;
    qword animSequence;
};

struct PackMapPropObjToolV3 {
    qword guid;
    dword layerMask;
};

struct PackMapPropV3 {
    helpers::Array<PackMapPropObjV3> propArray ;
    helpers::Array<PackMapPropObjAnimSeqV3> propAnimArray ;
    helpers::Array<PackMapPropObjToolV3> propToolArray ;
};

typedef PackMapPropV3 Gw2Structprp2;


/* ===============================================
 * Chunk: reso, versions: 2, strucTab: 0x141FA0210
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x1 */
struct PackMapResourceMapNodeItemV1 {
    helpers::FileName filename;
    dword type;
    qword permutation;
};

struct PackMapResourceMapNodeV1 {
    float3 position;
    dword flags;
    helpers::Array<PackMapResourceMapNodeItemV1> itemArray ;
};

struct PackMapResourceMapV1 {
    helpers::Array<PackMapResourceMapNodeV1> nodeArray ;
};

typedef PackMapResourceMapV1 Gw2Structreso;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapResourceMapNodeItemV0 {
    helpers::FileName filename;
    dword type;
};

struct PackMapResourceMapNodeV0 {
    float3 position;
    dword flags;
    helpers::Array<PackMapResourceMapNodeItemV0> itemArray ;
};

struct PackMapResourceMapV0 {
    helpers::Array<PackMapResourceMapNodeV0> nodeArray ;
};

typedef PackMapResourceMapV0 Gw2Structreso;


/* ===============================================
 * Chunk: rive, versions: 6, strucTab: 0x141FA02C0
 * ===============================================
 */

/* Version: 5, ReferencedFunction: 0x41044E8000000001 */
struct PackMapRiverProperty {
    dword type;
    qword val;
    helpers::FileName strVal;
};

struct MapRiverReach {
    helpers::Array<PackMapRiverProperty> properties ;
};

struct MapRiver {
    qword guid;
    helpers::WString name;
    helpers::Array<PackMapRiverProperty> properties ;
    helpers::Array<float3> points ;
    helpers::Array<MapRiverReach> reaches ;
};

struct PackMapRivers {
    helpers::Array<MapRiver> rivers ;
};

typedef PackMapRivers Gw2Structrive;

/* Version: 4, ReferencedFunction: 0x1 */
struct MapRiverTextureMap {
    float scale;
    float speedX;
    float speedY;
    float tiling;
    dword flags;
    byte uvIndex;
};

struct MapRiverMaterial {
    helpers::FileName materialFile;
    helpers::Array<filename> textureFiles ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    helpers::Array<MapRiverTextureMap> textureMaps ;
    dword flags;
};

struct MapRiverReach {
    float width;
    float curveLength;
    float curvePercent;
    dword xTessellation;
    dword2 yTessellation;
    dword broadId;
    dword fvf;
    dword flags;
    helpers::Array<MapRiverMaterial> materials ;
    helpers::WString reserved;
};

struct MapRiver {
    qword guid;
    helpers::WString name;
    float xTiling;
    helpers::Array<float3> points ;
    helpers::Array<MapRiverReach> reaches ;
    dword flags;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapRivers {
    dword flags;
    dword nextBroadId;
    helpers::Array<MapRiver> rivers ;
    PackBroadphaseType broadPhase;
};

typedef PackMapRivers Gw2Structrive;

/* Version: 3, ReferencedFunction: 0x1 */
struct MapRiverTextureMap {
    float scale;
    float speedX;
    float speedY;
    float tiling;
    byte uvIndex;
};

struct MapRiverMaterial {
    helpers::FileName materialFile;
    helpers::Array<filename> textureFiles ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    helpers::Array<MapRiverTextureMap> textureMaps ;
};

struct MapRiverReach {
    float width;
    float curveLength;
    float curvePercent;
    dword xTessellation;
    dword2 yTessellation;
    dword broadId;
    dword fvf;
    dword flags;
    helpers::Array<MapRiverMaterial> materials ;
};

struct MapRiver {
    qword guid;
    helpers::WString name;
    float xTiling;
    helpers::Array<float3> points ;
    helpers::Array<MapRiverReach> reaches ;
    dword flags;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapRivers {
    dword flags;
    dword nextBroadId;
    helpers::Array<MapRiver> rivers ;
    PackBroadphaseType broadPhase;
};

typedef PackMapRivers Gw2Structrive;

/* Version: 2, ReferencedFunction: 0x1 */
struct MapRiverTextureMap {
    float scale;
    float speedX;
    float speedY;
    float tiling;
    byte uvIndex;
};

struct MapRiverMaterial {
    helpers::FileName materialFile;
    helpers::Array<filename> textureFiles ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    helpers::Array<MapRiverTextureMap> textureMaps ;
};

struct MapRiverReach {
    float width;
    float curveLength;
    float curvePercent;
    dword xTessellation;
    dword2 yTessellation;
    dword broadId;
    dword fvf;
    helpers::Array<MapRiverMaterial> materials ;
};

struct MapRiver {
    qword guid;
    helpers::WString name;
    float xTiling;
    helpers::Array<float3> points ;
    helpers::Array<MapRiverReach> reaches ;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapRivers {
    dword flags;
    dword nextBroadId;
    helpers::Array<MapRiver> rivers ;
    PackBroadphaseType broadPhase;
};

typedef PackMapRivers Gw2Structrive;

/* Version: 1, ReferencedFunction: 0x1 */
struct MapRiverTextureMap {
    float scale;
    float speedX;
    float speedY;
    float tiling;
    byte uvIndex;
};

struct MapRiverMaterial {
    helpers::FileName materialFile;
    helpers::Array<filename> textureFiles ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    helpers::Array<MapRiverTextureMap> textureMaps ;
};

struct MapRiverReach {
    float width;
    float curveLength;
    float curvePercent;
    dword xTessellation;
    dword2 yTessellation;
    dword broadId;
    helpers::Array<MapRiverMaterial> materials ;
};

struct MapRiver {
    qword guid;
    helpers::WString name;
    float xTiling;
    helpers::Array<float3> points ;
    helpers::Array<MapRiverReach> reaches ;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapRivers {
    dword flags;
    dword nextBroadId;
    helpers::Array<MapRiver> rivers ;
    PackBroadphaseType broadPhase;
};

typedef PackMapRivers Gw2Structrive;

/* Version: 0, ReferencedFunction: 0x1 */
struct MapRiverTextureMap {
    float scale;
    float speed;
    float tiling;
    byte uvIndex;
};

struct MapRiverMaterial {
    helpers::FileName materialFile;
    helpers::Array<filename> textureFiles ;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    helpers::Array<MapRiverTextureMap> textureMaps ;
};

struct MapRiverReach {
    float width;
    float curveLength;
    float curvePercent;
    dword xTessellation;
    dword2 yTessellation;
    dword broadId;
    helpers::Array<MapRiverMaterial> materials ;
};

struct MapRiver {
    qword guid;
    float xTiling;
    helpers::Array<float3> points ;
    helpers::Array<MapRiverReach> reaches ;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapRivers {
    dword flags;
    dword nextBroadId;
    helpers::Array<MapRiver> rivers ;
    PackBroadphaseType broadPhase;
};

typedef PackMapRivers Gw2Structrive;


/* ===============================================
 * Chunk: tlfs, versions: 1, strucTab: 0x141F9F4E0
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapToolFsFileV0 {
    helpers::FileName filename;
    qword time;
    helpers::Array<byte> dataPtr ;
};

struct PackMapToolFsV0 {
    helpers::Array<PackMapToolFsFileV0> filePtr ;
};

typedef PackMapToolFsV0 Gw2Structtlfs;


/* ===============================================
 * Chunk: shad, versions: 2, strucTab: 0x141FA03F0
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x41044FE000000001 */
struct PackMapShadowTileV1 {
    dword compressionMode;
    helpers::Array<byte> bytes ;
};

struct PackMapShadowV1 {
    dword2 shadowDims;
    dword2 tileDims;
    helpers::Array<PackMapShadowTileV1> tiles ;
    float worldToShadow[16];
    float2 s;
    float2 t;
    float2 u;
    float3 shadowEye;
    float3 shadowDir;
    float3 shadowUp;
};

typedef PackMapShadowV1 Gw2Structshad;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapShadowTileV0 {
    dword compressionMode;
    helpers::Array<byte> bytes ;
};

struct PackMapShadowV0 {
    dword2 shadowDims;
    dword2 tileDims;
    helpers::Array<PackMapShadowTileV0> tiles ;
    float worldToShadow[16];
    float2 s;
    float2 t;
    float2 u;
};

typedef PackMapShadowV0 Gw2Structshad;


/* ===============================================
 * Chunk: shex, versions: 2, strucTab: 0x141FA0420
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x1 */
struct PackMapShadowExtV1 {
    helpers::FileName filename;
    dword2 shadowDims;
};

typedef PackMapShadowExtV1 Gw2Structshex;


/* ===============================================
 * Chunk: shor, versions: 4, strucTab: 0x141FA0450
 * ===============================================
 */

/* Version: 3, ReferencedFunction: 0x41044FF000000001 */
struct MapShoreChain {
    float offset;
    float opacity;
    float animationSpeed;
    float2 edgeSize;
    dword flags;
    helpers::Array<float2> points ;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    float restTime;
    float2 fadeRanges[4];
    float simplifyDistMin;
    float simplifyDistMax;
    float simplifyDot;
};

struct MapShore {
    helpers::Array<MapShoreChain> chains ;
};

typedef MapShore Gw2Structshor;

/* Version: 2, ReferencedFunction: 0x1 */
struct MapShoreChain {
    float offset;
    float opacity;
    float animationSpeed;
    float2 edgeSize;
    dword flags;
    helpers::Array<float2> points ;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    float restTime;
    float2 fadeRanges[4];
};

struct MapShore {
    helpers::Array<MapShoreChain> chains ;
};

typedef MapShore Gw2Structshor;


/* ===============================================
 * Chunk: snd, versions: 1, strucTab: 0x141F9C9D0
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct MapLegacy {
    helpers::Array<byte> data ;
    helpers::Array<filename> files ;
};

typedef MapLegacy Gw2Structsnd;


/* ===============================================
 * Chunk: surf, versions: 3, strucTab: 0x141FA0810
 * ===============================================
 */

/* Version: 2, ReferencedFunction: 0x1 */
struct MapSurfaceAttribute {
    qword Id;
    qword Sound;
    dword flags;
};

struct MapSurfaceAttributeTool {
    helpers::WString name;
    helpers::WString category;
    byte4 color;
};

struct MapSurfaceOverride {
    qword surfaceId;
    helpers::Array<dword> bitArray ;
};

struct MapSurfaceTerrainOverride {
    dword2 chunkCoord;
    helpers::Array<MapSurfaceOverride> overrideArray ;
};

struct MapSurfacePropOverride {
    qword propId;
    helpers::Array<MapSurfaceOverride> overrideArray ;
};

struct MapSurfaces {
    helpers::Array<MapSurfaceAttribute> attributeData ;
    helpers::Array<MapSurfaceAttributeTool> toolData ;
    helpers::Array<MapSurfaceTerrainOverride> terrainArray ;
    helpers::Array<MapSurfacePropOverride> propArray ;
};

typedef MapSurfaces Gw2Structsurf;

/* Version: 1, ReferencedFunction: 0x1 */
struct MapSurfaceAttribute {
    qword Id;
    qword Sound;
    dword flags;
};

struct MapSurfaceAttributeTool {
    helpers::WString name;
    helpers::WString category;
    byte4 color;
};

struct MapSurfaces {
    helpers::Array<MapSurfaceAttribute> attributeData ;
    helpers::Array<MapSurfaceAttributeTool> toolData ;
};

typedef MapSurfaces Gw2Structsurf;

/* Version: 0, ReferencedFunction: 0x1 */
struct MapSurfaceMeta {
    word index;
    byte descriptor;
    byte data;
};

struct MapSurfaceChunk {
    dword coord[3];
    helpers::Array<MapSurfaceMeta> metadata ;
    helpers::Array<byte> typeData ;
};

struct MapSurfaces {
    helpers::Array<MapSurfaceChunk> chunkData ;
    helpers::Array<qword> typeData ;
};

typedef MapSurfaces Gw2Structsurf;


/* ===============================================
 * Chunk: zon2, versions: 23, strucTab: 0x141FA0F50
 * ===============================================
 */

/* Version: 22, ReferencedFunction: 0x1 */
struct PackMapZoneModelV23 {
    helpers::FileName filename;
    float probability;
    dword flags;
    float3 hslOffset;
    byte zOffsets[2];
    qword permutation;
};

struct PackMapZoneLayerDefV23 {
    byte type;
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    float2 hslRanges[4];
    float instanceScaleJitter;
    byte noise;
    dword layerFlags;
    helpers::FileName materialname;
    helpers::Array<PackMapZoneModelV23> modelArray ;
    helpers::Ptr<PackMapZoneModelV23> subModel ;
    helpers::WString reserved;
};

struct PackMapZonePageV11 {
    helpers::Array<byte> flags ;
    dword2 chunkCoord;
    byte seed;
    helpers::Array<dword> paintFlags ;
    helpers::WString string;
};

struct PackMapZonePageTableV11 {
    helpers::Array<PackMapZonePageV11> pageArray ;
    dword flags;
};

struct PackMapZoneDefV23 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV23> layerDefArray ;
    qword timeStamp;
    helpers::Ptr<PackMapZonePageTableV11> pageTable ;
    helpers::WString reserved;
};

struct PackMapZoneEncodingDataV23 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV23 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV23 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV23> encodeData ;
    helpers::Array<PackMapZoneCollideDataV23> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
    word broadId;
    helpers::WString reserved;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapZonesV23 {
    helpers::Array<PackMapZoneDefV23> zoneDefArray ;
    helpers::Array<PackMapZoneV23> zoneArray ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
    helpers::WString string;
};

typedef PackMapZonesV23 Gw2Structzon2;

/* Version: 21, ReferencedFunction: 0x1 */
struct PackMapZoneModelV22 {
    helpers::FileName filename;
    float probability;
    dword flags;
    float3 hslOffset;
    byte zOffsets[2];
};

struct PackMapZoneLayerDefV22 {
    byte type;
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    float2 hslRanges[4];
    float instanceScaleJitter;
    byte noise;
    dword layerFlags;
    helpers::FileName materialname;
    helpers::Array<PackMapZoneModelV22> modelArray ;
    helpers::Ptr<PackMapZoneModelV22> subModel ;
    helpers::WString reserved;
};

struct PackMapZonePageV10 {
    helpers::Array<byte> flags ;
    dword2 chunkCoord;
    byte seed;
    helpers::Array<dword> paintFlags ;
    helpers::WString string;
};

struct PackMapZonePageTableV10 {
    helpers::Array<PackMapZonePageV10> pageArray ;
    dword flags;
};

struct PackMapZoneDefV22 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV22> layerDefArray ;
    qword timeStamp;
    helpers::Ptr<PackMapZonePageTableV10> pageTable ;
    helpers::WString reserved;
};

struct PackMapZoneEncodingDataV22 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV22 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV22 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV22> encodeData ;
    helpers::Array<PackMapZoneCollideDataV22> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
    word broadId;
    helpers::WString reserved;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapZonesV22 {
    helpers::Array<PackMapZoneDefV22> zoneDefArray ;
    helpers::Array<PackMapZoneV22> zoneArray ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
    helpers::WString string;
};

typedef PackMapZonesV22 Gw2Structzon2;

/* Version: 20, ReferencedFunction: 0x410469E000000001 */
struct PackMapZoneModelV21 {
    helpers::FileName filename;
    float probability;
    dword flags;
    float3 hslOffset;
    byte zOffsets[2];
};

struct PackMapZoneLayerDefV21 {
    byte type;
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    float2 hslRanges[4];
    float instanceScaleJitter;
    byte noise;
    dword layerFlags;
    helpers::FileName materialname;
    helpers::Array<PackMapZoneModelV21> modelArray ;
    helpers::Ptr<PackMapZoneModelV21> subModel ;
};

struct PackMapZonePageV9 {
    helpers::Array<byte> flags ;
    dword2 chunkCoord;
    byte seed;
    helpers::Array<dword> paintFlags ;
};

struct PackMapZonePageTableV9 {
    helpers::Array<PackMapZonePageV9> pageArray ;
    dword flags;
};

struct PackMapZoneDefV21 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV21> layerDefArray ;
    qword timeStamp;
    helpers::Ptr<PackMapZonePageTableV9> pageTable ;
};

struct PackMapZoneEncodingDataV21 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV21 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV21 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV21> encodeData ;
    helpers::Array<PackMapZoneCollideDataV21> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapZonesV21 {
    helpers::Array<PackMapZoneDefV21> zoneDefArray ;
    helpers::Array<PackMapZoneV21> zoneArray ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapZonesV21 Gw2Structzon2;

/* Version: 19, ReferencedFunction: 0x4016287000000001 */
struct PackMapZoneModelV20 {
    helpers::FileName filename;
    float probability;
    dword flags;
    float3 hslOffset;
    byte zOffsets[2];
};

struct PackMapZoneLayerDefV20 {
    byte type;
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    float2 hslRanges[3];
    float instanceScaleJitter;
    byte noise;
    dword layerFlags;
    helpers::FileName materialname;
    helpers::Array<PackMapZoneModelV20> modelArray ;
    helpers::Ptr<PackMapZoneModelV20> subModel ;
};

struct PackMapZonePageV8 {
    helpers::Array<byte> flags ;
    dword2 chunkCoord;
    byte seed;
    helpers::Array<dword> paintFlags ;
};

struct PackMapZonePageTableV8 {
    helpers::Array<PackMapZonePageV8> pageArray ;
    dword flags;
};

struct PackMapZoneDefV20 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV20> layerDefArray ;
    qword timeStamp;
    helpers::Ptr<PackMapZonePageTableV8> pageTable ;
};

struct PackMapZoneEncodingDataV20 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV20 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV20 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV20> encodeData ;
    helpers::Array<PackMapZoneCollideDataV20> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapZonesV20 {
    helpers::Array<PackMapZoneDefV20> zoneDefArray ;
    helpers::Array<PackMapZoneV20> zoneArray ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapZonesV20 Gw2Structzon2;

/* Version: 18, ReferencedFunction: 0x4104696000000001 */
struct PackMapZoneModelV19 {
    helpers::FileName filename;
    float probability;
    dword flags;
    float3 hslOffset;
    byte zOffsets[2];
};

struct PackMapZoneLayerDefV19 {
    byte type;
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    float2 hslRanges[4];
    byte noise;
    dword layerFlags;
    helpers::FileName materialname;
    helpers::Array<PackMapZoneModelV19> modelArray ;
    helpers::Ptr<PackMapZoneModelV19> subModel ;
};

struct PackMapZonePageV7 {
    helpers::Array<byte> flags ;
    dword2 chunkCoord;
    byte seed;
    helpers::Array<dword> paintFlags ;
};

struct PackMapZonePageTableV7 {
    helpers::Array<PackMapZonePageV7> pageArray ;
    dword flags;
};

struct PackMapZoneDefV19 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV19> layerDefArray ;
    qword timeStamp;
    helpers::Ptr<PackMapZonePageTableV7> pageTable ;
};

struct PackMapZoneEncodingDataV19 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV19 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV19 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV19> encodeData ;
    helpers::Array<PackMapZoneCollideDataV19> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapZonesV19 {
    helpers::Array<PackMapZoneDefV19> zoneDefArray ;
    helpers::Array<PackMapZoneV19> zoneArray ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapZonesV19 Gw2Structzon2;

/* Version: 17, ReferencedFunction: 0x410468A000000001 */
struct PackMapZoneModelV18 {
    helpers::FileName filename;
    float probability;
    dword flags;
    float3 hslOffset;
    byte zOffsets[2];
};

struct PackMapZoneLayerDefV18 {
    byte type;
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    float2 hslRanges[3];
    byte noise;
    dword layerFlags;
    helpers::FileName materialname;
    helpers::Array<PackMapZoneModelV18> modelArray ;
    helpers::Ptr<PackMapZoneModelV18> subModel ;
};

struct PackMapZonePageV6 {
    helpers::Array<byte> flags ;
    dword2 chunkCoord;
    byte seed;
    helpers::Array<dword> paintFlags ;
};

struct PackMapZonePageTableV6 {
    helpers::Array<PackMapZonePageV6> pageArray ;
    dword flags;
};

struct PackMapZoneDefV18 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV18> layerDefArray ;
    qword timeStamp;
    helpers::Ptr<PackMapZonePageTableV6> pageTable ;
};

struct PackMapZoneEncodingDataV18 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV18 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV18 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV18> encodeData ;
    helpers::Array<PackMapZoneCollideDataV18> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapZonesV18 {
    helpers::Array<PackMapZoneDefV18> zoneDefArray ;
    helpers::Array<PackMapZoneV18> zoneArray ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapZonesV18 Gw2Structzon2;

/* Version: 16, ReferencedFunction: 0x4104669000000001 */
struct PackMapZoneModelV17 {
    helpers::FileName filename;
    float probability;
    dword flags;
    float3 hslOffset;
};

struct PackMapZoneLayerDefV17 {
    byte type;
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    byte noise;
    dword layerFlags;
    helpers::Array<PackMapZoneModelV17> modelArray ;
    helpers::Ptr<PackMapZoneModelV17> subModel ;
};

struct PackMapZonePageV5 {
    helpers::Array<byte> flags ;
    dword2 chunkCoord;
    byte seed;
    helpers::Array<dword> paintFlags ;
};

struct PackMapZonePageTableV5 {
    helpers::Array<PackMapZonePageV5> pageArray ;
    dword flags;
};

struct PackMapZoneDefV17 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV17> layerDefArray ;
    qword timeStamp;
    helpers::Ptr<PackMapZonePageTableV5> pageTable ;
};

struct PackMapZoneEncodingDataV17 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV17 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV17 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV17> encodeData ;
    helpers::Array<PackMapZoneCollideDataV17> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapZonesV17 {
    helpers::Array<PackMapZoneDefV17> zoneDefArray ;
    helpers::Array<PackMapZoneV17> zoneArray ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapZonesV17 Gw2Structzon2;

/* Version: 15, ReferencedFunction: 0x4104669000000001 */
struct PackMapZoneModelV16 {
    helpers::FileName filename;
    float probability;
    dword flags;
    float3 hslOffset;
};

struct PackMapZoneLayerDefV16 {
    byte type;
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    byte noise;
    dword layerFlags;
    helpers::Array<PackMapZoneModelV16> modelArray ;
    helpers::Ptr<PackMapZoneModelV16> subModel ;
};

struct PackMapZonePageV4 {
    helpers::Array<byte> flags ;
    dword2 chunkCoord;
    byte seed;
    helpers::Array<dword> paintFlags ;
};

struct PackMapZonePageTableV4 {
    helpers::Array<PackMapZonePageV4> pageArray ;
    dword flags;
};

struct PackMapZoneDefV16 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV16> layerDefArray ;
    qword timeStamp;
    helpers::Ptr<PackMapZonePageTableV4> pageTable ;
};

struct PackMapZoneEncodingDataV16 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV16 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV16 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV16> encodeData ;
    helpers::Array<PackMapZoneCollideDataV16> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
    word broadId;
};

struct PackBroadphaseType {
    helpers::Array<byte> broadphaseData ;
};

struct PackMapZonesV16 {
    helpers::Array<PackMapZoneDefV16> zoneDefArray ;
    helpers::Array<PackMapZoneV16> zoneArray ;
    PackBroadphaseType broadPhase;
    word maxBroadId;
};

typedef PackMapZonesV16 Gw2Structzon2;

/* Version: 14, ReferencedFunction: 0x1 */
struct PackMapZoneModelV15 {
    helpers::FileName filename;
    float probability;
    dword flags;
    float3 hslOffset;
};

struct PackMapZoneLayerDefV15 {
    byte type;
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    byte noise;
    dword layerFlags;
    helpers::Array<PackMapZoneModelV15> modelArray ;
    helpers::Ptr<PackMapZoneModelV15> subModel ;
};

struct PackMapZonePageV3 {
    helpers::Array<byte> flags ;
    dword2 chunkCoord;
    byte seed;
    helpers::Array<dword> paintFlags ;
};

struct PackMapZonePageTableV3 {
    helpers::Array<PackMapZonePageV3> pageArray ;
    dword flags;
};

struct PackMapZoneDefV15 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV15> layerDefArray ;
    qword timeStamp;
    helpers::Ptr<PackMapZonePageTableV3> pageTable ;
};

struct PackMapZoneEncodingDataV15 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV15 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV15 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV15> encodeData ;
    helpers::Array<PackMapZoneCollideDataV15> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
};

struct PackMapZonesV15 {
    helpers::Array<PackMapZoneDefV15> zoneDefArray ;
    helpers::Array<PackMapZoneV15> zoneArray ;
};

typedef PackMapZonesV15 Gw2Structzon2;

/* Version: 13, ReferencedFunction: 0x1 */
struct PackMapZoneModelV14 {
    helpers::FileName filename;
    float probability;
    dword flags;
};

struct PackMapZoneLayerDefV14 {
    byte type;
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    byte noise;
    dword layerFlags;
    helpers::Array<PackMapZoneModelV14> modelArray ;
    helpers::Ptr<PackMapZoneModelV14> subModel ;
};

struct PackMapZonePageV2 {
    helpers::Array<byte> flags ;
    dword2 chunkCoord;
    byte seed;
    helpers::Array<dword> paintFlags ;
};

struct PackMapZonePageTableV2 {
    helpers::Array<PackMapZonePageV2> pageArray ;
    dword flags;
};

struct PackMapZoneDefV14 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV14> layerDefArray ;
    qword timeStamp;
    helpers::Ptr<PackMapZonePageTableV2> pageTable ;
};

struct PackMapZoneEncodingDataV14 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV14 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV14 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV14> encodeData ;
    helpers::Array<PackMapZoneCollideDataV14> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
};

struct PackMapZonesV14 {
    helpers::Array<PackMapZoneDefV14> zoneDefArray ;
    helpers::Array<PackMapZoneV14> zoneArray ;
};

typedef PackMapZonesV14 Gw2Structzon2;

/* Version: 12, ReferencedFunction: 0x1 */
struct PackMapZoneModelV13 {
    helpers::FileName filename;
    float probability;
    dword flags;
};

struct PackMapZoneLayerDefV13 {
    byte type;
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    byte noise;
    dword layerFlags;
    helpers::Array<PackMapZoneModelV13> modelArray ;
    helpers::Ptr<PackMapZoneModelV13> subModel ;
};

struct PackMapZoneDefV13 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV13> layerDefArray ;
    qword timeStamp;
};

struct PackMapZoneEncodingDataV13 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV13 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV13 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV13> encodeData ;
    helpers::Array<PackMapZoneCollideDataV13> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
};

struct PackMapZonesV13 {
    helpers::Array<PackMapZoneDefV13> zoneDefArray ;
    helpers::Array<PackMapZoneV13> zoneArray ;
};

typedef PackMapZonesV13 Gw2Structzon2;

/* Version: 11, ReferencedFunction: 0x1 */
struct PackMapZoneModelV12 {
    helpers::FileName filename;
    float probability;
    dword flags;
};

struct PackMapZoneLayerDefV12 {
    byte height;
    byte width;
    byte radiusGround;
    byte sortGroup;
    byte tiling;
    float2 scaleRange;
    float probability;
    float2 fadeRange;
    float2 rotRange[3];
    byte noise;
    dword layerFlags;
    helpers::Array<PackMapZoneModelV12> modelArray ;
    helpers::Ptr<PackMapZoneModelV12> subModel ;
};

struct PackMapZoneDefV12 {
    helpers::FileName defFilename;
    dword token;
    helpers::Array<PackMapZoneLayerDefV12> layerDefArray ;
    qword timeStamp;
};

struct PackMapZoneEncodingDataV12 {
    word index;
    byte offset;
};

struct PackMapZoneCollideDataV12 {
    float normalX;
    float normalY;
    float zPos;
};

struct PackMapZoneV12 {
    dword zoneFlags;
    dword4 vertRect;
    float waterHeight;
    byte seed;
    dword defToken;
    float2 range;
    float zPos;
    helpers::Array<byte> flags ;
    helpers::Array<PackMapZoneEncodingDataV12> encodeData ;
    helpers::Array<PackMapZoneCollideDataV12> collideData ;
    helpers::Array<word> offsetData ;
    helpers::Array<float2> vertices ;
};

struct PackMapZonesV12 {
    helpers::Array<PackMapZoneDefV12> zoneDefArray ;
    helpers::Array<PackMapZoneV12> zoneArray ;
};

typedef PackMapZonesV12 Gw2Structzon2;


/* ===============================================
 * Chunk: trn, versions: 16, strucTab: 0x141FA0B20
 * ===============================================
 */

/* Version: 15, ReferencedFunction: 0x4104582000000001 */
struct PackMapTerrainChunkV14 {
    dword chunkFlags;
    helpers::Array<word> surfaceIndexArray ;
    helpers::Array<qword> surfaceTokenArray ;
};

struct PackMapTerrainConstV14 {
    dword tokenName;
    float4 value;
};

struct PackMapTerrainTexV14 {
    dword tokenName;
    dword flags;
    helpers::FileName filename;
    dword2 flags;
    dword layer;
};

struct PackMapTerrainMaterialV14 {
    helpers::FileName materialFile;
    dword fvf;
    helpers::Array<dword> constIndexArray ;
    helpers::Array<dword> texIndexArray ;
};

struct PackMapTerrainChunkUVDataV14 {
    float2 translation;
    float2 xScaleRange;
    float2 yScaleRange;
    float2 scaleSpeed;
    float rotation;
};

struct PackMapTerrrainChunkMaterialV14 {
    byte tiling[3];
    PackMapTerrainMaterialV14 hiResMaterial;
    PackMapTerrainMaterialV14 loResMaterial;
    PackMapTerrainMaterialV14 faderMaterial;
    helpers::Ptr<PackMapTerrainChunkUVDataV14> uvData ;
};

struct PackMapTerrainMaterialsV14 {
    helpers::FileName pagedImage;
    helpers::Array<PackMapTerrainConstV14> constArray ;
    helpers::Array<PackMapTerrainTexV14> texFileArray ;
    helpers::Array<PackMapTerrrainChunkMaterialV14> materials ;
    float2 midFade;
    float2 farFade;
};

struct PackMapTerrainV15 {
    dword2 dims;
    float swapDistance;
    helpers::Array<float> heightMapArray ;
    helpers::Array<dword> tileFlagArray ;
    helpers::Array<PackMapTerrainChunkV14> chunkArray ;
    helpers::Ptr<PackMapTerrainMaterialsV14> materials ;
    dword verticesPerChunkSide;
};

typedef PackMapTerrainV15 Gw2Structtrn;

/* Version: 14, ReferencedFunction: 0x1 */
struct PackMapTerrainChunkV14 {
    dword chunkFlags;
    helpers::Array<word> surfaceIndexArray ;
    helpers::Array<qword> surfaceTokenArray ;
};

struct PackMapTerrainConstV14 {
    dword tokenName;
    float4 value;
};

struct PackMapTerrainTexV14 {
    dword tokenName;
    dword flags;
    helpers::FileName filename;
    dword2 flags;
    dword layer;
};

struct PackMapTerrainMaterialV14 {
    helpers::FileName materialFile;
    dword fvf;
    helpers::Array<dword> constIndexArray ;
    helpers::Array<dword> texIndexArray ;
};

struct PackMapTerrainChunkUVDataV14 {
    float2 translation;
    float2 xScaleRange;
    float2 yScaleRange;
    float2 scaleSpeed;
    float rotation;
};

struct PackMapTerrrainChunkMaterialV14 {
    byte tiling[3];
    PackMapTerrainMaterialV14 hiResMaterial;
    PackMapTerrainMaterialV14 loResMaterial;
    PackMapTerrainMaterialV14 faderMaterial;
    helpers::Ptr<PackMapTerrainChunkUVDataV14> uvData ;
};

struct PackMapTerrainMaterialsV14 {
    helpers::FileName pagedImage;
    helpers::Array<PackMapTerrainConstV14> constArray ;
    helpers::Array<PackMapTerrainTexV14> texFileArray ;
    helpers::Array<PackMapTerrrainChunkMaterialV14> materials ;
    float2 midFade;
    float2 farFade;
};

struct PackMapTerrainV14 {
    dword2 dims;
    float swapDistance;
    helpers::Array<float> heightMapArray ;
    helpers::Array<dword> tileFlagArray ;
    helpers::Array<PackMapTerrainChunkV14> chunkArray ;
    helpers::Ptr<PackMapTerrainMaterialsV14> materials ;
};

typedef PackMapTerrainV14 Gw2Structtrn;

/* Version: 13, ReferencedFunction: 0x410457B000000001 */
struct PackMapTerrainChunkV13 {
    dword chunkFlags;
    helpers::Array<byte> tileTableArray ;
};

struct PackMapTerrainConstV13 {
    dword tokenName;
    float4 value;
};

struct PackMapTerrainTexV13 {
    dword tokenName;
    dword flags;
    helpers::FileName filename;
    dword2 flags;
    dword layer;
};

struct PackMapTerrainMaterialV13 {
    helpers::FileName materialFile;
    dword fvf;
    helpers::Array<dword> constIndexArray ;
    helpers::Array<dword> texIndexArray ;
};

struct PackMapTerrainChunkUVDataV13 {
    float2 translation;
    float2 xScaleRange;
    float2 yScaleRange;
    float2 scaleSpeed;
    float rotation;
};

struct PackMapTerrrainChunkMaterialV13 {
    byte tiling[3];
    PackMapTerrainMaterialV13 hiResMaterial;
    PackMapTerrainMaterialV13 loResMaterial;
    PackMapTerrainMaterialV13 faderMaterial;
    helpers::Ptr<PackMapTerrainChunkUVDataV13> uvData ;
};

struct PackMapTerrainMaterialsV13 {
    helpers::FileName pagedImage;
    helpers::Array<PackMapTerrainConstV13> constArray ;
    helpers::Array<PackMapTerrainTexV13> texFileArray ;
    helpers::Array<PackMapTerrrainChunkMaterialV13> materials ;
    float2 midFade;
    float2 farFade;
};

struct PackMapTerrainV13 {
    dword2 dims;
    float swapDistance;
    helpers::Array<float> heightMapArray ;
    helpers::Array<dword> tileFlagArray ;
    helpers::Array<PackMapTerrainChunkV13> chunkArray ;
    helpers::Ptr<PackMapTerrainMaterialsV13> materials ;
    helpers::Array<qword> typeArray ;
};

typedef PackMapTerrainV13 Gw2Structtrn;

/* Version: 12, ReferencedFunction: 0x410455A000000001 */
struct PackMapTerrainChunkV12 {
    dword chunkFlags;
    helpers::Array<byte> tileTableArray ;
};

struct PackMapTerrainConstV12 {
    dword tokenName;
    float4 value;
};

struct PackMapTerrainTexV12 {
    dword tokenName;
    dword flags;
    helpers::FileName filename;
    dword2 flags;
    dword layer;
};

struct PackMapTerrainMaterialV12 {
    helpers::FileName materialFile;
    dword fvf;
    helpers::Array<dword> constIndexArray ;
    helpers::Array<dword> texIndexArray ;
};

struct PackMapTerrainChunkUVDataV12 {
    float2 translation;
    float2 xScaleRange;
    float2 yScaleRange;
    float2 scaleSpeed;
    float rotation;
};

struct PackMapTerrrainChunkMaterialV12 {
    byte tiling[3];
    PackMapTerrainMaterialV12 hiResMaterial;
    PackMapTerrainMaterialV12 loResMaterial;
    helpers::Ptr<PackMapTerrainChunkUVDataV12> uvData ;
};

struct PackMapTerrainMaterialsV12 {
    helpers::FileName pagedImage;
    helpers::Array<PackMapTerrainConstV12> constArray ;
    helpers::Array<PackMapTerrainTexV12> texFileArray ;
    helpers::Array<PackMapTerrrainChunkMaterialV12> materials ;
};

struct PackMapTerrainV12 {
    dword2 dims;
    float swapDistance;
    helpers::Array<float> heightMapArray ;
    helpers::Array<dword> tileFlagArray ;
    helpers::Array<PackMapTerrainChunkV12> chunkArray ;
    helpers::Ptr<PackMapTerrainMaterialsV12> materials ;
    helpers::Array<qword> typeArray ;
};

typedef PackMapTerrainV12 Gw2Structtrn;

/* Version: 11, ReferencedFunction: 0x4104550000000001 */
struct PackMapTerrainChunkV11 {
    dword chunkFlags;
    helpers::Array<byte> tileTableArray ;
};

struct PackMapTerrainConstV11 {
    dword tokenName;
    float4 value;
};

struct PackMapTerrainTexV11 {
    dword tokenName;
    dword flags;
    helpers::FileName filename;
    dword2 flags;
    dword layer;
};

struct PackMapTerrainMaterialV11 {
    helpers::FileName materialFile;
    dword fvf;
    helpers::Array<dword> constIndexArray ;
    helpers::Array<dword> texIndexArray ;
};

struct PackMapTerrainChunkUVDataV11 {
    float2 translation;
    float2 xScaleRange;
    float2 yScaleRange;
    float2 scaleSpeed;
    float rotation;
};

struct PackMapTerrrainChunkMaterialV11 {
    byte tiling[3];
    PackMapTerrainMaterialV11 hiResMaterial;
    PackMapTerrainMaterialV11 loResMaterial;
    helpers::Ptr<PackMapTerrainChunkUVDataV11> uvData ;
};

struct PackMapTerrainMaterialsV11 {
    helpers::FileName pagedImage;
    helpers::Array<PackMapTerrainConstV11> constArray ;
    helpers::Array<PackMapTerrainTexV11> texFileArray ;
    helpers::Array<PackMapTerrrainChunkMaterialV11> materials ;
};

struct PackMapTerrainV11 {
    dword2 dims;
    float swapDistance;
    helpers::Array<float> heightMapArray ;
    helpers::Array<dword> tileFlagArray ;
    helpers::Array<PackMapTerrainChunkV11> chunkArray ;
    helpers::Ptr<PackMapTerrainMaterialsV11> materials ;
    helpers::Array<qword> typeArray ;
};

typedef PackMapTerrainV11 Gw2Structtrn;

/* Version: 10, ReferencedFunction: 0x1 */
struct PackMapTerrainChunkV10 {
    dword chunkFlags;
    helpers::Array<byte> tileTableArray ;
};

struct PackMapTerrainConstV10 {
    dword tokenName;
    float4 value;
};

struct PackMapTerrainTexV10 {
    dword tokenName;
    dword flags;
    helpers::FileName filename;
    dword2 flags;
    dword layer;
};

struct PackMapTerrainMaterialV10 {
    helpers::FileName materialFile;
    dword fvf;
    helpers::Array<dword> constIndexArray ;
    helpers::Array<dword> texIndexArray ;
};

struct PackMapTerrainChunkUVDataV10 {
    float2 translation;
    float2 xScaleRange;
    float2 yScaleRange;
    float2 scaleSpeed;
    float rotation;
};

struct PackMapTerrrainChunkMaterialV10 {
    byte tiling;
    PackMapTerrainMaterialV10 hiResMaterial;
    PackMapTerrainMaterialV10 loResMaterial;
    helpers::Ptr<PackMapTerrainChunkUVDataV10> uvData ;
};

struct PackMapTerrainMaterialsV10 {
    helpers::FileName pagedImage;
    helpers::Array<PackMapTerrainConstV10> constArray ;
    helpers::Array<PackMapTerrainTexV10> texFileArray ;
    helpers::Array<PackMapTerrrainChunkMaterialV10> materials ;
};

struct PackMapTerrainV10 {
    dword2 dims;
    float swapDistance;
    helpers::Array<float> heightMapArray ;
    helpers::Array<dword> tileFlagArray ;
    helpers::Array<PackMapTerrainChunkV10> chunkArray ;
    helpers::Ptr<PackMapTerrainMaterialsV10> materials ;
    helpers::Array<qword> typeArray ;
};

typedef PackMapTerrainV10 Gw2Structtrn;


/* ===============================================
 * Chunk: trni, versions: 4, strucTab: 0x141FA0CA0
 * ===============================================
 */

/* Version: 3, ReferencedFunction: 0x4104583000000001 */
struct PagedImageLayerDataV3 {
    dword2 rawDims;
    dword2 strippedDims;
    dword rawFormat;
    dword strippedFormat;
    dword diskFormat;
};

struct PagedImagePageDataV3 {
    dword layer;
    dword2 coord;
    helpers::FileName filename;
    dword flags;
    byte4 solidColor;
};

struct PagedImageTableDataV3 {
    helpers::Array<PagedImageLayerDataV3> layers ;
    helpers::Array<PagedImagePageDataV3> rawPages ;
    helpers::Array<PagedImagePageDataV3> strippedPages ;
    dword flags;
};

struct PagedImageEmbeddedPageDataV3 {
    dword layer;
    dword2 coord;
    helpers::Array<byte> data ;
};

struct PagedImageEmbeddedPagesDataV3 {
    helpers::Array<PagedImageEmbeddedPageDataV3> rawPages ;
    helpers::Array<PagedImageEmbeddedPageDataV3> strippedPages ;
};

struct MapTerrainImg {
    helpers::Ptr<PagedImageTableDataV3> tableData ;
    helpers::Ptr<PagedImageEmbeddedPagesDataV3> pageData ;
};

typedef MapTerrainImg Gw2Structtrni;

/* Version: 2, ReferencedFunction: 0x1 */
struct PagedImageLayerDataV2 {
    dword2 dims;
    dword2 rawDims;
    dword diskFormat;
    dword rawFormat;
    dword strippedFormat;
};

struct PagedImagePageDataV2 {
    dword layer;
    dword2 coord;
    helpers::FileName filename;
    dword flags;
    byte4 solidColor;
};

struct PagedImageTableDataV2 {
    helpers::Array<PagedImageLayerDataV2> layers ;
    helpers::Array<PagedImagePageDataV2> pages ;
    dword flags;
};

struct PagedImageEmbeddedPageDataV2 {
    dword layer;
    dword2 coord;
    helpers::Array<byte> rawData ;
    helpers::Array<byte> compressedData ;
};

struct PagedImageEmbeddedPagesDataV2 {
    helpers::Array<PagedImageEmbeddedPageDataV2> pages ;
};

struct MapTerrainImg {
    helpers::Ptr<PagedImageTableDataV2> tableData ;
    helpers::Ptr<PagedImageEmbeddedPagesDataV2> pageData ;
};

typedef MapTerrainImg Gw2Structtrni;

/* Version: 1, ReferencedFunction: 0x1 */
struct PagedImageLayerDataV1 {
    dword2 dims;
    dword2 rawDims;
    dword diskFormat;
    dword rawFormat;
    dword strippedFormat;
};

struct PagedImagePageDataV1 {
    dword layer;
    dword2 coord;
    helpers::FileName filename;
    dword flags;
    byte4 solidColor;
};

struct PagedImageTableDataV1 {
    helpers::Array<PagedImageLayerDataV1> layers ;
    helpers::Array<PagedImagePageDataV1> pages ;
};

struct PagedImageEmbeddedPageDataV1 {
    dword layer;
    dword2 coord;
    helpers::Array<byte> rawData ;
    helpers::Array<byte> compressedData ;
};

struct PagedImageEmbeddedPagesDataV1 {
    helpers::Array<PagedImageEmbeddedPageDataV1> pages ;
};

struct MapTerrainImg {
    helpers::Ptr<PagedImageTableDataV1> tableData ;
    helpers::Ptr<PagedImageEmbeddedPagesDataV1> pageData ;
};

typedef MapTerrainImg Gw2Structtrni;

/* Version: 0, ReferencedFunction: 0x1 */
struct PagedImageLayerDataV0 {
    dword2 dims;
    dword2 rawDims;
    dword diskFormat;
    dword rawFormat;
    dword strippedFormat;
};

struct PagedImagePageDataV0 {
    dword layer;
    dword2 coord;
    helpers::FileName filename;
    dword flags;
};

struct PagedImageTableDataV0 {
    helpers::Array<PagedImageLayerDataV0> layers ;
    helpers::Array<PagedImagePageDataV0> pages ;
};

struct PagedImageEmbeddedPageDataV0 {
    dword layer;
    dword2 coord;
    helpers::Array<byte> rawData ;
    helpers::Array<byte> compressedData ;
};

struct PagedImageEmbeddedPagesDataV0 {
    helpers::Array<PagedImageEmbeddedPageDataV0> pages ;
};

struct MapTerrainImg {
    helpers::Ptr<PagedImageTableDataV0> tableData ;
    helpers::Ptr<PagedImageEmbeddedPagesDataV0> pageData ;
};

typedef MapTerrainImg Gw2Structtrni;


/* ===============================================
 * Chunk: watr, versions: 2, strucTab: 0x141FA0D40
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x4104668000000001 */
struct PackMapWaterSurfaceV1 {
    qword guid;
    dword waterSurfaceFlags;
    float waterSurfaceZ;
    helpers::Array<float2> vertices ;
};

struct PackMapWaterV1 {
    dword waterFlags;
    float waterPlaneZ;
    helpers::Array<PackMapWaterSurfaceV1> waterSurfaces ;
};

typedef PackMapWaterV1 Gw2Structwatr;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapWaterV0 {
    helpers::Array<byte> waterFoamData ;
    helpers::Array<dword> waterChunks ;
};

typedef PackMapWaterV0 Gw2Structwatr;


/* ===============================================
 * Chunk: edit, versions: 17, strucTab: 0x141F9D960
 * ===============================================
 */

/* Version: 16, ReferencedFunction: 0x4016287000000001 */
struct MapEditLayerItem {
    qword guid;
    dword moduleId;
    helpers::Array<dword> layerFlags ;
};

struct MapEditLayers {
    helpers::Array<byte> layerStates ;
    helpers::Array<wchar_ptr> layerNames ;
    helpers::Array<dword> layerIds ;
    helpers::Array<MapEditLayerItem> items ;
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
    float2 zRange;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct PackMapEditDirtyChunks {
    dword flags;
    float3 position;
};

struct PackMapEditSurfacePoly {
    helpers::WString name;
    dword surfaceType;
    helpers::Array<float2> vertices ;
    float2 range;
};

struct PackMapEditSurfaceRoadNode {
    float3 position;
    float radius;
};

struct PackMapEditSurfaceRoad {
    helpers::WString name;
    dword surfaceType;
    helpers::Array<PackMapEditSurfaceRoadNode> nodes ;
};

struct PackMapEditNavmeshGenPropMode {
    qword propId;
    byte mode;
    qword animSequence;
};

struct PackMapEditNavMeshData {
    helpers::Array<PackMapEditDirtyChunks> floodPoints ;
    helpers::Array<PackMapEditSurfacePoly> surfacePolys ;
    helpers::Array<PackMapEditSurfaceRoad> surfaceRoads ;
    helpers::Array<PackMapEditNavmeshGenPropMode> propModesForGeneration ;
};

struct MapEditSnapPoint {
    qword guid;
    dword moduleId;
    dword flags;
    float3 position;
    float3 rotation;
    float scale;
};

struct MapEditMeasureSpan {
    helpers::WString name;
    qword substrateId0;
    qword substrateId1;
    dword substrateModuleId0;
    dword substrateModuleId1;
    float3 position0;
    float3 position1;
    float3 limits;
};

struct MapEditData {
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
    PackMapEditNavMeshData navMeshData;
    helpers::Array<MapEditSnapPoint> snapPoints ;
    helpers::Array<MapEditMeasureSpan> measureSpans ;
    helpers::WString mapHome;
    byte homeSave;
    helpers::WString reserved;
};

typedef MapEditData Gw2Structedit;

/* Version: 15, ReferencedFunction: 0x4016287000000001 */
struct MapEditLayerItem {
    qword guid;
    dword moduleId;
    helpers::Array<dword> layerFlags ;
};

struct MapEditLayers {
    helpers::Array<byte> layerStates ;
    helpers::Array<wchar_ptr> layerNames ;
    helpers::Array<dword> layerIds ;
    helpers::Array<MapEditLayerItem> items ;
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
    float2 zRange;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct PackMapEditDirtyChunks {
    dword flags;
    float3 position;
};

struct PackMapEditSurfacePoly {
    helpers::WString name;
    dword surfaceType;
    helpers::Array<float2> vertices ;
    float2 range;
};

struct PackMapEditSurfaceRoadNode {
    float3 position;
    float radius;
};

struct PackMapEditSurfaceRoad {
    helpers::WString name;
    dword surfaceType;
    helpers::Array<PackMapEditSurfaceRoadNode> nodes ;
};

struct PackMapEditNavMeshData {
    helpers::Array<PackMapEditDirtyChunks> floodPoints ;
    helpers::Array<PackMapEditSurfacePoly> surfacePolys ;
    helpers::Array<PackMapEditSurfaceRoad> surfaceRoads ;
};

struct MapEditSnapPoint {
    qword guid;
    dword moduleId;
    dword flags;
    float3 position;
    float3 rotation;
    float scale;
};

struct MapEditMeasureSpan {
    helpers::WString name;
    qword substrateId0;
    qword substrateId1;
    dword substrateModuleId0;
    dword substrateModuleId1;
    float3 position0;
    float3 position1;
    float3 limits;
};

struct MapEditData {
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
    PackMapEditNavMeshData navMeshData;
    helpers::Array<MapEditSnapPoint> snapPoints ;
    helpers::Array<MapEditMeasureSpan> measureSpans ;
    helpers::WString mapHome;
    byte homeSave;
    helpers::WString reserved;
};

typedef MapEditData Gw2Structedit;

/* Version: 14, ReferencedFunction: 0x4016287000000001 */
struct MapEditLayerItem {
    qword guid;
    dword moduleId;
    helpers::Array<dword> layerFlags ;
};

struct MapEditLayers {
    helpers::Array<byte> layerStates ;
    helpers::Array<wchar_ptr> layerNames ;
    helpers::Array<dword> layerIds ;
    helpers::Array<MapEditLayerItem> items ;
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
    float2 zRange;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct PackMapEditDirtyChunks {
    dword flags;
    float3 position;
};

struct PackMapEditSurfacePoly {
    helpers::WString name;
    dword surfaceType;
    helpers::Array<float2> vertices ;
    float2 range;
};

struct PackMapEditSurfaceRoadNode {
    float3 position;
    float radius;
};

struct PackMapEditSurfaceRoad {
    helpers::WString name;
    dword surfaceType;
    helpers::Array<PackMapEditSurfaceRoadNode> nodes ;
};

struct PackMapEditNavMeshData {
    helpers::Array<PackMapEditDirtyChunks> floodPoints ;
    helpers::Array<PackMapEditSurfacePoly> surfacePolys ;
    helpers::Array<PackMapEditSurfaceRoad> surfaceRoads ;
};

struct MapEditSnapPoint {
    qword guid;
    dword moduleId;
    dword flags;
    float3 position;
    float3 rotation;
    float scale;
};

struct MapEditData {
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
    PackMapEditNavMeshData navMeshData;
    helpers::Array<MapEditSnapPoint> snapPoints ;
    helpers::WString mapHome;
    byte homeSave;
    helpers::WString reserved;
};

typedef MapEditData Gw2Structedit;

/* Version: 13, ReferencedFunction: 0x4016287000000001 */
struct MapEditLayerItem {
    qword guid;
    dword moduleId;
    helpers::Array<dword> layerFlags ;
};

struct MapEditLayers {
    helpers::Array<byte> layerStates ;
    helpers::Array<wchar_ptr> layerNames ;
    helpers::Array<dword> layerIds ;
    helpers::Array<MapEditLayerItem> items ;
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
    float2 zRange;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct PackMapEditDirtyChunks {
    dword flags;
    float3 position;
};

struct MapEditSnapPoint {
    qword guid;
    dword moduleId;
    dword flags;
    float3 position;
    float3 rotation;
    float scale;
};

struct MapEditData {
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
    helpers::Array<PackMapEditDirtyChunks> floodPoints ;
    helpers::Array<MapEditSnapPoint> snapPoints ;
    helpers::WString mapHome;
    byte homeSave;
    helpers::WString reserved;
};

typedef MapEditData Gw2Structedit;

/* Version: 12, ReferencedFunction: 0x4016287000000001 */
struct MapEditLayerItem {
    qword guid;
    dword moduleId;
    dword layerFlags;
};

struct MapEditLayers {
    byte layerStates[31];
    wchar_ptr layerNames[31];
    helpers::Array<MapEditLayerItem> items ;
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
    float2 zRange;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct PackMapEditDirtyChunks {
    dword flags;
    float3 position;
};

struct MapEditSnapPoint {
    qword guid;
    dword moduleId;
    dword flags;
    float3 position;
    float3 rotation;
    float scale;
};

struct MapEditData {
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
    helpers::Array<PackMapEditDirtyChunks> floodPoints ;
    helpers::Array<MapEditSnapPoint> snapPoints ;
    helpers::WString mapHome;
    byte homeSave;
    helpers::WString reserved;
};

typedef MapEditData Gw2Structedit;

/* Version: 11, ReferencedFunction: 0x1 */
struct MapEditLayerItem {
    qword guid;
    dword moduleId;
    dword layerFlags;
};

struct MapEditLayers {
    byte layerStates[31];
    wchar_ptr layerNames[31];
    helpers::Array<MapEditLayerItem> items ;
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
    float2 zRange;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct PackMapEditDirtyChunks {
    dword flags;
    float3 position;
};

struct MapEditSnapPoint {
    qword guid;
    dword moduleId;
    dword flags;
    float3 position;
    float3 rotation;
    float scale;
};

struct MapEditData {
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
    helpers::Array<PackMapEditDirtyChunks> floodPoints ;
    helpers::Array<MapEditSnapPoint> snapPoints ;
    helpers::WString mapHome;
    byte homeSave;
    helpers::WString reserved;
};

typedef MapEditData Gw2Structedit;

/* Version: 10, ReferencedFunction: 0x1 */
struct MapEditLayers {
    dword layerPropCount[31];
    byte layerStates[31];
    wchar_ptr layerNames[31];
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
    float2 zRange;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct PackMapEditDirtyChunks {
    dword flags;
    float3 position;
};

struct MapEditData {
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
    helpers::Array<PackMapEditDirtyChunks> floodPoints ;
    helpers::WString mapHome;
    byte homeSave;
    helpers::WString reserved;
};

typedef MapEditData Gw2Structedit;

/* Version: 9, ReferencedFunction: 0x1 */
struct MapEditLayers {
    dword layerPropCount[31];
    byte layerStates[31];
    wchar_ptr layerNames[31];
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
    float2 zRange;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct PackMapEditDirtyChunks {
    dword flags;
    float3 position;
};

struct MapEditData {
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
    helpers::Array<PackMapEditDirtyChunks> floodPoints ;
    helpers::WString mapHome;
    byte homeSave;
};

typedef MapEditData Gw2Structedit;

/* Version: 8, ReferencedFunction: 0x1 */
struct MapEditLayers {
    dword layerPropCount[31];
    byte layerStates[31];
    wchar_ptr layerNames[31];
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
    float2 zRange;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct PackMapEditDirtyChunks {
    dword flags;
    float3 position;
};

struct MapEditData {
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
    helpers::Array<PackMapEditDirtyChunks> floodPoints ;
};

typedef MapEditData Gw2Structedit;

/* Version: 7, ReferencedFunction: 0x1 */
struct MapEditLayers {
    dword layerPropCount[31];
    byte layerStates[31];
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
    float2 zRange;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct PackMapEditDirtyChunks {
    dword flags;
    float3 position;
};

struct MapEditData {
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
    helpers::Array<PackMapEditDirtyChunks> floodPoints ;
};

typedef MapEditData Gw2Structedit;

/* Version: 6, ReferencedFunction: 0x1 */
struct MapEditRegion {
    helpers::Array<wchar_ptr> regions ;
};

struct MapEditRegion {
    byte3 ambientColor;
    byte3 directionalColor;
    float ambientIntenisty;
    float directionalIntenisty;
};

struct MapEditLayers {
    dword layerPropCount[31];
    byte layerStates[31];
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct PackMapEditDirtyChunks {
    dword flags;
    float3 position;
};

struct MapEditData {
    MapEditRegion regions;
    MapEditRegion miniMapParams;
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
    helpers::Array<PackMapEditDirtyChunks> floodPoints ;
};

typedef MapEditData Gw2Structedit;

/* Version: 5, ReferencedFunction: 0x4016287000000001 */
struct MapEditRegion {
    helpers::Array<wchar_ptr> regions ;
};

struct MapEditRegion {
    byte3 ambientColor;
    byte3 directionalColor;
    float ambientIntenisty;
    float directionalIntenisty;
};

struct MapEditLayers {
    dword layerPropCount[31];
    byte layerStates[31];
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct PackMapEditDirtyChunks {
    dword dirtyFlags;
    dword2 chunkCoord;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct MapEditData {
    MapEditRegion regions;
    MapEditRegion miniMapParams;
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<PackMapEditDirtyChunks> dirtyChunks ;
    helpers::Array<MapEditCamLocations> camLocations ;
};

typedef MapEditData Gw2Structedit;

/* Version: 4, ReferencedFunction: 0x4016287000000001 */
struct MapEditRegion {
    helpers::Array<wchar_ptr> regions ;
};

struct MapEditRegion {
    byte3 ambientColor;
    byte3 directionalColor;
    float ambientIntenisty;
    float directionalIntenisty;
};

struct MapEditLayers {
    dword layerPropCount[31];
    byte layerStates[31];
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct MapEditData {
    MapEditRegion regions;
    MapEditRegion miniMapParams;
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<MapEditCamLocations> camLocations ;
};

typedef MapEditData Gw2Structedit;

/* Version: 3, ReferencedFunction: 0x1 */
struct MapEditRegion {
    helpers::Array<wchar_ptr> regions ;
};

struct MapEditRegion {
    byte3 ambientColor;
    byte3 directionalColor;
    float ambientIntenisty;
    float directionalIntenisty;
};

struct MapEditLayers {
    helpers::Array<byte> layerStates ;
};

struct PackMapEditAnnotation {
    helpers::WString name;
    dword flags;
    helpers::Array<float2> anchors ;
};

struct PackMapEditAnnotations {
    helpers::Array<PackMapEditAnnotation> annotations ;
};

struct MapEditCamLocations {
    float attack;
    float rotation;
    float3 position;
    helpers::WString name;
};

struct MapEditData {
    MapEditRegion regions;
    MapEditRegion miniMapParams;
    MapEditLayers layers;
    PackMapEditAnnotations annotations;
    helpers::Array<MapEditCamLocations> camLocations ;
};

typedef MapEditData Gw2Structedit;


/* ===============================================
 * Chunk: dcal, versions: 11, strucTab: 0x141F9D7B0
 * ===============================================
 */

/* Version: 10, ReferencedFunction: 0x41044E4000000001 */
struct PackMapDecalVertexV9 {
    float3 position;
    float3 normal;
    float3 tangent;
    float3 bitangent;
};

struct PackMapDecalV10 {
    float3 position;
    float3 extents;
    float3 rotation;
    float2 textureScaleUV0;
    float2 textureOffsetUV0;
    float2 textureScaleUV1;
    float2 textureOffsetUV1;
    float2 gridSize;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    dword flags;
    float2 animTranslation;
    float2 animScaleRangeX;
    float2 animScaleRangeY;
    float2 animScaleSpeed;
    float animRotation;
    float surfaceBias;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    helpers::Array<PackMapDecalVertexV9> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<qword> propIds ;
    byte projection;
    qword surfaceId;
    qword id;
};

struct PackMapDecalsV10 {
    helpers::Array<PackMapDecalV10> decals ;
};

typedef PackMapDecalsV10 Gw2Structdcal;

/* Version: 9, ReferencedFunction: 0x41044B9000000001 */
struct PackMapDecalVertexV8 {
    float3 position;
    float3 normal;
    float3 tangent;
    float3 bitangent;
};

struct PackMapDecalV9 {
    float3 position;
    float3 extents;
    float3 rotation;
    float2 textureScaleUV0;
    float2 textureOffsetUV0;
    float2 textureScaleUV1;
    float2 textureOffsetUV1;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    dword flags;
    float2 animTranslation;
    float2 animScaleRangeX;
    float2 animScaleRangeY;
    float2 animScaleSpeed;
    float animRotation;
    float surfaceBias;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    helpers::Array<PackMapDecalVertexV8> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<qword> propIds ;
    byte projection;
    qword surfaceId;
    qword id;
};

struct PackMapDecalsV9 {
    helpers::Array<PackMapDecalV9> decals ;
};

typedef PackMapDecalsV9 Gw2Structdcal;

/* Version: 8, ReferencedFunction: 0x1 */
struct PackMapDecalVertexV7 {
    float3 position;
};

struct PackMapDecalV8 {
    float3 position;
    float3 extents;
    float3 rotation;
    float2 textureScaleUV0;
    float2 textureOffsetUV0;
    float2 textureScaleUV1;
    float2 textureOffsetUV1;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    dword flags;
    float2 animTranslation;
    float2 animScaleRangeX;
    float2 animScaleRangeY;
    float2 animScaleSpeed;
    float animRotation;
    float surfaceBias;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    helpers::Array<PackMapDecalVertexV7> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<qword> propIds ;
    byte projection;
    qword surfaceId;
    qword id;
};

struct PackMapDecalsV8 {
    helpers::Array<PackMapDecalV8> decals ;
};

typedef PackMapDecalsV8 Gw2Structdcal;

/* Version: 7, ReferencedFunction: 0x41044B4000000001 */
struct PackMapDecalVertexV6 {
    float3 position;
};

struct PackMapDecalV7 {
    float3 position;
    float3 extents;
    float3 rotation;
    float2 textureScaleUV0;
    float2 textureOffsetUV0;
    float2 textureScaleUV1;
    float2 textureOffsetUV1;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    dword flags;
    float2 animTranslation;
    float2 animScaleRangeX;
    float2 animScaleRangeY;
    float2 animScaleSpeed;
    float animRotation;
    float surfaceBias;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    helpers::Array<PackMapDecalVertexV6> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<qword> propIds ;
    byte projection;
    qword id;
};

struct PackMapDecalsV7 {
    helpers::Array<PackMapDecalV7> decals ;
};

typedef PackMapDecalsV7 Gw2Structdcal;

/* Version: 6, ReferencedFunction: 0x1 */
struct PackMapDecalVertexV5 {
    float3 position;
};

struct PackMapDecalV6 {
    float3 position;
    float3 extents;
    float3 rotation;
    float2 textureScaleUV0;
    float2 textureOffsetUV0;
    float2 textureScaleUV1;
    float2 textureOffsetUV1;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    dword flags;
    float2 animTranslation;
    float2 animScaleRangeX;
    float2 animScaleRangeY;
    float2 animScaleSpeed;
    float animRotation;
    float surfaceBias;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    helpers::Array<PackMapDecalVertexV5> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<qword> propIds ;
    byte projection;
};

struct PackMapDecalsV6 {
    helpers::Array<PackMapDecalV6> decals ;
};

typedef PackMapDecalsV6 Gw2Structdcal;

/* Version: 5, ReferencedFunction: 0x1 */
struct PackMapDecalVertexV4 {
    float3 position;
};

struct PackMapDecalV5 {
    float3 position;
    float3 extents;
    float3 rotation;
    float2 textureScaleUV0;
    float2 textureOffsetUV0;
    float2 textureScaleUV1;
    float2 textureOffsetUV1;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    dword flags;
    float2 animTranslation;
    float2 animScaleRangeX;
    float2 animScaleRangeY;
    float2 animScaleSpeed;
    float animRotation;
    float surfaceBias;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
    helpers::Array<PackMapDecalVertexV4> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<qword> propIds ;
};

struct PackMapDecalsV5 {
    helpers::Array<PackMapDecalV5> decals ;
};

typedef PackMapDecalsV5 Gw2Structdcal;

/* Version: 4, ReferencedFunction: 0x1 */
struct PackMapDecalV4 {
    float3 position;
    float3 extents;
    float3 rotation;
    float2 textureScaleUV0;
    float2 textureOffsetUV0;
    float2 textureScaleUV1;
    float2 textureOffsetUV1;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    dword flags;
    float2 animTranslation;
    float2 animScaleRangeX;
    float2 animScaleRangeY;
    float2 animScaleSpeed;
    float animRotation;
    float surfaceBias;
    helpers::Array<dword> constantTokens ;
    helpers::Array<float4> constantValues ;
};

struct PackMapDecalsV4 {
    helpers::Array<PackMapDecalV4> decals ;
};

typedef PackMapDecalsV4 Gw2Structdcal;

/* Version: 3, ReferencedFunction: 0x41044AD000000001 */
struct PackMapDecalV3 {
    float3 position;
    float3 extents;
    float3 rotation;
    float2 textureScaleUV0;
    float2 textureOffsetUV0;
    float2 textureScaleUV1;
    float2 textureOffsetUV1;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    dword flags;
    float2 animTranslation;
    float2 animScaleRangeX;
    float2 animScaleRangeY;
    float2 animScaleSpeed;
    float animRotation;
    float surfaceBias;
};

struct PackMapDecalsV3 {
    helpers::Array<PackMapDecalV3> decals ;
};

typedef PackMapDecalsV3 Gw2Structdcal;

/* Version: 2, ReferencedFunction: 0x1 */
struct PackMapDecalV2 {
    float3 position;
    float3 extents;
    float3 rotation;
    float2 textureScale;
    float2 textureOffset;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    dword flags;
    float2 animTranslation;
    float2 animScaleRangeX;
    float2 animScaleRangeY;
    float2 animScaleSpeed;
    float animRotation;
};

struct PackMapDecalsV2 {
    helpers::Array<PackMapDecalV2> decals ;
};

typedef PackMapDecalsV2 Gw2Structdcal;

/* Version: 1, ReferencedFunction: 0x1 */
struct PackMapDecalV1 {
    float3 position;
    float3 extents;
    float3 rotation;
    float2 textureScale;
    float2 textureOffset;
    helpers::FileName materialFilename;
    helpers::Array<filename> textureFilenames ;
    dword flags;
};

struct PackMapDecalsV1 {
    helpers::Array<PackMapDecalV1> decals ;
};

typedef PackMapDecalsV1 Gw2Structdcal;


/* ===============================================
 * Chunk: exp, versions: 1, strucTab: 0x141F9EE10
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct MapExpansionProperty {
    dword type;
    qword val;
    helpers::FileName strVal;
};

struct MapExpansionProperties {
    helpers::Array<MapExpansionProperty> properties ;
};

typedef MapExpansionProperties Gw2Structexp;


/* ===============================================
 * Chunk: pack, versions: 1, strucTab: 0x141F9F4C8
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct MapVariant {
    helpers::WString file;
    helpers::WString name;
    qword token;
    dword flags;
};

struct MapPackage {
    helpers::FileName baseFile;
    helpers::Array<MapVariant> variants ;
    dword flags;
};

typedef MapPackage Gw2Structpack;


/* ===============================================
 * Chunk: MODL, versions: 70, strucTab: 0x14203BF00
 * ===============================================
 */

/* Version: 69, ReferencedFunction: 0x410CE71000000001 */
struct ModelTextureDataV66 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV66 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV66 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV66 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV66 {
    dword flags;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
    float2 scrollFreq;
    float2 scale;
    float2 scaleFreq;
    float rotate;
    float rotate;
};

struct ModelMaterialDataV66 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV66> textures ;
    helpers::Array<ModelConstantDataV66> constants ;
    helpers::Array<ModelMatConstLinkV66> matConstLinks ;
    helpers::Array<ModelUVTransLinkV66> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV66> texTransforms ;
    byte texCoordCount;
    dword sortLayer;
};

struct ModelPermutationDataV66 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV66> materials ;
};

struct ModelParticleCloudV66 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV66 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelMatrix43V66 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleFlipbookV66 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct PlaneEmitterSettingsV69 {
    float3 alignmentDir;
    byte alignmentType;
    helpers::Ptr<ModelParticleFlipbookV66> flipbook ;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float4 texCoordRect;
};

struct MeshEmitterSettingsV69 {
    dword alignment;
    float bankThreshold;
    float bankScale;
    helpers::FileName filename;
    float obstacleRadius;
    float2 rotation[3];
    float2 scaleChange[3];
    float2 scaleInitial[3];
    float2 spin[3];
};

struct ModelParticleEmitterV69 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    dword affinity;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV66> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    float2 lifetime;
    helpers::Ptr<ModelParticleCurveV66> scaleCurve ;
    dword scaleCurvePreset;
    float drag;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    helpers::Ptr<ModelMatrix43V66> transform ;
    byte windInfluence;
    byte spawnShape;
    helpers::Ptr<PlaneEmitterSettingsV69> planeEmitterSettings ;
    helpers::Ptr<MeshEmitterSettingsV69> meshEmitterSettings ;
};

struct ModelCloudDataV69 {
    helpers::Array<ModelParticleCloudV66> clouds ;
    helpers::Array<ModelParticleEmitterV69> emitters ;
};

struct ModelObstacleDataV66 {
    dword affinity;
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V66> transform ;
};

struct ModelStreakV66 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV66 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV66 {
    helpers::Array<ModelStreakV66> streaks ;
    helpers::Array<ModelStreakAnchorV66> anchors ;
};

struct ModelEffectLightV66 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV66 {
    helpers::Array<ModelEffectLightV66> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV66 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV66 {
    helpers::Array<ModelClothBoneWeightV66> weights ;
};

struct ModelClothGroupBindingV66 {
    qword strippedToken;
    helpers::String boneName;
    float3 OBBMin;
    float3 OBBMax;
};

struct ModelClothSoftLockV66 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV66 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV66 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV66> groups ;
    helpers::Array<ModelClothGroupBindingV66> groupBindings ;
    helpers::Array<ModelClothSoftLockV66> softLocks ;
    helpers::Array<ModelClothConstraintV66> lod0Constraints ;
    helpers::Array<ModelClothConstraintV66> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
    float translateWeight;
    qword visBone;
};

struct ModelEffectWindV66 {
    qword bone;
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelWindDataV66 {
    helpers::Array<ModelEffectWindV66> effectWind ;
};

struct ModelLightningSystemV66 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV66 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV66> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV66 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV66 {
    helpers::Array<ModelLightningSystemV66> systems ;
    helpers::Array<ModelLightningBoltV66> bolts ;
    helpers::Array<ModelLightningNodeV66> nodes ;
};

struct ModelSoftBodyDataV66 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV66 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelBoundingSphereV66 {
    float3 center;
    float radius;
};

struct ModelFileDataV69 {
    helpers::Array<ModelPermutationDataV66> permutations ;
    helpers::Ptr<ModelCloudDataV69> cloudData ;
    helpers::Array<ModelObstacleDataV66> obstacles ;
    helpers::Ptr<ModelStreakDataV66> streakData ;
    helpers::Ptr<ModelLightDataV66> lightData ;
    helpers::Array<ModelClothDataV66> clothData ;
    helpers::Ptr<ModelWindDataV66> windData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV66> lightningData ;
    helpers::Array<ModelSoftBodyDataV66> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV66> boneOffsetData ;
    helpers::Ptr<ModelBoundingSphereV66> boundingSphere ;
};

typedef ModelFileDataV69 Gw2StructMODL;

/* Version: 68, ReferencedFunction: 0x410CE58000000001 */
struct ModelTextureDataV66 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV66 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV66 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV66 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV66 {
    dword flags;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
    float2 scrollFreq;
    float2 scale;
    float2 scaleFreq;
    float rotate;
    float rotate;
};

struct ModelMaterialDataV66 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV66> textures ;
    helpers::Array<ModelConstantDataV66> constants ;
    helpers::Array<ModelMatConstLinkV66> matConstLinks ;
    helpers::Array<ModelUVTransLinkV66> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV66> texTransforms ;
    byte texCoordCount;
    dword sortLayer;
};

struct ModelPermutationDataV66 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV66> materials ;
};

struct ModelParticleCloudV66 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV66 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelMatrix43V66 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleFlipbookV66 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct PlaneEmitterSettingsV67 {
    float3 alignmentDir;
    byte alignmentType;
    float drag;
    helpers::Ptr<ModelParticleFlipbookV66> flipbook ;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float4 texCoordRect;
};

struct MeshEmitterSettingsV68 {
    dword alignment;
    float bankThreshold;
    float bankScale;
    float2 drag[3];
    helpers::FileName filename;
    float obstacleRadius;
    float2 rotation[3];
    dword rotationSpace;
    float2 scaleChange[3];
    float2 scaleInitial[3];
    float2 spin[3];
};

struct ModelParticleEmitterV68 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    dword affinity;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV66> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    float2 lifetime;
    helpers::Ptr<ModelParticleCurveV66> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    helpers::Ptr<ModelMatrix43V66> transform ;
    byte windInfluence;
    byte spawnShape;
    helpers::Ptr<PlaneEmitterSettingsV67> planeEmitterSettings ;
    helpers::Ptr<MeshEmitterSettingsV68> meshEmitterSettings ;
};

struct ModelCloudDataV68 {
    helpers::Array<ModelParticleCloudV66> clouds ;
    helpers::Array<ModelParticleEmitterV68> emitters ;
};

struct ModelObstacleDataV66 {
    dword affinity;
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V66> transform ;
};

struct ModelStreakV66 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV66 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV66 {
    helpers::Array<ModelStreakV66> streaks ;
    helpers::Array<ModelStreakAnchorV66> anchors ;
};

struct ModelEffectLightV66 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV66 {
    helpers::Array<ModelEffectLightV66> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV66 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV66 {
    helpers::Array<ModelClothBoneWeightV66> weights ;
};

struct ModelClothGroupBindingV66 {
    qword strippedToken;
    helpers::String boneName;
    float3 OBBMin;
    float3 OBBMax;
};

struct ModelClothSoftLockV66 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV66 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV66 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV66> groups ;
    helpers::Array<ModelClothGroupBindingV66> groupBindings ;
    helpers::Array<ModelClothSoftLockV66> softLocks ;
    helpers::Array<ModelClothConstraintV66> lod0Constraints ;
    helpers::Array<ModelClothConstraintV66> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
    float translateWeight;
    qword visBone;
};

struct ModelEffectWindV66 {
    qword bone;
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelWindDataV66 {
    helpers::Array<ModelEffectWindV66> effectWind ;
};

struct ModelLightningSystemV66 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV66 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV66> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV66 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV66 {
    helpers::Array<ModelLightningSystemV66> systems ;
    helpers::Array<ModelLightningBoltV66> bolts ;
    helpers::Array<ModelLightningNodeV66> nodes ;
};

struct ModelSoftBodyDataV66 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV66 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelBoundingSphereV66 {
    float3 center;
    float radius;
};

struct ModelFileDataV68 {
    helpers::Array<ModelPermutationDataV66> permutations ;
    helpers::Ptr<ModelCloudDataV68> cloudData ;
    helpers::Array<ModelObstacleDataV66> obstacles ;
    helpers::Ptr<ModelStreakDataV66> streakData ;
    helpers::Ptr<ModelLightDataV66> lightData ;
    helpers::Array<ModelClothDataV66> clothData ;
    helpers::Ptr<ModelWindDataV66> windData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV66> lightningData ;
    helpers::Array<ModelSoftBodyDataV66> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV66> boneOffsetData ;
    helpers::Ptr<ModelBoundingSphereV66> boundingSphere ;
};

typedef ModelFileDataV68 Gw2StructMODL;

/* Version: 67, ReferencedFunction: 0x410CE41000000001 */
struct ModelTextureDataV66 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV66 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV66 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV66 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV66 {
    dword flags;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
    float2 scrollFreq;
    float2 scale;
    float2 scaleFreq;
    float rotate;
    float rotate;
};

struct ModelMaterialDataV66 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV66> textures ;
    helpers::Array<ModelConstantDataV66> constants ;
    helpers::Array<ModelMatConstLinkV66> matConstLinks ;
    helpers::Array<ModelUVTransLinkV66> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV66> texTransforms ;
    byte texCoordCount;
    dword sortLayer;
};

struct ModelPermutationDataV66 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV66> materials ;
};

struct ModelParticleCloudV66 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV66 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelMatrix43V66 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleFlipbookV66 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct PlaneEmitterSettingsV67 {
    float3 alignmentDir;
    byte alignmentType;
    float drag;
    helpers::Ptr<ModelParticleFlipbookV66> flipbook ;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float4 texCoordRect;
};

struct MeshEmitterSettingsV67 {
    dword alignment;
    float bankThreshold;
    float bankScale;
    float2 drag[3];
    helpers::FileName filename;
    float obstacleRadius;
    float3 rotationMin;
    float3 rotationMax;
    dword rotationSpace;
    float2 scaleChange[3];
    float2 scaleInitial[3];
    float3 spinMin;
    float3 spinMax;
};

struct ModelParticleEmitterV67 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    dword affinity;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV66> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    float2 lifetime;
    helpers::Ptr<ModelParticleCurveV66> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    helpers::Ptr<ModelMatrix43V66> transform ;
    byte windInfluence;
    byte spawnShape;
    helpers::Ptr<PlaneEmitterSettingsV67> planeEmitterSettings ;
    helpers::Ptr<MeshEmitterSettingsV67> meshEmitterSettings ;
};

struct ModelCloudDataV67 {
    helpers::Array<ModelParticleCloudV66> clouds ;
    helpers::Array<ModelParticleEmitterV67> emitters ;
};

struct ModelObstacleDataV66 {
    dword affinity;
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V66> transform ;
};

struct ModelStreakV66 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV66 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV66 {
    helpers::Array<ModelStreakV66> streaks ;
    helpers::Array<ModelStreakAnchorV66> anchors ;
};

struct ModelEffectLightV66 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV66 {
    helpers::Array<ModelEffectLightV66> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV66 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV66 {
    helpers::Array<ModelClothBoneWeightV66> weights ;
};

struct ModelClothGroupBindingV66 {
    qword strippedToken;
    helpers::String boneName;
    float3 OBBMin;
    float3 OBBMax;
};

struct ModelClothSoftLockV66 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV66 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV66 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV66> groups ;
    helpers::Array<ModelClothGroupBindingV66> groupBindings ;
    helpers::Array<ModelClothSoftLockV66> softLocks ;
    helpers::Array<ModelClothConstraintV66> lod0Constraints ;
    helpers::Array<ModelClothConstraintV66> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
    float translateWeight;
    qword visBone;
};

struct ModelEffectWindV66 {
    qword bone;
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelWindDataV66 {
    helpers::Array<ModelEffectWindV66> effectWind ;
};

struct ModelLightningSystemV66 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV66 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV66> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV66 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV66 {
    helpers::Array<ModelLightningSystemV66> systems ;
    helpers::Array<ModelLightningBoltV66> bolts ;
    helpers::Array<ModelLightningNodeV66> nodes ;
};

struct ModelSoftBodyDataV66 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV66 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelBoundingSphereV66 {
    float3 center;
    float radius;
};

struct ModelFileDataV67 {
    helpers::Array<ModelPermutationDataV66> permutations ;
    helpers::Ptr<ModelCloudDataV67> cloudData ;
    helpers::Array<ModelObstacleDataV66> obstacles ;
    helpers::Ptr<ModelStreakDataV66> streakData ;
    helpers::Ptr<ModelLightDataV66> lightData ;
    helpers::Array<ModelClothDataV66> clothData ;
    helpers::Ptr<ModelWindDataV66> windData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV66> lightningData ;
    helpers::Array<ModelSoftBodyDataV66> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV66> boneOffsetData ;
    helpers::Ptr<ModelBoundingSphereV66> boundingSphere ;
};

typedef ModelFileDataV67 Gw2StructMODL;

/* Version: 66, ReferencedFunction: 0x1 */
struct ModelTextureDataV66 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV66 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV66 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV66 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV66 {
    dword flags;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
    float2 scrollFreq;
    float2 scale;
    float2 scaleFreq;
    float rotate;
    float rotate;
};

struct ModelMaterialDataV66 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV66> textures ;
    helpers::Array<ModelConstantDataV66> constants ;
    helpers::Array<ModelMatConstLinkV66> matConstLinks ;
    helpers::Array<ModelUVTransLinkV66> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV66> texTransforms ;
    byte texCoordCount;
    dword sortLayer;
};

struct ModelPermutationDataV66 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV66> materials ;
};

struct ModelParticleCloudV66 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV66 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV66 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V66 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV66 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    dword affinity;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV66> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV66> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV66> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V66> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV66 {
    helpers::Array<ModelParticleCloudV66> clouds ;
    helpers::Array<ModelParticleEmitterV66> emitters ;
};

struct ModelObstacleDataV66 {
    dword affinity;
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V66> transform ;
};

struct ModelStreakV66 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV66 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV66 {
    helpers::Array<ModelStreakV66> streaks ;
    helpers::Array<ModelStreakAnchorV66> anchors ;
};

struct ModelEffectLightV66 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV66 {
    helpers::Array<ModelEffectLightV66> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV66 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV66 {
    helpers::Array<ModelClothBoneWeightV66> weights ;
};

struct ModelClothGroupBindingV66 {
    qword strippedToken;
    helpers::String boneName;
    float3 OBBMin;
    float3 OBBMax;
};

struct ModelClothSoftLockV66 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV66 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV66 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV66> groups ;
    helpers::Array<ModelClothGroupBindingV66> groupBindings ;
    helpers::Array<ModelClothSoftLockV66> softLocks ;
    helpers::Array<ModelClothConstraintV66> lod0Constraints ;
    helpers::Array<ModelClothConstraintV66> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
    float translateWeight;
    qword visBone;
};

struct ModelEffectWindV66 {
    qword bone;
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelWindDataV66 {
    helpers::Array<ModelEffectWindV66> effectWind ;
};

struct ModelLightningSystemV66 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV66 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV66> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV66 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV66 {
    helpers::Array<ModelLightningSystemV66> systems ;
    helpers::Array<ModelLightningBoltV66> bolts ;
    helpers::Array<ModelLightningNodeV66> nodes ;
};

struct ModelSoftBodyDataV66 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV66 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelBoundingSphereV66 {
    float3 center;
    float radius;
};

struct ModelFileDataV66 {
    helpers::Array<ModelPermutationDataV66> permutations ;
    helpers::Ptr<ModelCloudDataV66> cloudData ;
    helpers::Array<ModelObstacleDataV66> obstacles ;
    helpers::Ptr<ModelStreakDataV66> streakData ;
    helpers::Ptr<ModelLightDataV66> lightData ;
    helpers::Array<ModelClothDataV66> clothData ;
    helpers::Ptr<ModelWindDataV66> windData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV66> lightningData ;
    helpers::Array<ModelSoftBodyDataV66> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV66> boneOffsetData ;
    helpers::Ptr<ModelBoundingSphereV66> boundingSphere ;
};

typedef ModelFileDataV66 Gw2StructMODL;

/* Version: 65, ReferencedFunction: 0x410CE0D000000001 */
struct ModelTextureDataV65 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV65 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV65 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV65 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV65 {
    dword flags;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
    float2 scrollFreq;
    float2 scale;
    float2 scaleFreq;
    float rotate;
    float rotate;
};

struct ModelMaterialDataV65 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV65> textures ;
    helpers::Array<ModelConstantDataV65> constants ;
    helpers::Array<ModelMatConstLinkV65> matConstLinks ;
    helpers::Array<ModelUVTransLinkV65> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV65> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV65 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV65> materials ;
};

struct ModelParticleCloudV65 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV65 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV65 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V65 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV65 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    dword affinity;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV65> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV65> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV65> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V65> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV65 {
    helpers::Array<ModelParticleCloudV65> clouds ;
    helpers::Array<ModelParticleEmitterV65> emitters ;
};

struct ModelObstacleDataV65 {
    dword affinity;
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V65> transform ;
};

struct ModelStreakV65 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV65 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV65 {
    helpers::Array<ModelStreakV65> streaks ;
    helpers::Array<ModelStreakAnchorV65> anchors ;
};

struct ModelEffectLightV65 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV65 {
    helpers::Array<ModelEffectLightV65> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV65 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV65 {
    helpers::Array<ModelClothBoneWeightV65> weights ;
};

struct ModelClothGroupBindingV65 {
    qword strippedToken;
    helpers::String boneName;
    float3 OBBMin;
    float3 OBBMax;
};

struct ModelClothSoftLockV65 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV65 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV65 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV65> groups ;
    helpers::Array<ModelClothGroupBindingV65> groupBindings ;
    helpers::Array<ModelClothSoftLockV65> softLocks ;
    helpers::Array<ModelClothConstraintV65> lod0Constraints ;
    helpers::Array<ModelClothConstraintV65> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
    float translateWeight;
    qword visBone;
};

struct ModelEffectWindV65 {
    qword bone;
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelWindDataV65 {
    helpers::Array<ModelEffectWindV65> effectWind ;
};

struct ModelLightningSystemV65 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV65 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV65> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV65 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV65 {
    helpers::Array<ModelLightningSystemV65> systems ;
    helpers::Array<ModelLightningBoltV65> bolts ;
    helpers::Array<ModelLightningNodeV65> nodes ;
};

struct ModelSoftBodyDataV65 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV65 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelBoundingSphereV65 {
    float3 center;
    float radius;
};

struct ModelFileDataV65 {
    helpers::Array<ModelPermutationDataV65> permutations ;
    helpers::Ptr<ModelCloudDataV65> cloudData ;
    helpers::Array<ModelObstacleDataV65> obstacles ;
    helpers::Ptr<ModelStreakDataV65> streakData ;
    helpers::Ptr<ModelLightDataV65> lightData ;
    helpers::Array<ModelClothDataV65> clothData ;
    helpers::Ptr<ModelWindDataV65> windData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV65> lightningData ;
    helpers::Array<ModelSoftBodyDataV65> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV65> boneOffsetData ;
    helpers::Ptr<ModelBoundingSphereV65> boundingSphere ;
};

typedef ModelFileDataV65 Gw2StructMODL;

/* Version: 64, ReferencedFunction: 0x1 */
struct ModelTextureDataV64 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV64 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV64 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV64 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV64 {
    dword flags;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
    float2 scrollFreq;
    float2 scale;
    float2 scaleFreq;
    float rotate;
    float rotate;
};

struct ModelMaterialDataV64 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV64> textures ;
    helpers::Array<ModelConstantDataV64> constants ;
    helpers::Array<ModelMatConstLinkV64> matConstLinks ;
    helpers::Array<ModelUVTransLinkV64> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV64> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV64 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV64> materials ;
};

struct ModelMeshLodDataV64 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV64 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV64 {
    helpers::Array<ModelMeshMorphVertV64> positions ;
    helpers::Array<ModelMeshMorphVertV64> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV64 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV64> lods ;
    helpers::Array<ModelMeshMorphTargetV64> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelParticleCloudV64 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV64 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV64 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V64 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV64 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    dword affinity;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV64> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV64> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV64> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V64> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV64 {
    helpers::Array<ModelParticleCloudV64> clouds ;
    helpers::Array<ModelParticleEmitterV64> emitters ;
};

struct ModelObstacleDataV64 {
    dword affinity;
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V64> transform ;
};

struct ModelStreakV64 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV64 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV64 {
    helpers::Array<ModelStreakV64> streaks ;
    helpers::Array<ModelStreakAnchorV64> anchors ;
};

struct ModelEffectLightV64 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV64 {
    helpers::Array<ModelEffectLightV64> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV64 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV64 {
    helpers::Array<ModelClothBoneWeightV64> weights ;
};

struct ModelClothGroupBindingV64 {
    qword strippedToken;
    helpers::String boneName;
    float3 OBBMin;
    float3 OBBMax;
};

struct ModelClothSoftLockV64 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV64 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV64 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV64> groups ;
    helpers::Array<ModelClothGroupBindingV64> groupBindings ;
    helpers::Array<ModelClothSoftLockV64> softLocks ;
    helpers::Array<ModelClothConstraintV64> lod0Constraints ;
    helpers::Array<ModelClothConstraintV64> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
    float translateWeight;
    qword visBone;
};

struct ModelEffectWindV64 {
    qword bone;
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelWindDataV64 {
    helpers::Array<ModelEffectWindV64> effectWind ;
};

struct ModelLightningSystemV64 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV64 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV64> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV64 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV64 {
    helpers::Array<ModelLightningSystemV64> systems ;
    helpers::Array<ModelLightningBoltV64> bolts ;
    helpers::Array<ModelLightningNodeV64> nodes ;
};

struct ModelSoftBodyDataV64 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV64 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelBoundingSphereV64 {
    float3 center;
    float radius;
};

struct ModelFileDataV64 {
    helpers::Array<ModelPermutationDataV64> permutations ;
    helpers::PtrStruct<ModelMeshDataV64> meshes ;
    helpers::Ptr<ModelCloudDataV64> cloudData ;
    helpers::Array<ModelObstacleDataV64> obstacles ;
    helpers::Ptr<ModelStreakDataV64> streakData ;
    helpers::Ptr<ModelLightDataV64> lightData ;
    helpers::Array<ModelClothDataV64> clothData ;
    helpers::Ptr<ModelWindDataV64> windData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV64> lightningData ;
    helpers::Array<ModelSoftBodyDataV64> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV64> boneOffsetData ;
    helpers::Ptr<ModelBoundingSphereV64> boundingSphere ;
};

typedef ModelFileDataV64 Gw2StructMODL;

/* Version: 63, ReferencedFunction: 0x410CDFF000000001 */
struct ModelTextureDataV63 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV63 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV63 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV63 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV63 {
    dword flags;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV63 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV63> textures ;
    helpers::Array<ModelConstantDataV63> constants ;
    helpers::Array<ModelMatConstLinkV63> matConstLinks ;
    helpers::Array<ModelUVTransLinkV63> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV63> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV63 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV63> materials ;
};

struct ModelMeshLodDataV63 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV63 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV63 {
    helpers::Array<ModelMeshMorphVertV63> positions ;
    helpers::Array<ModelMeshMorphVertV63> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV63 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV63> lods ;
    helpers::Array<ModelMeshMorphTargetV63> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelParticleCloudV63 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV63 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV63 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V63 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV63 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    dword affinity;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV63> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV63> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV63> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V63> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV63 {
    helpers::Array<ModelParticleCloudV63> clouds ;
    helpers::Array<ModelParticleEmitterV63> emitters ;
};

struct ModelObstacleDataV63 {
    dword affinity;
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V63> transform ;
};

struct ModelStreakV63 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV63 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV63 {
    helpers::Array<ModelStreakV63> streaks ;
    helpers::Array<ModelStreakAnchorV63> anchors ;
};

struct ModelEffectLightV63 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV63 {
    helpers::Array<ModelEffectLightV63> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV63 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV63 {
    helpers::Array<ModelClothBoneWeightV63> weights ;
};

struct ModelClothGroupBindingV63 {
    qword strippedToken;
    helpers::String boneName;
    float3 OBBMin;
    float3 OBBMax;
};

struct ModelClothSoftLockV63 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV63 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV63 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV63> groups ;
    helpers::Array<ModelClothGroupBindingV63> groupBindings ;
    helpers::Array<ModelClothSoftLockV63> softLocks ;
    helpers::Array<ModelClothConstraintV63> lod0Constraints ;
    helpers::Array<ModelClothConstraintV63> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
    float translateWeight;
};

struct ModelEffectWindV63 {
    qword bone;
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelWindDataV63 {
    helpers::Array<ModelEffectWindV63> effectWind ;
};

struct ModelLightningSystemV63 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV63 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV63> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV63 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV63 {
    helpers::Array<ModelLightningSystemV63> systems ;
    helpers::Array<ModelLightningBoltV63> bolts ;
    helpers::Array<ModelLightningNodeV63> nodes ;
};

struct ModelSoftBodyDataV63 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV63 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelBoundingSphereV63 {
    float3 center;
    float radius;
};

struct ModelFileDataV63 {
    helpers::Array<ModelPermutationDataV63> permutations ;
    helpers::PtrStruct<ModelMeshDataV63> meshes ;
    helpers::Ptr<ModelCloudDataV63> cloudData ;
    helpers::Array<ModelObstacleDataV63> obstacles ;
    helpers::Ptr<ModelStreakDataV63> streakData ;
    helpers::Ptr<ModelLightDataV63> lightData ;
    helpers::Array<ModelClothDataV63> clothData ;
    helpers::Ptr<ModelWindDataV63> windData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV63> lightningData ;
    helpers::Array<ModelSoftBodyDataV63> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV63> boneOffsetData ;
    helpers::Ptr<ModelBoundingSphereV63> boundingSphere ;
};

typedef ModelFileDataV63 Gw2StructMODL;

/* Version: 62, ReferencedFunction: 0x410CDE3000000001 */
struct ModelTextureDataV62 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV62 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV62 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV62 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV62 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV62 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV62> textures ;
    helpers::Array<ModelConstantDataV62> constants ;
    helpers::Array<ModelMatConstLinkV62> matConstLinks ;
    helpers::Array<ModelUVTransLinkV62> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV62> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV62 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV62> materials ;
};

struct ModelMeshLodDataV62 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV62 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV62 {
    helpers::Array<ModelMeshMorphVertV62> positions ;
    helpers::Array<ModelMeshMorphVertV62> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV62 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV62> lods ;
    helpers::Array<ModelMeshMorphTargetV62> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelParticleCloudV62 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV62 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV62 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V62 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV62 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    dword affinity;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV62> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV62> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV62> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V62> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV62 {
    helpers::Array<ModelParticleCloudV62> clouds ;
    helpers::Array<ModelParticleEmitterV62> emitters ;
};

struct ModelObstacleDataV62 {
    dword affinity;
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V62> transform ;
};

struct ModelStreakV62 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV62 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV62 {
    helpers::Array<ModelStreakV62> streaks ;
    helpers::Array<ModelStreakAnchorV62> anchors ;
};

struct ModelEffectLightV62 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV62 {
    helpers::Array<ModelEffectLightV62> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV62 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV62 {
    helpers::Array<ModelClothBoneWeightV62> weights ;
};

struct ModelClothGroupBindingV62 {
    qword strippedToken;
    helpers::String boneName;
    float3 OBBMin;
    float3 OBBMax;
};

struct ModelClothSoftLockV62 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV62 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV62 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV62> groups ;
    helpers::Array<ModelClothGroupBindingV62> groupBindings ;
    helpers::Array<ModelClothSoftLockV62> softLocks ;
    helpers::Array<ModelClothConstraintV62> lod0Constraints ;
    helpers::Array<ModelClothConstraintV62> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
    float translateWeight;
};

struct ModelEffectWindV62 {
    qword bone;
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelWindDataV62 {
    helpers::Array<ModelEffectWindV62> effectWind ;
};

struct ModelLightningSystemV62 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV62 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV62> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV62 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV62 {
    helpers::Array<ModelLightningSystemV62> systems ;
    helpers::Array<ModelLightningBoltV62> bolts ;
    helpers::Array<ModelLightningNodeV62> nodes ;
};

struct ModelSoftBodyDataV62 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV62 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelBoundingSphereV62 {
    float3 center;
    float radius;
};

struct ModelFileDataV62 {
    helpers::Array<ModelPermutationDataV62> permutations ;
    helpers::PtrStruct<ModelMeshDataV62> meshes ;
    helpers::Ptr<ModelCloudDataV62> cloudData ;
    helpers::Array<ModelObstacleDataV62> obstacles ;
    helpers::Ptr<ModelStreakDataV62> streakData ;
    helpers::Ptr<ModelLightDataV62> lightData ;
    helpers::Array<ModelClothDataV62> clothData ;
    helpers::Ptr<ModelWindDataV62> windData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV62> lightningData ;
    helpers::Array<ModelSoftBodyDataV62> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV62> boneOffsetData ;
    helpers::Ptr<ModelBoundingSphereV62> boundingSphere ;
};

typedef ModelFileDataV62 Gw2StructMODL;

/* Version: 61, ReferencedFunction: 0x410CDDC000000001 */
struct ModelTextureDataV61 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV61 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV61 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV61 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV61 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV61 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV61> textures ;
    helpers::Array<ModelConstantDataV61> constants ;
    helpers::Array<ModelMatConstLinkV61> matConstLinks ;
    helpers::Array<ModelUVTransLinkV61> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV61> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV61 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV61> materials ;
};

struct ModelMeshLodDataV61 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV61 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV61 {
    helpers::Array<ModelMeshMorphVertV61> positions ;
    helpers::Array<ModelMeshMorphVertV61> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV61 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV61> lods ;
    helpers::Array<ModelMeshMorphTargetV61> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelTransformDataV61 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV61 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV61 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelBoneSymmetryV61 {
    qword boneLeft;
    qword boneRight;
};

struct ModelSkeletonDataV61 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV61> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<ModelBoneSymmetryV61> boneSymmetries ;
};

struct ModelMeshBindingDataV61 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV61 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV61 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV61> Skeleton ;
    ModelTransformDataV61 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV61> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV61> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV61 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV61 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV61 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV61 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V61 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV61 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    dword affinity;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV61> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV61> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV61> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V61> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV61 {
    helpers::Array<ModelParticleCloudV61> clouds ;
    helpers::Array<ModelParticleEmitterV61> emitters ;
};

struct ModelObstacleDataV61 {
    dword affinity;
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V61> transform ;
};

struct ModelStreakV61 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV61 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV61 {
    helpers::Array<ModelStreakV61> streaks ;
    helpers::Array<ModelStreakAnchorV61> anchors ;
};

struct ModelEffectLightV61 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV61 {
    helpers::Array<ModelEffectLightV61> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV61 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV61 {
    helpers::Array<ModelClothBoneWeightV61> weights ;
};

struct ModelClothGroupBindingV61 {
    qword strippedToken;
    helpers::String boneName;
    float3 OBBMin;
    float3 OBBMax;
};

struct ModelClothSoftLockV61 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV61 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV61 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV61> groups ;
    helpers::Array<ModelClothGroupBindingV61> groupBindings ;
    helpers::Array<ModelClothSoftLockV61> softLocks ;
    helpers::Array<ModelClothConstraintV61> lod0Constraints ;
    helpers::Array<ModelClothConstraintV61> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
};

struct ModelEffectWindV61 {
    qword bone;
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelWindDataV61 {
    helpers::Array<ModelEffectWindV61> effectWind ;
};

struct ModelLightningSystemV61 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV61 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV61> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV61 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV61 {
    helpers::Array<ModelLightningSystemV61> systems ;
    helpers::Array<ModelLightningBoltV61> bolts ;
    helpers::Array<ModelLightningNodeV61> nodes ;
};

struct ModelBoneConstraintLinkV61 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV61 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV61> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV61 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV61 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelFixedOffsetDataV61 {
    qword name;
    qword parentBone;
    float3 translation;
};

struct ModelFileDataV61 {
    helpers::Array<ModelPermutationDataV61> permutations ;
    helpers::PtrStruct<ModelMeshDataV61> meshes ;
    helpers::Ptr<ModelModelDataV61> model ;
    helpers::Array<ModelPropertyDataV61> properties ;
    helpers::Ptr<ModelCloudDataV61> cloudData ;
    helpers::Array<ModelObstacleDataV61> obstacles ;
    helpers::Ptr<ModelStreakDataV61> streakData ;
    helpers::Ptr<ModelLightDataV61> lightData ;
    helpers::Array<ModelClothDataV61> clothData ;
    helpers::Ptr<ModelWindDataV61> windData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV61> lightningData ;
    helpers::Array<ModelBoneConstraintV61> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV61> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV61> boneOffsetData ;
    helpers::Array<ModelFixedOffsetDataV61> fixedOffsetData ;
    helpers::FileName modelReference;
};

typedef ModelFileDataV61 Gw2StructMODL;

/* Version: 60, ReferencedFunction: 0x410CD9E000000001 */
struct ModelTextureDataV60 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV60 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV60 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV60 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV60 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV60 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV60> textures ;
    helpers::Array<ModelConstantDataV60> constants ;
    helpers::Array<ModelMatConstLinkV60> matConstLinks ;
    helpers::Array<ModelUVTransLinkV60> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV60> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV60 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV60> materials ;
};

struct ModelMeshLodDataV60 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV60 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV60 {
    helpers::Array<ModelMeshMorphVertV60> positions ;
    helpers::Array<ModelMeshMorphVertV60> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV60 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV60> lods ;
    helpers::Array<ModelMeshMorphTargetV60> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelTransformDataV60 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV60 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV60 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelBoneSymmetryV60 {
    qword boneLeft;
    qword boneRight;
};

struct ModelSkeletonDataV60 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV60> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<ModelBoneSymmetryV60> boneSymmetries ;
};

struct ModelMeshBindingDataV60 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV60 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV60 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV60> Skeleton ;
    ModelTransformDataV60 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV60> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV60> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV60 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV60 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV60 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV60 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V60 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV60 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV60> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV60> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV60> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V60> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV60 {
    helpers::Array<ModelParticleCloudV60> clouds ;
    helpers::Array<ModelParticleEmitterV60> emitters ;
};

struct ModelObstacleDataV60 {
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V60> transform ;
};

struct ModelStreakV60 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV60 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV60 {
    helpers::Array<ModelStreakV60> streaks ;
    helpers::Array<ModelStreakAnchorV60> anchors ;
};

struct ModelEffectLightV60 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV60 {
    helpers::Array<ModelEffectLightV60> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV60 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV60 {
    helpers::Array<ModelClothBoneWeightV60> weights ;
};

struct ModelClothGroupBindingV60 {
    qword strippedToken;
    helpers::String boneName;
    float3 OBBMin;
    float3 OBBMax;
};

struct ModelClothSoftLockV60 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV60 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV60 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV60> groups ;
    helpers::Array<ModelClothGroupBindingV60> groupBindings ;
    helpers::Array<ModelClothSoftLockV60> softLocks ;
    helpers::Array<ModelClothConstraintV60> lod0Constraints ;
    helpers::Array<ModelClothConstraintV60> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
};

struct ModelLightningSystemV60 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV60 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV60> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV60 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV60 {
    helpers::Array<ModelLightningSystemV60> systems ;
    helpers::Array<ModelLightningBoltV60> bolts ;
    helpers::Array<ModelLightningNodeV60> nodes ;
};

struct ModelBoneConstraintLinkV60 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV60 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV60> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV60 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV60 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelFixedOffsetDataV60 {
    qword name;
    qword parentBone;
    float3 translation;
};

struct ModelFileDataV60 {
    helpers::Array<ModelPermutationDataV60> permutations ;
    helpers::PtrStruct<ModelMeshDataV60> meshes ;
    helpers::Ptr<ModelModelDataV60> model ;
    helpers::Array<ModelPropertyDataV60> properties ;
    helpers::Ptr<ModelCloudDataV60> cloudData ;
    helpers::Array<ModelObstacleDataV60> obstacles ;
    helpers::Ptr<ModelStreakDataV60> streakData ;
    helpers::Ptr<ModelLightDataV60> lightData ;
    helpers::Array<ModelClothDataV60> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV60> lightningData ;
    helpers::Array<ModelBoneConstraintV60> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV60> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV60> boneOffsetData ;
    helpers::Array<ModelFixedOffsetDataV60> fixedOffsetData ;
    helpers::FileName modelReference;
};

typedef ModelFileDataV60 Gw2StructMODL;

/* Version: 59, ReferencedFunction: 0x410CD98000000001 */
struct ModelTextureDataV59 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV59 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV59 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV59 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV59 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV59 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV59> textures ;
    helpers::Array<ModelConstantDataV59> constants ;
    helpers::Array<ModelMatConstLinkV59> matConstLinks ;
    helpers::Array<ModelUVTransLinkV59> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV59> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV59 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV59> materials ;
};

struct ModelMeshLodDataV59 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV59 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV59 {
    helpers::Array<ModelMeshMorphVertV59> positions ;
    helpers::Array<ModelMeshMorphVertV59> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV59 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV59> lods ;
    helpers::Array<ModelMeshMorphTargetV59> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelTransformDataV59 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV59 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV59 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelBoneSymmetryV59 {
    qword boneLeft;
    qword boneRight;
};

struct ModelSkeletonDataV59 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV59> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<ModelBoneSymmetryV59> boneSymmetries ;
};

struct ModelMeshBindingDataV59 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV59 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV59 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV59> Skeleton ;
    ModelTransformDataV59 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV59> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV59> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV59 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV59 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV59 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV59 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V59 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV59 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV59> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV59> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV59> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V59> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV59 {
    helpers::Array<ModelParticleCloudV59> clouds ;
    helpers::Array<ModelParticleEmitterV59> emitters ;
};

struct ModelObstacleDataV59 {
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V59> transform ;
};

struct ModelStreakV59 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV59 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV59 {
    helpers::Array<ModelStreakV59> streaks ;
    helpers::Array<ModelStreakAnchorV59> anchors ;
};

struct ModelEffectLightV59 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV59 {
    helpers::Array<ModelEffectLightV59> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV59 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV59 {
    helpers::Array<ModelClothBoneWeightV59> weights ;
};

struct ModelClothSoftLockV59 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV59 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV59 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV59> groups ;
    helpers::Array<ModelClothSoftLockV59> softLocks ;
    helpers::Array<ModelClothConstraintV59> lod0Constraints ;
    helpers::Array<ModelClothConstraintV59> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
};

struct ModelLightningSystemV59 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV59 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV59> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV59 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV59 {
    helpers::Array<ModelLightningSystemV59> systems ;
    helpers::Array<ModelLightningBoltV59> bolts ;
    helpers::Array<ModelLightningNodeV59> nodes ;
};

struct ModelBoneConstraintLinkV59 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV59 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV59> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV59 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV59 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelFixedOffsetDataV59 {
    qword name;
    qword parentBone;
    float3 translation;
};

struct ModelFileDataV59 {
    helpers::Array<ModelPermutationDataV59> permutations ;
    helpers::PtrStruct<ModelMeshDataV59> meshes ;
    helpers::Ptr<ModelModelDataV59> model ;
    helpers::Array<ModelPropertyDataV59> properties ;
    helpers::Ptr<ModelCloudDataV59> cloudData ;
    helpers::Array<ModelObstacleDataV59> obstacles ;
    helpers::Ptr<ModelStreakDataV59> streakData ;
    helpers::Ptr<ModelLightDataV59> lightData ;
    helpers::Array<ModelClothDataV59> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV59> lightningData ;
    helpers::Array<ModelBoneConstraintV59> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV59> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV59> boneOffsetData ;
    helpers::Array<ModelFixedOffsetDataV59> fixedOffsetData ;
    helpers::FileName modelReference;
};

typedef ModelFileDataV59 Gw2StructMODL;

/* Version: 58, ReferencedFunction: 0x410CD84000000001 */
struct ModelTextureDataV58 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV58 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV58 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV58 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV58 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV58 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV58> textures ;
    helpers::Array<ModelConstantDataV58> constants ;
    helpers::Array<ModelMatConstLinkV58> matConstLinks ;
    helpers::Array<ModelUVTransLinkV58> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV58> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV58 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV58> materials ;
};

struct ModelMeshLodDataV58 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV58 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV58 {
    helpers::Array<ModelMeshMorphVertV58> positions ;
    helpers::Array<ModelMeshMorphVertV58> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV58 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV58> lods ;
    helpers::Array<ModelMeshMorphTargetV58> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelTransformDataV58 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV58 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV58 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelBoneSymmetryV58 {
    qword boneLeft;
    qword boneRight;
};

struct ModelSkeletonDataV58 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV58> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<ModelBoneSymmetryV58> boneSymmetries ;
};

struct ModelMeshBindingDataV58 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV58 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV58 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV58> Skeleton ;
    ModelTransformDataV58 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV58> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV58> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV58 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV58 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV58 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV58 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V58 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV58 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV58> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV58> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV58> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V58> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV58 {
    helpers::Array<ModelParticleCloudV58> clouds ;
    helpers::Array<ModelParticleEmitterV58> emitters ;
};

struct ModelObstacleDataV58 {
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V58> transform ;
};

struct ModelStreakV58 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV58 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV58 {
    helpers::Array<ModelStreakV58> streaks ;
    helpers::Array<ModelStreakAnchorV58> anchors ;
};

struct ModelEffectLightV58 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV58 {
    helpers::Array<ModelEffectLightV58> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV58 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV58 {
    helpers::Array<ModelClothBoneWeightV58> weights ;
};

struct ModelClothSoftLockV58 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV58 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV58 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV58> groups ;
    helpers::Array<ModelClothSoftLockV58> softLocks ;
    helpers::Array<ModelClothConstraintV58> lod0Constraints ;
    helpers::Array<ModelClothConstraintV58> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    helpers::Array<dword> lockedNormals ;
    helpers::Array<dword> lockedTanegents ;
    helpers::Array<dword> lockedBitangents ;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
};

struct ModelLightningSystemV58 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV58 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV58> flipbook ;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV58 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV58 {
    helpers::Array<ModelLightningSystemV58> systems ;
    helpers::Array<ModelLightningBoltV58> bolts ;
    helpers::Array<ModelLightningNodeV58> nodes ;
};

struct ModelBoneConstraintLinkV58 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV58 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV58> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV58 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV58 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelFixedOffsetDataV58 {
    qword name;
    qword parentBone;
    float3 translation;
};

struct ModelFileDataV58 {
    helpers::Array<ModelPermutationDataV58> permutations ;
    helpers::PtrStruct<ModelMeshDataV58> meshes ;
    helpers::Ptr<ModelModelDataV58> model ;
    helpers::Array<ModelPropertyDataV58> properties ;
    helpers::Ptr<ModelCloudDataV58> cloudData ;
    helpers::Array<ModelObstacleDataV58> obstacles ;
    helpers::Ptr<ModelStreakDataV58> streakData ;
    helpers::Ptr<ModelLightDataV58> lightData ;
    helpers::Array<ModelClothDataV58> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV58> lightningData ;
    helpers::Array<ModelBoneConstraintV58> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV58> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV58> boneOffsetData ;
    helpers::Array<ModelFixedOffsetDataV58> fixedOffsetData ;
    helpers::FileName modelReference;
};

typedef ModelFileDataV58 Gw2StructMODL;

/* Version: 57, ReferencedFunction: 0x1 */
struct ModelTextureDataV57 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV57 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV57 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV57 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV57 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV57 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV57> textures ;
    helpers::Array<ModelConstantDataV57> constants ;
    helpers::Array<ModelMatConstLinkV57> matConstLinks ;
    helpers::Array<ModelUVTransLinkV57> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV57> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV57 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV57> materials ;
};

struct ModelMeshLodDataV57 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV57 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV57 {
    helpers::Array<ModelMeshMorphVertV57> positions ;
    helpers::Array<ModelMeshMorphVertV57> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV57 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV57> lods ;
    helpers::Array<ModelMeshMorphTargetV57> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelTransformDataV57 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV57 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV57 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelBoneSymmetryV57 {
    qword boneLeft;
    qword boneRight;
};

struct ModelSkeletonDataV57 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV57> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<ModelBoneSymmetryV57> boneSymmetries ;
};

struct ModelMeshBindingDataV57 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV57 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV57 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV57> Skeleton ;
    ModelTransformDataV57 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV57> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV57> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV57 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV57 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV57 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV57 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V57 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV57 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV57> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV57> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV57> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V57> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV57 {
    helpers::Array<ModelParticleCloudV57> clouds ;
    helpers::Array<ModelParticleEmitterV57> emitters ;
};

struct ModelObstacleDataV57 {
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V57> transform ;
};

struct ModelStreakV57 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV57 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV57 {
    helpers::Array<ModelStreakV57> streaks ;
    helpers::Array<ModelStreakAnchorV57> anchors ;
};

struct ModelEffectLightV57 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV57 {
    helpers::Array<ModelEffectLightV57> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV57 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV57 {
    helpers::Array<ModelClothBoneWeightV57> weights ;
};

struct ModelClothSoftLockV57 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV57 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV57 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV57> groups ;
    helpers::Array<ModelClothSoftLockV57> softLocks ;
    helpers::Array<ModelClothConstraintV57> lod0Constraints ;
    helpers::Array<ModelClothConstraintV57> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
};

struct ModelLightningSystemV57 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV57 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV57 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV57 {
    helpers::Array<ModelLightningSystemV57> systems ;
    helpers::Array<ModelLightningBoltV57> bolts ;
    helpers::Array<ModelLightningNodeV57> nodes ;
};

struct ModelBoneConstraintLinkV57 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV57 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV57> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV57 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV57 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelFixedOffsetDataV57 {
    qword name;
    qword parentBone;
    float3 translation;
};

struct ModelFileDataV57 {
    helpers::Array<ModelPermutationDataV57> permutations ;
    helpers::PtrStruct<ModelMeshDataV57> meshes ;
    helpers::Ptr<ModelModelDataV57> model ;
    helpers::Array<ModelPropertyDataV57> properties ;
    helpers::Ptr<ModelCloudDataV57> cloudData ;
    helpers::Array<ModelObstacleDataV57> obstacles ;
    helpers::Ptr<ModelStreakDataV57> streakData ;
    helpers::Ptr<ModelLightDataV57> lightData ;
    helpers::Array<ModelClothDataV57> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV57> lightningData ;
    helpers::Array<ModelBoneConstraintV57> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV57> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV57> boneOffsetData ;
    helpers::Array<ModelFixedOffsetDataV57> fixedOffsetData ;
    helpers::FileName modelReference;
};

typedef ModelFileDataV57 Gw2StructMODL;

/* Version: 56, ReferencedFunction: 0x1 */
struct ModelTextureDataV56 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV56 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV56 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV56 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV56 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV56 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV56> textures ;
    helpers::Array<ModelConstantDataV56> constants ;
    helpers::Array<ModelMatConstLinkV56> matConstLinks ;
    helpers::Array<ModelUVTransLinkV56> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV56> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV56 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV56> materials ;
};

struct ModelMeshLodDataV56 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV56 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV56 {
    helpers::Array<ModelMeshMorphVertV56> positions ;
    helpers::Array<ModelMeshMorphVertV56> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV56 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV56> lods ;
    helpers::Array<ModelMeshMorphTargetV56> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelTransformDataV56 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV56 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV56 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelBoneSymmetryV56 {
    qword boneLeft;
    qword boneRight;
};

struct ModelSkeletonDataV56 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV56> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<ModelBoneSymmetryV56> boneSymmetries ;
};

struct ModelMeshBindingDataV56 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV56 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV56 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV56> Skeleton ;
    ModelTransformDataV56 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV56> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV56> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV56 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV56 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV56 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV56 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V56 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV56 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV56> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV56> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV56> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V56> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV56 {
    helpers::Array<ModelParticleCloudV56> clouds ;
    helpers::Array<ModelParticleEmitterV56> emitters ;
};

struct ModelObstacleDataV56 {
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V56> transform ;
};

struct ModelStreakV56 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV56 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV56 {
    helpers::Array<ModelStreakV56> streaks ;
    helpers::Array<ModelStreakAnchorV56> anchors ;
};

struct ModelEffectLightV56 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV56 {
    helpers::Array<ModelEffectLightV56> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV56 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV56 {
    helpers::Array<ModelClothBoneWeightV56> weights ;
};

struct ModelClothSoftLockV56 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV56 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV56 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV56> groups ;
    helpers::Array<ModelClothSoftLockV56> softLocks ;
    helpers::Array<ModelClothConstraintV56> lod0Constraints ;
    helpers::Array<ModelClothConstraintV56> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
};

struct ModelLightningSystemV56 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV56 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV56 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV56 {
    helpers::Array<ModelLightningSystemV56> systems ;
    helpers::Array<ModelLightningBoltV56> bolts ;
    helpers::Array<ModelLightningNodeV56> nodes ;
};

struct ModelBoneConstraintLinkV56 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV56 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV56> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV56 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV56 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelFileDataV56 {
    helpers::Array<ModelPermutationDataV56> permutations ;
    helpers::PtrStruct<ModelMeshDataV56> meshes ;
    helpers::Ptr<ModelModelDataV56> model ;
    helpers::Array<ModelPropertyDataV56> properties ;
    helpers::Ptr<ModelCloudDataV56> cloudData ;
    helpers::Array<ModelObstacleDataV56> obstacles ;
    helpers::Ptr<ModelStreakDataV56> streakData ;
    helpers::Ptr<ModelLightDataV56> lightData ;
    helpers::Array<ModelClothDataV56> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV56> lightningData ;
    helpers::Array<ModelBoneConstraintV56> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV56> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV56> boneOffsetData ;
    helpers::FileName modelReference;
};

typedef ModelFileDataV56 Gw2StructMODL;

/* Version: 55, ReferencedFunction: 0x410CD72000000001 */
struct ModelTextureDataV55 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV55 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV55 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV55 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV55 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV55 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV55> textures ;
    helpers::Array<ModelConstantDataV55> constants ;
    helpers::Array<ModelMatConstLinkV55> matConstLinks ;
    helpers::Array<ModelUVTransLinkV55> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV55> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV55 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV55> materials ;
};

struct ModelMeshLodDataV55 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV55 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV55 {
    helpers::Array<ModelMeshMorphVertV55> positions ;
    helpers::Array<ModelMeshMorphVertV55> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV55 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV55> lods ;
    helpers::Array<ModelMeshMorphTargetV55> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelTransformDataV55 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV55 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV55 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelBoneSymmetryV55 {
    qword boneLeft;
    qword boneRight;
};

struct ModelSkeletonDataV55 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV55> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<ModelBoneSymmetryV55> boneSymmetries ;
};

struct ModelMeshBindingDataV55 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV55 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV55 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV55> Skeleton ;
    ModelTransformDataV55 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV55> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV55> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV55 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV55 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV55 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV55 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V55 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV55 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV55> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV55> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV55> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V55> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV55 {
    helpers::Array<ModelParticleCloudV55> clouds ;
    helpers::Array<ModelParticleEmitterV55> emitters ;
};

struct ModelObstacleDataV55 {
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V55> transform ;
};

struct ModelStreakV55 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV55 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV55 {
    helpers::Array<ModelStreakV55> streaks ;
    helpers::Array<ModelStreakAnchorV55> anchors ;
};

struct ModelEffectLightV55 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV55 {
    helpers::Array<ModelEffectLightV55> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV55 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV55 {
    helpers::Array<ModelClothBoneWeightV55> weights ;
};

struct ModelClothSoftLockV55 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV55 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV55 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV55> groups ;
    helpers::Array<ModelClothSoftLockV55> softLocks ;
    helpers::Array<ModelClothConstraintV55> lod0Constraints ;
    helpers::Array<ModelClothConstraintV55> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
};

struct ModelLightningSystemV55 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV55 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV55 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV55 {
    helpers::Array<ModelLightningSystemV55> systems ;
    helpers::Array<ModelLightningBoltV55> bolts ;
    helpers::Array<ModelLightningNodeV55> nodes ;
};

struct ModelBoneConstraintLinkV55 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV55 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV55> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV55 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV55 {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
};

struct ModelFileDataV55 {
    helpers::Array<ModelPermutationDataV55> permutations ;
    helpers::PtrStruct<ModelMeshDataV55> meshes ;
    helpers::Ptr<ModelModelDataV55> model ;
    helpers::Array<ModelPropertyDataV55> properties ;
    helpers::Ptr<ModelCloudDataV55> cloudData ;
    helpers::Array<ModelObstacleDataV55> obstacles ;
    helpers::Ptr<ModelStreakDataV55> streakData ;
    helpers::Ptr<ModelLightDataV55> lightData ;
    helpers::Array<ModelClothDataV55> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV55> lightningData ;
    helpers::Array<ModelBoneConstraintV55> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV55> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV55> boneOffsetData ;
};

typedef ModelFileDataV55 Gw2StructMODL;

/* Version: 54, ReferencedFunction: 0x1 */
struct ModelTextureDataV54 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV54 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV54 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV54 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV54 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV54 {
    qword token;
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV54> textures ;
    helpers::Array<ModelConstantDataV54> constants ;
    helpers::Array<ModelMatConstLinkV54> matConstLinks ;
    helpers::Array<ModelUVTransLinkV54> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV54> texTransforms ;
    byte texCoordCount;
};

struct ModelPermutationDataV54 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV54> materials ;
};

struct ModelMeshLodDataV54 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV54 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV54 {
    helpers::Array<ModelMeshMorphVertV54> positions ;
    helpers::Array<ModelMeshMorphVertV54> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV54 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV54> lods ;
    helpers::Array<ModelMeshMorphTargetV54> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelTransformDataV54 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV54 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV54 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelBoneSymmetryV54 {
    qword boneLeft;
    qword boneRight;
};

struct ModelSkeletonDataV54 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV54> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<ModelBoneSymmetryV54> boneSymmetries ;
};

struct ModelMeshBindingDataV54 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV54 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV54 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV54> Skeleton ;
    ModelTransformDataV54 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV54> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV54> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV54 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV54 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV54 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV54 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelMatrix43V54 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelParticleEmitterV54 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV54> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV54> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV54> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    helpers::Ptr<ModelMatrix43V54> transform ;
    byte windInfluence;
    byte alignmentType;
    byte spawnShape;
};

struct ModelCloudDataV54 {
    helpers::Array<ModelParticleCloudV54> clouds ;
    helpers::Array<ModelParticleEmitterV54> emitters ;
};

struct ModelObstacleDataV54 {
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V54> transform ;
};

struct ModelStreakV54 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV54 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV54 {
    helpers::Array<ModelStreakV54> streaks ;
    helpers::Array<ModelStreakAnchorV54> anchors ;
};

struct ModelEffectLightV54 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV54 {
    helpers::Array<ModelEffectLightV54> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV54 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV54 {
    helpers::Array<ModelClothBoneWeightV54> weights ;
};

struct ModelClothSoftLockV54 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV54 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV54 {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    helpers::Array<ModelClothMeshGroupV54> groups ;
    helpers::Array<ModelClothSoftLockV54> softLocks ;
    helpers::Array<ModelClothConstraintV54> lod0Constraints ;
    helpers::Array<ModelClothConstraintV54> lod1Constraints ;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
    word lockCount;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
};

struct ModelLightningSystemV54 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV54 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV54 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV54 {
    helpers::Array<ModelLightningSystemV54> systems ;
    helpers::Array<ModelLightningBoltV54> bolts ;
    helpers::Array<ModelLightningNodeV54> nodes ;
};

struct ModelBoneConstraintLinkV54 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV54 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV54> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV54 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV54 {
    qword bone;
    float3 translation;
    float4 rotation;
};

struct ModelFileDataV54 {
    helpers::Array<ModelPermutationDataV54> permutations ;
    helpers::PtrStruct<ModelMeshDataV54> meshes ;
    helpers::Ptr<ModelModelDataV54> model ;
    helpers::Array<ModelPropertyDataV54> properties ;
    helpers::Ptr<ModelCloudDataV54> cloudData ;
    helpers::Array<ModelObstacleDataV54> obstacles ;
    helpers::Ptr<ModelStreakDataV54> streakData ;
    helpers::Ptr<ModelLightDataV54> lightData ;
    helpers::Array<ModelClothDataV54> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV54> lightningData ;
    helpers::Array<ModelBoneConstraintV54> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV54> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV54> boneOffsetData ;
};

typedef ModelFileDataV54 Gw2StructMODL;

/* Version: 53, ReferencedFunction: 0x410CD3D000000001 */
struct ModelTextureDataV53 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV53 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV53 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV53 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV53 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV53 {
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV53> textures ;
    helpers::Array<ModelConstantDataV53> constants ;
    helpers::Array<ModelMatConstLinkV53> matConstLinks ;
    helpers::Array<ModelUVTransLinkV53> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV53> texTransforms ;
};

struct ModelPermutationDataV53 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV53> materials ;
};

struct ModelMeshLodDataV53 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV53 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV53 {
    helpers::Array<ModelMeshMorphVertV53> positions ;
    helpers::Array<ModelMeshMorphVertV53> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV53 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV53> lods ;
    helpers::Array<ModelMeshMorphTargetV53> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelTransformDataV53 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV53 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV53 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV53 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV53> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingDataV53 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV53 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV53 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV53> Skeleton ;
    ModelTransformDataV53 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV53> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV53> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV53 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV53 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV53 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV53 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV53 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV53> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV53> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV53> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV53 {
    helpers::Array<ModelParticleCloudV53> clouds ;
    helpers::Array<ModelParticleEmitterV53> emitters ;
};

struct ModelMatrix43V53 {
    float4 x;
    float4 y;
    float4 z;
};

struct ModelObstacleDataV53 {
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    helpers::Ptr<ModelMatrix43V53> transform ;
};

struct ModelStreakV53 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV53 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV53 {
    helpers::Array<ModelStreakV53> streaks ;
    helpers::Array<ModelStreakAnchorV53> anchors ;
};

struct ModelEffectLightV53 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV53 {
    helpers::Array<ModelEffectLightV53> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV53 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV53 {
    helpers::Array<ModelClothBoneWeightV53> weights ;
};

struct ModelClothSoftLockV53 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV53 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothDataV53 {
    dword materialIndex;
    byte flags;
    float drag;
    float gravity;
    float compressibility;
    float stretchiness;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV53> groups ;
    helpers::Array<ModelClothSoftLockV53> softLocks ;
    helpers::Array<ModelClothConstraintV53> lod0Constraints ;
    helpers::Array<ModelClothConstraintV53> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<dword> obstacleIndices ;
};

struct ModelLightningSystemV53 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV53 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV53 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV53 {
    helpers::Array<ModelLightningSystemV53> systems ;
    helpers::Array<ModelLightningBoltV53> bolts ;
    helpers::Array<ModelLightningNodeV53> nodes ;
};

struct ModelBoneConstraintLinkV53 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV53 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV53> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV53 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV53 {
    qword bone;
    float3 translation;
    float4 rotation;
};

struct ModelFileDataV53 {
    helpers::Array<ModelPermutationDataV53> permutations ;
    helpers::PtrStruct<ModelMeshDataV53> meshes ;
    helpers::Ptr<ModelModelDataV53> model ;
    helpers::Array<ModelPropertyDataV53> properties ;
    helpers::Ptr<ModelCloudDataV53> cloudData ;
    helpers::Array<ModelObstacleDataV53> obstacles ;
    helpers::Ptr<ModelStreakDataV53> streakData ;
    helpers::Ptr<ModelLightDataV53> lightData ;
    helpers::Array<ModelClothDataV53> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV53> lightningData ;
    helpers::Array<ModelBoneConstraintV53> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV53> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV53> boneOffsetData ;
};

typedef ModelFileDataV53 Gw2StructMODL;

/* Version: 52, ReferencedFunction: 0x410CD26000000001 */
struct ModelTextureDataV52 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV52 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV52 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV52 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV52 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV52 {
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV52> textures ;
    helpers::Array<ModelConstantDataV52> constants ;
    helpers::Array<ModelMatConstLinkV52> matConstLinks ;
    helpers::Array<ModelUVTransLinkV52> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV52> texTransforms ;
};

struct ModelPermutationDataV52 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV52> materials ;
};

struct ModelMeshLodDataV52 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV52 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV52 {
    helpers::Array<ModelMeshMorphVertV52> positions ;
    helpers::Array<ModelMeshMorphVertV52> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV52 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV52> lods ;
    helpers::Array<ModelMeshMorphTargetV52> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelTransformDataV52 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV52 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV52 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV52 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV52> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingDataV52 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV52 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV52 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV52> Skeleton ;
    ModelTransformDataV52 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV52> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV52> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV52 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV52 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV52 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV52 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV52 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV52> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV52> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV52> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV52 {
    helpers::Array<ModelParticleCloudV52> clouds ;
    helpers::Array<ModelParticleEmitterV52> emitters ;
};

struct ModelObstacleDataV52 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV52 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV52 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV52 {
    helpers::Array<ModelStreakV52> streaks ;
    helpers::Array<ModelStreakAnchorV52> anchors ;
};

struct ModelEffectLightV52 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV52 {
    helpers::Array<ModelEffectLightV52> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV52 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV52 {
    helpers::Array<ModelClothBoneWeightV52> weights ;
};

struct ModelClothSoftLockV52 {
    byte weight;
    word vertIndex;
};

struct ModelClothConstraintV52 {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
};

struct ModelClothObstacleV52 {
    qword bone;
    byte type;
    float depth;
    float height;
    float radius;
    float width;
};

struct ModelClothDataV52 {
    dword materialIndex;
    byte flags;
    float drag;
    float gravity;
    float compressibility;
    float stretchiness;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV52> groups ;
    helpers::Array<ModelClothSoftLockV52> softLocks ;
    helpers::Array<ModelClothConstraintV52> lod0Constraints ;
    helpers::Array<ModelClothConstraintV52> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV52> obstacles ;
};

struct ModelLightningSystemV52 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV52 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV52 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV52 {
    helpers::Array<ModelLightningSystemV52> systems ;
    helpers::Array<ModelLightningBoltV52> bolts ;
    helpers::Array<ModelLightningNodeV52> nodes ;
};

struct ModelBoneConstraintLinkV52 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV52 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV52> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV52 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV52 {
    qword bone;
    float3 offset;
};

struct ModelFileDataV52 {
    helpers::Array<ModelPermutationDataV52> permutations ;
    helpers::PtrStruct<ModelMeshDataV52> meshes ;
    helpers::Ptr<ModelModelDataV52> model ;
    helpers::Array<ModelPropertyDataV52> properties ;
    helpers::Ptr<ModelCloudDataV52> cloudData ;
    helpers::Array<ModelObstacleDataV52> obstacles ;
    helpers::Ptr<ModelStreakDataV52> streakData ;
    helpers::Ptr<ModelLightDataV52> lightData ;
    helpers::Array<ModelClothDataV52> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV52> lightningData ;
    helpers::Array<ModelBoneConstraintV52> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV52> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV52> boneOffsetData ;
};

typedef ModelFileDataV52 Gw2StructMODL;

/* Version: 51, ReferencedFunction: 0x410CCF7000000001 */
struct ModelTextureDataV51 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV51 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV51 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV51 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV51 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV51 {
    dword materialId;
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV51> textures ;
    helpers::Array<ModelConstantDataV51> constants ;
    helpers::Array<ModelMatConstLinkV51> matConstLinks ;
    helpers::Array<ModelUVTransLinkV51> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV51> texTransforms ;
};

struct ModelPermutationDataV51 {
    qword token;
    helpers::PtrStruct<ModelMaterialDataV51> materials ;
};

struct ModelMeshLodDataV51 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV51 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV51 {
    helpers::Array<ModelMeshMorphVertV51> positions ;
    helpers::Array<ModelMeshMorphVertV51> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV51 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV51> lods ;
    helpers::Array<ModelMeshMorphTargetV51> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
};

struct ModelTransformDataV51 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV51 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV51 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV51 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV51> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingDataV51 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV51 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV51 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV51> Skeleton ;
    ModelTransformDataV51 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV51> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV51> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV51 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV51 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV51 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV51 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV51 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV51> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV51> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV51> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV51 {
    helpers::Array<ModelParticleCloudV51> clouds ;
    helpers::Array<ModelParticleEmitterV51> emitters ;
};

struct ModelObstacleDataV51 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV51 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV51 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV51 {
    helpers::Array<ModelStreakV51> streaks ;
    helpers::Array<ModelStreakAnchorV51> anchors ;
};

struct ModelEffectLightV51 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV51 {
    helpers::Array<ModelEffectLightV51> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV51 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV51 {
    helpers::Array<ModelClothBoneWeightV51> weights ;
};

struct ModelClothConstraintV51 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV51 {
    qword bone;
    byte type;
    float depth;
    float height;
    float radius;
    float width;
};

struct ModelClothDataV51 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV51> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV51> lod0Constraints ;
    helpers::Array<ModelClothConstraintV51> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV51> obstacles ;
};

struct ModelLightningSystemV51 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV51 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV51 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV51 {
    helpers::Array<ModelLightningSystemV51> systems ;
    helpers::Array<ModelLightningBoltV51> bolts ;
    helpers::Array<ModelLightningNodeV51> nodes ;
};

struct ModelBoneConstraintLinkV51 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV51 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV51> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV51 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV51 {
    qword bone;
    float3 offset;
};

struct ModelFileDataV51 {
    helpers::Array<ModelPermutationDataV51> permutations ;
    helpers::PtrStruct<ModelMeshDataV51> meshes ;
    helpers::Ptr<ModelModelDataV51> model ;
    helpers::Array<ModelPropertyDataV51> properties ;
    helpers::Ptr<ModelCloudDataV51> cloudData ;
    helpers::Array<ModelObstacleDataV51> obstacles ;
    helpers::Ptr<ModelStreakDataV51> streakData ;
    helpers::Ptr<ModelLightDataV51> lightData ;
    helpers::Array<ModelClothDataV51> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV51> lightningData ;
    helpers::Array<ModelBoneConstraintV51> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV51> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV51> boneOffsetData ;
};

typedef ModelFileDataV51 Gw2StructMODL;

/* Version: 50, ReferencedFunction: 0x410CCF3000000001 */
struct ModelTextureDataV50 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV50 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV50 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV50 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV50 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV50 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV50> textures ;
    helpers::Array<ModelConstantDataV50> constants ;
    helpers::Array<ModelMatConstLinkV50> matConstLinks ;
    helpers::Array<ModelUVTransLinkV50> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV50> texTransforms ;
};

struct ModelMeshLodDataV50 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV50 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV50 {
    helpers::Array<ModelMeshMorphVertV50> positions ;
    helpers::Array<ModelMeshMorphVertV50> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV50 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV50> lods ;
    helpers::Array<ModelMeshMorphTargetV50> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
};

struct ModelTransformDataV50 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV50 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV50 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV50 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV50> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingDataV50 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV50 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV50 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV50> Skeleton ;
    ModelTransformDataV50 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV50> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV50> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV50 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV50 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV50 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV50 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV50 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV50> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV50> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV50> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV50 {
    helpers::Array<ModelParticleCloudV50> clouds ;
    helpers::Array<ModelParticleEmitterV50> emitters ;
};

struct ModelObstacleDataV50 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV50 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV50 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV50 {
    helpers::Array<ModelStreakV50> streaks ;
    helpers::Array<ModelStreakAnchorV50> anchors ;
};

struct ModelEffectLightV50 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV50 {
    helpers::Array<ModelEffectLightV50> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV50 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV50 {
    helpers::Array<ModelClothBoneWeightV50> weights ;
};

struct ModelClothConstraintV50 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV50 {
    qword bone;
    byte type;
};

struct ModelClothDataV50 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV50> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV50> lod0Constraints ;
    helpers::Array<ModelClothConstraintV50> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV50> obstacles ;
};

struct ModelLightningSystemV50 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword fvf;
    dword materialIndex;
};

struct ModelLightningBoltV50 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV50 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV50 {
    helpers::Array<ModelLightningSystemV50> systems ;
    helpers::Array<ModelLightningBoltV50> bolts ;
    helpers::Array<ModelLightningNodeV50> nodes ;
};

struct ModelBoneConstraintLinkV50 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV50 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV50> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV50 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV50 {
    qword bone;
    float3 offset;
};

struct ModelFileDataV50 {
    helpers::PtrStruct<ModelMaterialDataV50> materials ;
    helpers::PtrStruct<ModelMeshDataV50> meshes ;
    helpers::Ptr<ModelModelDataV50> model ;
    helpers::Array<ModelPropertyDataV50> properties ;
    helpers::Ptr<ModelCloudDataV50> cloudData ;
    helpers::Array<ModelObstacleDataV50> obstacles ;
    helpers::Ptr<ModelStreakDataV50> streakData ;
    helpers::Ptr<ModelLightDataV50> lightData ;
    helpers::Array<ModelClothDataV50> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV50> lightningData ;
    helpers::Array<ModelBoneConstraintV50> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV50> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV50> boneOffsetData ;
};

typedef ModelFileDataV50 Gw2StructMODL;

/* Version: 49, ReferencedFunction: 0x1 */
struct ModelTextureDataV49 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV49 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV49 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV49 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV49 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV49 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV49> textures ;
    helpers::Array<ModelConstantDataV49> constants ;
    helpers::Array<ModelMatConstLinkV49> matConstLinks ;
    helpers::Array<ModelUVTransLinkV49> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV49> texTransforms ;
};

struct ModelMeshLodDataV49 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV49 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV49 {
    helpers::Array<ModelMeshMorphVertV49> positions ;
    helpers::Array<ModelMeshMorphVertV49> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV49 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV49> lods ;
    helpers::Array<ModelMeshMorphTargetV49> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
};

struct ModelTransformDataV49 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV49 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV49 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV49 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV49> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingDataV49 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV49 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV49 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV49> Skeleton ;
    ModelTransformDataV49 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV49> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV49> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV49 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV49 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV49 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV49 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV49 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV49> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV49> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV49> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV49 {
    helpers::Array<ModelParticleCloudV49> clouds ;
    helpers::Array<ModelParticleEmitterV49> emitters ;
};

struct ModelObstacleDataV49 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV49 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV49 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV49 {
    helpers::Array<ModelStreakV49> streaks ;
    helpers::Array<ModelStreakAnchorV49> anchors ;
};

struct ModelEffectLightV49 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV49 {
    helpers::Array<ModelEffectLightV49> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV49 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV49 {
    helpers::Array<ModelClothBoneWeightV49> weights ;
};

struct ModelClothConstraintV49 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV49 {
    qword bone;
    byte type;
};

struct ModelClothDataV49 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV49> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV49> lod0Constraints ;
    helpers::Array<ModelClothConstraintV49> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV49> obstacles ;
};

struct ModelLightningSystemV49 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV49 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV49 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV49 {
    helpers::Array<ModelLightningSystemV49> systems ;
    helpers::Array<ModelLightningBoltV49> bolts ;
    helpers::Array<ModelLightningNodeV49> nodes ;
};

struct ModelBoneConstraintLinkV49 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV49 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV49> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV49 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelBoneOffsetDataV49 {
    qword bone;
    float3 offset;
};

struct ModelFileDataV49 {
    helpers::PtrStruct<ModelMaterialDataV49> materials ;
    helpers::PtrStruct<ModelMeshDataV49> meshes ;
    helpers::Ptr<ModelModelDataV49> model ;
    helpers::Array<ModelPropertyDataV49> properties ;
    helpers::Ptr<ModelCloudDataV49> cloudData ;
    helpers::Array<ModelObstacleDataV49> obstacles ;
    helpers::Ptr<ModelStreakDataV49> streakData ;
    helpers::Ptr<ModelLightDataV49> lightData ;
    helpers::Array<ModelClothDataV49> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV49> lightningData ;
    helpers::Array<ModelBoneConstraintV49> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV49> softBodyData ;
    helpers::Array<ModelBoneOffsetDataV49> boneOffsetData ;
};

typedef ModelFileDataV49 Gw2StructMODL;

/* Version: 48, ReferencedFunction: 0x410CC4D000000001 */
struct ModelTextureDataV48 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV48 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV48 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV48 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV48 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV48 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV48> textures ;
    helpers::Array<ModelConstantDataV48> constants ;
    helpers::Array<ModelMatConstLinkV48> matConstLinks ;
    helpers::Array<ModelUVTransLinkV48> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV48> texTransforms ;
};

struct ModelMeshLodDataV48 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV48 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV48 {
    helpers::Array<ModelMeshMorphVertV48> positions ;
    helpers::Array<ModelMeshMorphVertV48> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct ModelMeshDataV48 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV48> lods ;
    helpers::Array<ModelMeshMorphTargetV48> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
};

struct ModelTransformDataV48 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV48 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV48 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV48 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV48> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingDataV48 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV48 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV48 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV48> Skeleton ;
    ModelTransformDataV48 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV48> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV48> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV48 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV48 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV48 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV48 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV48 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV48> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV48> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV48> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV48 {
    helpers::Array<ModelParticleCloudV48> clouds ;
    helpers::Array<ModelParticleEmitterV48> emitters ;
};

struct ModelObstacleDataV48 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV48 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV48 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV48 {
    helpers::Array<ModelStreakV48> streaks ;
    helpers::Array<ModelStreakAnchorV48> anchors ;
};

struct ModelEffectLightV48 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV48 {
    helpers::Array<ModelEffectLightV48> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV48 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV48 {
    helpers::Array<ModelClothBoneWeightV48> weights ;
};

struct ModelClothConstraintV48 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV48 {
    qword bone;
    byte type;
};

struct ModelClothDataV48 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV48> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV48> lod0Constraints ;
    helpers::Array<ModelClothConstraintV48> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV48> obstacles ;
};

struct ModelLightningSystemV48 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV48 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV48 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV48 {
    helpers::Array<ModelLightningSystemV48> systems ;
    helpers::Array<ModelLightningBoltV48> bolts ;
    helpers::Array<ModelLightningNodeV48> nodes ;
};

struct ModelBoneConstraintLinkV48 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV48 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV48> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV48 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelFileDataV48 {
    helpers::PtrStruct<ModelMaterialDataV48> materials ;
    helpers::PtrStruct<ModelMeshDataV48> meshes ;
    helpers::Ptr<ModelModelDataV48> model ;
    helpers::Array<ModelPropertyDataV48> properties ;
    helpers::Ptr<ModelCloudDataV48> cloudData ;
    helpers::Array<ModelObstacleDataV48> obstacles ;
    helpers::Ptr<ModelStreakDataV48> streakData ;
    helpers::Ptr<ModelLightDataV48> lightData ;
    helpers::Array<ModelClothDataV48> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV48> lightningData ;
    helpers::Array<ModelBoneConstraintV48> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV48> softBodyData ;
};

typedef ModelFileDataV48 Gw2StructMODL;

/* Version: 47, ReferencedFunction: 0x410CC20000000001 */
struct ModelTextureDataV47 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV47 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV47 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV47 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV47 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV47 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV47> textures ;
    helpers::Array<ModelConstantDataV47> constants ;
    helpers::Array<ModelMatConstLinkV47> matConstLinks ;
    helpers::Array<ModelUVTransLinkV47> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV47> texTransforms ;
};

struct ModelMeshLodDataV47 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphVertV47 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV47 {
    helpers::Array<ModelMeshMorphVertV47> positions ;
    helpers::Array<ModelMeshMorphVertV47> normals ;
    qword mesh;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV47 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV47> lods ;
    helpers::Array<ModelMeshMorphTargetV47> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV47 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV47 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV47 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV47 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV47> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingDataV47 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV47 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV47 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV47> Skeleton ;
    ModelTransformDataV47 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV47> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV47> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV47 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV47 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV47 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV47 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV47 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV47> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV47> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV47> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV47 {
    helpers::Array<ModelParticleCloudV47> clouds ;
    helpers::Array<ModelParticleEmitterV47> emitters ;
};

struct ModelObstacleDataV47 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV47 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV47 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV47 {
    helpers::Array<ModelStreakV47> streaks ;
    helpers::Array<ModelStreakAnchorV47> anchors ;
};

struct ModelEffectLightV47 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV47 {
    helpers::Array<ModelEffectLightV47> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV47 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV47 {
    helpers::Array<ModelClothBoneWeightV47> weights ;
};

struct ModelClothConstraintV47 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV47 {
    qword bone;
    byte type;
};

struct ModelClothDataV47 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV47> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV47> lod0Constraints ;
    helpers::Array<ModelClothConstraintV47> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV47> obstacles ;
};

struct ModelLightningSystemV47 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV47 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV47 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV47 {
    helpers::Array<ModelLightningSystemV47> systems ;
    helpers::Array<ModelLightningBoltV47> bolts ;
    helpers::Array<ModelLightningNodeV47> nodes ;
};

struct ModelBoneConstraintLinkV47 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV47 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV47> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV47 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelFileDataV47 {
    helpers::PtrStruct<ModelMaterialDataV47> materials ;
    helpers::PtrStruct<ModelMeshDataV47> meshes ;
    helpers::Ptr<ModelModelDataV47> model ;
    helpers::Array<ModelPropertyDataV47> properties ;
    helpers::Ptr<ModelCloudDataV47> cloudData ;
    helpers::Array<ModelObstacleDataV47> obstacles ;
    helpers::Ptr<ModelStreakDataV47> streakData ;
    helpers::Ptr<ModelLightDataV47> lightData ;
    helpers::Array<ModelClothDataV47> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV47> lightningData ;
    helpers::Array<ModelBoneConstraintV47> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV47> softBodyData ;
};

typedef ModelFileDataV47 Gw2StructMODL;

/* Version: 46, ReferencedFunction: 0x410CC16000000001 */
struct ModelTextureDataV46 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV46 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV46 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV46 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV46 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV46 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV46> textures ;
    helpers::Array<ModelConstantDataV46> constants ;
    helpers::Array<ModelMatConstLinkV46> matConstLinks ;
    helpers::Array<ModelUVTransLinkV46> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV46> texTransforms ;
};

struct ModelMeshLodDataV46 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV46 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV46 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV46> lods ;
    helpers::Array<ModelMeshMorphTargetV46> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV46 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV46 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV46 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV46 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV46> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingDataV46 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV46 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV46 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV46> Skeleton ;
    ModelTransformDataV46 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV46> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV46> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV46 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV46 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV46 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV46 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV46 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV46> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV46> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV46> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV46 {
    helpers::Array<ModelParticleCloudV46> clouds ;
    helpers::Array<ModelParticleEmitterV46> emitters ;
};

struct ModelObstacleDataV46 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV46 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV46 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV46 {
    helpers::Array<ModelStreakV46> streaks ;
    helpers::Array<ModelStreakAnchorV46> anchors ;
};

struct ModelEffectLightV46 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV46 {
    helpers::Array<ModelEffectLightV46> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV46 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV46 {
    helpers::Array<ModelClothBoneWeightV46> weights ;
};

struct ModelClothConstraintV46 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV46 {
    qword bone;
    byte type;
};

struct ModelClothDataV46 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV46> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV46> lod0Constraints ;
    helpers::Array<ModelClothConstraintV46> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV46> obstacles ;
};

struct ModelLightningSystemV46 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV46 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV46 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV46 {
    helpers::Array<ModelLightningSystemV46> systems ;
    helpers::Array<ModelLightningBoltV46> bolts ;
    helpers::Array<ModelLightningNodeV46> nodes ;
};

struct ModelBoneConstraintLinkV46 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV46 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV46> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV46 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelFileDataV46 {
    helpers::PtrStruct<ModelMaterialDataV46> materials ;
    helpers::PtrStruct<ModelMeshDataV46> meshes ;
    helpers::Ptr<ModelModelDataV46> model ;
    helpers::Array<ModelPropertyDataV46> properties ;
    helpers::Ptr<ModelCloudDataV46> cloudData ;
    helpers::Array<ModelObstacleDataV46> obstacles ;
    helpers::Ptr<ModelStreakDataV46> streakData ;
    helpers::Ptr<ModelLightDataV46> lightData ;
    helpers::Array<ModelClothDataV46> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV46> lightningData ;
    helpers::Array<ModelBoneConstraintV46> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV46> softBodyData ;
};

typedef ModelFileDataV46 Gw2StructMODL;

/* Version: 45, ReferencedFunction: 0x1 */
struct ModelTextureDataV45 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV45 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV45 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV45 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialTexTransformV45 {
    byte random;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
};

struct ModelMaterialDataV45 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV45> textures ;
    helpers::Array<ModelConstantDataV45> constants ;
    helpers::Array<ModelMatConstLinkV45> matConstLinks ;
    helpers::Array<ModelUVTransLinkV45> uvTransLinks ;
    helpers::Array<ModelMaterialTexTransformV45> texTransforms ;
};

struct ModelMeshLodDataV45 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV45 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV45 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV45> lods ;
    helpers::Array<ModelMeshMorphTargetV45> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV45 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV45 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV45 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV45 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV45> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingDataV45 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV45 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV45 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV45> Skeleton ;
    ModelTransformDataV45 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV45> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV45> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV45 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV45 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV45 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV45 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV45 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV45> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV45> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV45> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV45 {
    helpers::Array<ModelParticleCloudV45> clouds ;
    helpers::Array<ModelParticleEmitterV45> emitters ;
};

struct ModelObstacleDataV45 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV45 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV45 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV45 {
    helpers::Array<ModelStreakV45> streaks ;
    helpers::Array<ModelStreakAnchorV45> anchors ;
};

struct ModelEffectLightV45 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV45 {
    helpers::Array<ModelEffectLightV45> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV45 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV45 {
    helpers::Array<ModelClothBoneWeightV45> weights ;
};

struct ModelClothConstraintV45 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV45 {
    qword bone;
    byte type;
};

struct ModelClothDataV45 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV45> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV45> lod0Constraints ;
    helpers::Array<ModelClothConstraintV45> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV45> obstacles ;
};

struct ModelLightningSystemV45 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV45 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV45 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV45 {
    helpers::Array<ModelLightningSystemV45> systems ;
    helpers::Array<ModelLightningBoltV45> bolts ;
    helpers::Array<ModelLightningNodeV45> nodes ;
};

struct ModelBoneConstraintLinkV45 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV45 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV45> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV45 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelFileDataV45 {
    helpers::PtrStruct<ModelMaterialDataV45> materials ;
    helpers::PtrStruct<ModelMeshDataV45> meshes ;
    helpers::Ptr<ModelModelDataV45> model ;
    helpers::Array<ModelPropertyDataV45> properties ;
    helpers::Ptr<ModelCloudDataV45> cloudData ;
    helpers::Array<ModelObstacleDataV45> obstacles ;
    helpers::Ptr<ModelStreakDataV45> streakData ;
    helpers::Ptr<ModelLightDataV45> lightData ;
    helpers::Array<ModelClothDataV45> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV45> lightningData ;
    helpers::Array<ModelBoneConstraintV45> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV45> softBodyData ;
};

typedef ModelFileDataV45 Gw2StructMODL;

/* Version: 44, ReferencedFunction: 0x410CBF1000000001 */
struct ModelTextureDataV44 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV44 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV44 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV44 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV44 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV44> textures ;
    helpers::Array<ModelConstantDataV44> constants ;
    helpers::Array<ModelMatConstLinkV44> matConstLinks ;
    helpers::Array<ModelUVTransLinkV44> uvTransLinks ;
};

struct ModelMeshLodDataV44 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV44 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV44 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV44> lods ;
    helpers::Array<ModelMeshMorphTargetV44> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV44 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV44 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV44 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV44 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV44> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingDataV44 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV44 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV44 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV44> Skeleton ;
    ModelTransformDataV44 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV44> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV44> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV44 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV44 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV44 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV44 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV44 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV44> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV44> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV44> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV44 {
    helpers::Array<ModelParticleCloudV44> clouds ;
    helpers::Array<ModelParticleEmitterV44> emitters ;
};

struct ModelObstacleDataV44 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV44 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV44 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV44 {
    helpers::Array<ModelStreakV44> streaks ;
    helpers::Array<ModelStreakAnchorV44> anchors ;
};

struct ModelEffectLightV44 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV44 {
    helpers::Array<ModelEffectLightV44> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV44 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV44 {
    helpers::Array<ModelClothBoneWeightV44> weights ;
};

struct ModelClothConstraintV44 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV44 {
    qword bone;
    byte type;
};

struct ModelClothDataV44 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV44> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV44> lod0Constraints ;
    helpers::Array<ModelClothConstraintV44> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV44> obstacles ;
};

struct ModelLightningSystemV44 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV44 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV44 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV44 {
    helpers::Array<ModelLightningSystemV44> systems ;
    helpers::Array<ModelLightningBoltV44> bolts ;
    helpers::Array<ModelLightningNodeV44> nodes ;
};

struct ModelBoneConstraintLinkV44 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV44 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV44> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV44 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelFileDataV44 {
    helpers::PtrStruct<ModelMaterialDataV44> materials ;
    helpers::PtrStruct<ModelMeshDataV44> meshes ;
    helpers::Ptr<ModelModelDataV44> model ;
    helpers::Array<ModelPropertyDataV44> properties ;
    helpers::Ptr<ModelCloudDataV44> cloudData ;
    helpers::Array<ModelObstacleDataV44> obstacles ;
    helpers::Ptr<ModelStreakDataV44> streakData ;
    helpers::Ptr<ModelLightDataV44> lightData ;
    helpers::Array<ModelClothDataV44> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV44> lightningData ;
    helpers::Array<ModelBoneConstraintV44> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV44> softBodyData ;
};

typedef ModelFileDataV44 Gw2StructMODL;

/* Version: 43, ReferencedFunction: 0x1 */
struct ModelTextureDataV43 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV43 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV43 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV43 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV43 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV43> textures ;
    helpers::Array<ModelConstantDataV43> constants ;
    helpers::Array<ModelMatConstLinkV43> matConstLinks ;
    helpers::Array<ModelUVTransLinkV43> uvTransLinks ;
};

struct ModelMeshLodDataV43 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV43 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV43 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV43> lods ;
    helpers::Array<ModelMeshMorphTargetV43> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV43 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV43 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV43 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV43 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV43> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingDataV43 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV43 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV43 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV43> Skeleton ;
    ModelTransformDataV43 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV43> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV43> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV43 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV43 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV43 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV43 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV43 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV43> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV43> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV43> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV43 {
    helpers::Array<ModelParticleCloudV43> clouds ;
    helpers::Array<ModelParticleEmitterV43> emitters ;
};

struct ModelObstacleDataV43 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV43 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV43 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV43 {
    helpers::Array<ModelStreakV43> streaks ;
    helpers::Array<ModelStreakAnchorV43> anchors ;
};

struct ModelEffectLightV43 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV43 {
    helpers::Array<ModelEffectLightV43> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV43 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV43 {
    helpers::Array<ModelClothBoneWeightV43> weights ;
};

struct ModelClothConstraintV43 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV43 {
    qword bone;
    byte type;
};

struct ModelClothDataV43 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV43> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV43> lod0Constraints ;
    helpers::Array<ModelClothConstraintV43> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV43> obstacles ;
};

struct ModelLightningSystemV43 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV43 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV43 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV43 {
    helpers::Array<ModelLightningSystemV43> systems ;
    helpers::Array<ModelLightningBoltV43> bolts ;
    helpers::Array<ModelLightningNodeV43> nodes ;
};

struct ModelBoneConstraintLinkV43 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV43 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV43> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV43 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelFileDataV43 {
    helpers::PtrStruct<ModelMaterialDataV43> materials ;
    helpers::PtrStruct<ModelMeshDataV43> meshes ;
    helpers::Ptr<ModelModelDataV43> model ;
    helpers::Array<ModelPropertyDataV43> properties ;
    helpers::Ptr<ModelCloudDataV43> cloudData ;
    helpers::Array<ModelObstacleDataV43> obstacles ;
    helpers::Ptr<ModelStreakDataV43> streakData ;
    helpers::Ptr<ModelLightDataV43> lightData ;
    helpers::Array<ModelClothDataV43> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV43> lightningData ;
    helpers::Array<ModelBoneConstraintV43> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV43> softBodyData ;
};

typedef ModelFileDataV43 Gw2StructMODL;

/* Version: 42, ReferencedFunction: 0x1 */
struct ModelTextureDataV42 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV42 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV42 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV42 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV42 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV42> textures ;
    helpers::Array<ModelConstantDataV42> constants ;
    helpers::Array<ModelMatConstLinkV42> matConstLinks ;
    helpers::Array<ModelUVTransLinkV42> uvTransLinks ;
};

struct ModelMeshLodDataV42 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV42 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV42 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV42> lods ;
    helpers::Array<ModelMeshMorphTargetV42> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV42 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV42 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV42 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV42 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV42> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV42 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV42 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV42 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV42> Skeleton ;
    ModelTransformDataV42 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV42> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV42> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV42 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV42 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV42 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV42 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV42 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV42> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV42> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV42> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV42 {
    helpers::Array<ModelParticleCloudV42> clouds ;
    helpers::Array<ModelParticleEmitterV42> emitters ;
};

struct ModelObstacleDataV42 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV42 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV42 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV42 {
    helpers::Array<ModelStreakV42> streaks ;
    helpers::Array<ModelStreakAnchorV42> anchors ;
};

struct ModelEffectLightV42 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV42 {
    helpers::Array<ModelEffectLightV42> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV42 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV42 {
    helpers::Array<ModelClothBoneWeightV42> weights ;
};

struct ModelClothConstraintV42 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV42 {
    qword bone;
    byte type;
};

struct ModelClothDataV42 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV42> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV42> lod0Constraints ;
    helpers::Array<ModelClothConstraintV42> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV42> obstacles ;
};

struct ModelLightningSystemV42 {
    qword bone;
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV42 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV42 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV42 {
    helpers::Array<ModelLightningSystemV42> systems ;
    helpers::Array<ModelLightningBoltV42> bolts ;
    helpers::Array<ModelLightningNodeV42> nodes ;
};

struct ModelBoneConstraintLinkV42 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV42 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV42> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV42 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelFileDataV42 {
    helpers::PtrStruct<ModelMaterialDataV42> materials ;
    helpers::PtrStruct<ModelMeshDataV42> meshes ;
    helpers::Ptr<ModelModelDataV42> model ;
    helpers::Array<ModelPropertyDataV42> properties ;
    helpers::Ptr<ModelCloudDataV42> cloudData ;
    helpers::Array<ModelObstacleDataV42> obstacles ;
    helpers::Ptr<ModelStreakDataV42> streakData ;
    helpers::Ptr<ModelLightDataV42> lightData ;
    helpers::Array<ModelClothDataV42> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV42> lightningData ;
    helpers::Array<ModelBoneConstraintV42> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV42> softBodyData ;
};

typedef ModelFileDataV42 Gw2StructMODL;

/* Version: 41, ReferencedFunction: 0x1 */
struct ModelTextureDataV41 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV41 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV41 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV41 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV41 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV41> textures ;
    helpers::Array<ModelConstantDataV41> constants ;
    helpers::Array<ModelMatConstLinkV41> matConstLinks ;
    helpers::Array<ModelUVTransLinkV41> uvTransLinks ;
};

struct ModelMeshLodDataV41 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV41 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV41 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV41> lods ;
    helpers::Array<ModelMeshMorphTargetV41> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV41 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV41 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV41 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV41 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV41> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV41 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV41 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV41 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV41> Skeleton ;
    ModelTransformDataV41 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV41> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV41> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV41 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV41 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV41 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV41 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV41 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV41> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV41> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV41> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV41 {
    helpers::Array<ModelParticleCloudV41> clouds ;
    helpers::Array<ModelParticleEmitterV41> emitters ;
};

struct ModelObstacleDataV41 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV41 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV41 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV41 {
    helpers::Array<ModelStreakV41> streaks ;
    helpers::Array<ModelStreakAnchorV41> anchors ;
};

struct ModelEffectLightV41 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV41 {
    helpers::Array<ModelEffectLightV41> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV41 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV41 {
    helpers::Array<ModelClothBoneWeightV41> weights ;
};

struct ModelClothConstraintV41 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV41 {
    qword bone;
    byte type;
};

struct ModelClothDataV41 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV41> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV41> lod0Constraints ;
    helpers::Array<ModelClothConstraintV41> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV41> obstacles ;
};

struct ModelLightningSystemV41 {
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV41 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV41 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV41 {
    helpers::Array<ModelLightningSystemV41> systems ;
    helpers::Array<ModelLightningBoltV41> bolts ;
    helpers::Array<ModelLightningNodeV41> nodes ;
};

struct ModelBoneConstraintLinkV41 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV41 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV41> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelSoftBodyDataV41 {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    helpers::Array<byte> vertBytes ;
    helpers::Array<word> indices ;
    helpers::Array<qword> bones ;
};

struct ModelFileDataV41 {
    helpers::PtrStruct<ModelMaterialDataV41> materials ;
    helpers::PtrStruct<ModelMeshDataV41> meshes ;
    helpers::Ptr<ModelModelDataV41> model ;
    helpers::Array<ModelPropertyDataV41> properties ;
    helpers::Ptr<ModelCloudDataV41> cloudData ;
    helpers::Array<ModelObstacleDataV41> obstacles ;
    helpers::Ptr<ModelStreakDataV41> streakData ;
    helpers::Ptr<ModelLightDataV41> lightData ;
    helpers::Array<ModelClothDataV41> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV41> lightningData ;
    helpers::Array<ModelBoneConstraintV41> boneConstraints ;
    helpers::Array<ModelSoftBodyDataV41> softBodyData ;
};

typedef ModelFileDataV41 Gw2StructMODL;

/* Version: 40, ReferencedFunction: 0x410CBED000000001 */
struct ModelTextureDataV40 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV40 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV40 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV40 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV40 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV40> textures ;
    helpers::Array<ModelConstantDataV40> constants ;
    helpers::Array<ModelMatConstLinkV40> matConstLinks ;
    helpers::Array<ModelUVTransLinkV40> uvTransLinks ;
};

struct ModelMeshLodDataV40 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV40 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV40 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV40> lods ;
    helpers::Array<ModelMeshMorphTargetV40> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV40 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV40 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV40 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV40 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV40> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV40 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV40 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV40 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV40> Skeleton ;
    ModelTransformDataV40 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV40> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV40> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV40 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV40 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword fvf;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV40 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV40 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV40 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    float offset;
    helpers::Ptr<ModelParticleCurveV40> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV40> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV40> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV40 {
    helpers::Array<ModelParticleCloudV40> clouds ;
    helpers::Array<ModelParticleEmitterV40> emitters ;
};

struct ModelObstacleDataV40 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV40 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV40 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV40 {
    helpers::Array<ModelStreakV40> streaks ;
    helpers::Array<ModelStreakAnchorV40> anchors ;
};

struct ModelEffectLightV40 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV40 {
    helpers::Array<ModelEffectLightV40> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV40 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV40 {
    helpers::Array<ModelClothBoneWeightV40> weights ;
};

struct ModelClothConstraintV40 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV40 {
    qword bone;
    byte type;
};

struct ModelClothDataV40 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV40> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV40> lod0Constraints ;
    helpers::Array<ModelClothConstraintV40> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV40> obstacles ;
};

struct ModelLightningSystemV40 {
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV40 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV40 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV40 {
    helpers::Array<ModelLightningSystemV40> systems ;
    helpers::Array<ModelLightningBoltV40> bolts ;
    helpers::Array<ModelLightningNodeV40> nodes ;
};

struct ModelBoneConstraintLinkV40 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV40 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV40> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelFileDataV40 {
    helpers::PtrStruct<ModelMaterialDataV40> materials ;
    helpers::PtrStruct<ModelMeshDataV40> meshes ;
    helpers::Ptr<ModelModelDataV40> model ;
    helpers::Array<ModelPropertyDataV40> properties ;
    helpers::Ptr<ModelCloudDataV40> cloudData ;
    helpers::Array<ModelObstacleDataV40> obstacles ;
    helpers::Ptr<ModelStreakDataV40> streakData ;
    helpers::Ptr<ModelLightDataV40> lightData ;
    helpers::Array<ModelClothDataV40> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV40> lightningData ;
    helpers::Array<ModelBoneConstraintV40> boneConstraints ;
};

typedef ModelFileDataV40 Gw2StructMODL;

/* Version: 39, ReferencedFunction: 0x410CBE4000000001 */
struct ModelTextureDataV39 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV39 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV39 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV39 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV39 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV39> textures ;
    helpers::Array<ModelConstantDataV39> constants ;
    helpers::Array<ModelMatConstLinkV39> matConstLinks ;
    helpers::Array<ModelUVTransLinkV39> uvTransLinks ;
};

struct ModelMeshLodDataV39 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV39 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV39 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV39> lods ;
    helpers::Array<ModelMeshMorphTargetV39> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV39 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV39 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV39 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV39 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV39> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV39 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV39 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV39 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV39> Skeleton ;
    ModelTransformDataV39 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV39> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV39> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV39 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV39 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV39 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV39 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV39 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV39> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV39> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV39> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV39 {
    helpers::Array<ModelParticleCloudV39> clouds ;
    helpers::Array<ModelParticleEmitterV39> emitters ;
};

struct ModelObstacleDataV39 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV39 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV39 {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV39 {
    helpers::Array<ModelStreakV39> streaks ;
    helpers::Array<ModelStreakAnchorV39> anchors ;
};

struct ModelEffectLightV39 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV39 {
    helpers::Array<ModelEffectLightV39> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV39 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV39 {
    helpers::Array<ModelClothBoneWeightV39> weights ;
};

struct ModelClothConstraintV39 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV39 {
    qword bone;
    byte type;
};

struct ModelClothDataV39 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV39> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV39> lod0Constraints ;
    helpers::Array<ModelClothConstraintV39> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV39> obstacles ;
};

struct ModelLightningSystemV39 {
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV39 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV39 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV39 {
    helpers::Array<ModelLightningSystemV39> systems ;
    helpers::Array<ModelLightningBoltV39> bolts ;
    helpers::Array<ModelLightningNodeV39> nodes ;
};

struct ModelBoneConstraintLinkV39 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV39 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV39> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelFileDataV39 {
    helpers::PtrStruct<ModelMaterialDataV39> materials ;
    helpers::PtrStruct<ModelMeshDataV39> meshes ;
    helpers::Ptr<ModelModelDataV39> model ;
    helpers::Array<ModelPropertyDataV39> properties ;
    helpers::Ptr<ModelCloudDataV39> cloudData ;
    helpers::Array<ModelObstacleDataV39> obstacles ;
    helpers::Ptr<ModelStreakDataV39> streakData ;
    helpers::Ptr<ModelLightDataV39> lightData ;
    helpers::Array<ModelClothDataV39> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV39> lightningData ;
    helpers::Array<ModelBoneConstraintV39> boneConstraints ;
};

typedef ModelFileDataV39 Gw2StructMODL;

/* Version: 38, ReferencedFunction: 0x410CBC4000000001 */
struct ModelTextureDataV38 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV38 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV38 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV38 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV38 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV38> textures ;
    helpers::Array<ModelConstantDataV38> constants ;
    helpers::Array<ModelMatConstLinkV38> matConstLinks ;
    helpers::Array<ModelUVTransLinkV38> uvTransLinks ;
};

struct ModelMeshLodDataV38 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV38 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV38 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV38> lods ;
    helpers::Array<ModelMeshMorphTargetV38> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV38 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV38 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV38 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV38 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV38> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV38 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV38 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV38 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV38> Skeleton ;
    ModelTransformDataV38 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV38> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV38> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV38 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV38 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV38 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV38 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV38 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV38> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV38> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV38> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV38 {
    helpers::Array<ModelParticleCloudV38> clouds ;
    helpers::Array<ModelParticleEmitterV38> emitters ;
};

struct ModelObstacleDataV38 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV38 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV38 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV38 {
    helpers::Array<ModelStreakV38> streaks ;
    helpers::Array<ModelStreakAnchorV38> anchors ;
};

struct ModelEffectLightV38 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV38 {
    helpers::Array<ModelEffectLightV38> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV38 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV38 {
    helpers::Array<ModelClothBoneWeightV38> weights ;
};

struct ModelClothConstraintV38 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV38 {
    qword bone;
    byte type;
};

struct ModelClothDataV38 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV38> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV38> lod0Constraints ;
    helpers::Array<ModelClothConstraintV38> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV38> obstacles ;
};

struct ModelLightningSystemV38 {
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV38 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV38 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV38 {
    helpers::Array<ModelLightningSystemV38> systems ;
    helpers::Array<ModelLightningBoltV38> bolts ;
    helpers::Array<ModelLightningNodeV38> nodes ;
};

struct ModelBoneConstraintLinkV38 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV38 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV38> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelFileDataV38 {
    helpers::PtrStruct<ModelMaterialDataV38> materials ;
    helpers::PtrStruct<ModelMeshDataV38> meshes ;
    helpers::Ptr<ModelModelDataV38> model ;
    helpers::Array<ModelPropertyDataV38> properties ;
    helpers::Ptr<ModelCloudDataV38> cloudData ;
    helpers::Array<ModelObstacleDataV38> obstacles ;
    helpers::Ptr<ModelStreakDataV38> streakData ;
    helpers::Ptr<ModelLightDataV38> lightData ;
    helpers::Array<ModelClothDataV38> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV38> lightningData ;
    helpers::Array<ModelBoneConstraintV38> boneConstraints ;
};

typedef ModelFileDataV38 Gw2StructMODL;

/* Version: 37, ReferencedFunction: 0x1 */
struct ModelTextureDataV37 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV37 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV37 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV37 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV37 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV37> textures ;
    helpers::Array<ModelConstantDataV37> constants ;
    helpers::Array<ModelMatConstLinkV37> matConstLinks ;
    helpers::Array<ModelUVTransLinkV37> uvTransLinks ;
};

struct ModelMeshLodDataV37 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV37 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV37 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV37> lods ;
    helpers::Array<ModelMeshMorphTargetV37> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV37 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV37 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV37 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV37 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV37> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV37 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV37 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV37 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV37> Skeleton ;
    ModelTransformDataV37 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV37> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV37> trackMasks ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV37 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV37 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV37 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV37 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV37 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV37> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV37> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV37> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV37 {
    helpers::Array<ModelParticleCloudV37> clouds ;
    helpers::Array<ModelParticleEmitterV37> emitters ;
};

struct ModelObstacleDataV37 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV37 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV37 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV37 {
    helpers::Array<ModelStreakV37> streaks ;
    helpers::Array<ModelStreakAnchorV37> anchors ;
};

struct ModelEffectLightV37 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV37 {
    helpers::Array<ModelEffectLightV37> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV37 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV37 {
    helpers::Array<ModelClothBoneWeightV37> weights ;
};

struct ModelClothConstraintV37 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV37 {
    qword bone;
    byte type;
};

struct ModelClothDataV37 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV37> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV37> lod0Constraints ;
    helpers::Array<ModelClothConstraintV37> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV37> obstacles ;
};

struct ModelLightningSystemV37 {
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV37 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV37 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV37 {
    helpers::Array<ModelLightningSystemV37> systems ;
    helpers::Array<ModelLightningBoltV37> bolts ;
    helpers::Array<ModelLightningNodeV37> nodes ;
};

struct ModelBoneConstraintLinkV37 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV37 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV37> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelFileDataV37 {
    helpers::PtrStruct<ModelMaterialDataV37> materials ;
    helpers::PtrStruct<ModelMeshDataV37> meshes ;
    helpers::Ptr<ModelModelDataV37> model ;
    helpers::Array<ModelPropertyDataV37> properties ;
    helpers::Ptr<ModelCloudDataV37> cloudData ;
    helpers::Array<ModelObstacleDataV37> obstacles ;
    helpers::Ptr<ModelStreakDataV37> streakData ;
    helpers::Ptr<ModelLightDataV37> lightData ;
    helpers::Array<ModelClothDataV37> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV37> lightningData ;
    helpers::Array<ModelBoneConstraintV37> boneConstraints ;
};

typedef ModelFileDataV37 Gw2StructMODL;

/* Version: 36, ReferencedFunction: 0x410CBAF000000001 */
struct ModelTextureDataV36 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV36 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV36 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV36 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV36 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV36> textures ;
    helpers::Array<ModelConstantDataV36> constants ;
    helpers::Array<ModelMatConstLinkV36> matConstLinks ;
    helpers::Array<ModelUVTransLinkV36> uvTransLinks ;
};

struct ModelMeshLodDataV36 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV36 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV36 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV36> lods ;
    helpers::Array<ModelMeshMorphTargetV36> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV36 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV36 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV36 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV36 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV36> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV36 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV36 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV36 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV36> Skeleton ;
    ModelTransformDataV36 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV36> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV36> trackMasks ;
    helpers::Array<byte> skeletonHash ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV36 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV36 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV36 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV36 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV36 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV36> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV36> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV36> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV36 {
    helpers::Array<ModelParticleCloudV36> clouds ;
    helpers::Array<ModelParticleEmitterV36> emitters ;
};

struct ModelObstacleDataV36 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV36 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV36 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV36 {
    helpers::Array<ModelStreakV36> streaks ;
    helpers::Array<ModelStreakAnchorV36> anchors ;
};

struct ModelEffectLightV36 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV36 {
    helpers::Array<ModelEffectLightV36> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV36 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV36 {
    helpers::Array<ModelClothBoneWeightV36> weights ;
};

struct ModelClothConstraintV36 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV36 {
    qword bone;
    byte type;
};

struct ModelClothDataV36 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV36> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV36> lod0Constraints ;
    helpers::Array<ModelClothConstraintV36> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV36> obstacles ;
};

struct ModelLightningSystemV36 {
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV36 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV36 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV36 {
    helpers::Array<ModelLightningSystemV36> systems ;
    helpers::Array<ModelLightningBoltV36> bolts ;
    helpers::Array<ModelLightningNodeV36> nodes ;
};

struct ModelBoneConstraintLinkV36 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV36 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV36> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelFileDataV36 {
    helpers::PtrStruct<ModelMaterialDataV36> materials ;
    helpers::PtrStruct<ModelMeshDataV36> meshes ;
    helpers::Ptr<ModelModelDataV36> model ;
    helpers::Array<ModelPropertyDataV36> properties ;
    helpers::Ptr<ModelCloudDataV36> cloudData ;
    helpers::Array<ModelObstacleDataV36> obstacles ;
    helpers::Ptr<ModelStreakDataV36> streakData ;
    helpers::Ptr<ModelLightDataV36> lightData ;
    helpers::Array<ModelClothDataV36> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV36> lightningData ;
    helpers::Array<ModelBoneConstraintV36> boneConstraints ;
};

typedef ModelFileDataV36 Gw2StructMODL;

/* Version: 35, ReferencedFunction: 0x410CB9F000000001 */
struct ModelTextureDataV35 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV35 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV35 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV35 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV35 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV35> textures ;
    helpers::Array<ModelConstantDataV35> constants ;
    helpers::Array<ModelMatConstLinkV35> matConstLinks ;
    helpers::Array<ModelUVTransLinkV35> uvTransLinks ;
};

struct ModelMeshLodDataV35 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV35 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV35 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV35> lods ;
    helpers::Array<ModelMeshMorphTargetV35> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV35 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV35 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV35 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV35 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV35> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV35 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV35 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV35 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV35> Skeleton ;
    ModelTransformDataV35 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV35> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV35> trackMasks ;
    helpers::Array<byte> skeletonHash ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV35 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV35 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV35 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV35 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV35 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV35> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV35> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV35> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV35 {
    helpers::Array<ModelParticleCloudV35> clouds ;
    helpers::Array<ModelParticleEmitterV35> emitters ;
};

struct ModelObstacleDataV35 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV35 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV35 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV35 {
    helpers::Array<ModelStreakV35> streaks ;
    helpers::Array<ModelStreakAnchorV35> anchors ;
};

struct ModelEffectLightV35 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV35 {
    helpers::Array<ModelEffectLightV35> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV35 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV35 {
    helpers::Array<ModelClothBoneWeightV35> weights ;
};

struct ModelClothConstraintV35 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV35 {
    qword bone;
    byte type;
};

struct ModelClothDataV35 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV35> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV35> lod0Constraints ;
    helpers::Array<ModelClothConstraintV35> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV35> obstacles ;
};

struct ModelLightningSystemV35 {
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV35 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV35 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    float updatePos;
};

struct ModelLightningDataV35 {
    helpers::Array<ModelLightningSystemV35> systems ;
    helpers::Array<ModelLightningBoltV35> bolts ;
    helpers::Array<ModelLightningNodeV35> nodes ;
};

struct ModelBoneConstraintV35 {
    qword token;
    word flags;
    float twistOffset;
    byte animBlend;
    byte drag;
    float ellipseRatio;
    byte gravity;
    float collisionRadius;
    byte wind;
    float2 angle;
    byte angleStrength;
    byte angleType;
    float2 distanceInner;
    byte distanceInnerStrength;
    byte distanceInnerType;
    float2 distanceOuter;
    byte distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    byte twistStrength;
    byte twistType;
};

struct ModelFileDataV35 {
    helpers::PtrStruct<ModelMaterialDataV35> materials ;
    helpers::PtrStruct<ModelMeshDataV35> meshes ;
    helpers::Ptr<ModelModelDataV35> model ;
    helpers::Array<ModelPropertyDataV35> properties ;
    helpers::Ptr<ModelCloudDataV35> cloudData ;
    helpers::Array<ModelObstacleDataV35> obstacles ;
    helpers::Ptr<ModelStreakDataV35> streakData ;
    helpers::Ptr<ModelLightDataV35> lightData ;
    helpers::Array<ModelClothDataV35> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV35> lightningData ;
    helpers::Array<ModelBoneConstraintV35> boneConstraints ;
};

typedef ModelFileDataV35 Gw2StructMODL;

/* Version: 34, ReferencedFunction: 0x410CB8A000000001 */
struct ModelTextureDataV34 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV34 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV34 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV34 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV34 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV34> textures ;
    helpers::Array<ModelConstantDataV34> constants ;
    helpers::Array<ModelMatConstLinkV34> matConstLinks ;
    helpers::Array<ModelUVTransLinkV34> uvTransLinks ;
};

struct ModelMeshLodDataV34 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV34 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV34 {
    qword visBone;
    helpers::Array<ModelMeshLodDataV34> lods ;
    helpers::Array<ModelMeshMorphTargetV34> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV34 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV34 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV34 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV34 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV34> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV34 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV34 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV34 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV34> Skeleton ;
    ModelTransformDataV34 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV34> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV34> trackMasks ;
    helpers::Array<byte> skeletonHash ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV34 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV34 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV34 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV34 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV34 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV34> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV34> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV34> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    byte windInfluence;
};

struct ModelCloudDataV34 {
    helpers::Array<ModelParticleCloudV34> clouds ;
    helpers::Array<ModelParticleEmitterV34> emitters ;
};

struct ModelObstacleDataV34 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelStreakV34 {
    float3 acceleration;
    float3 velocity;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
};

struct ModelStreakAnchorV34 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV34 {
    helpers::Array<ModelStreakV34> streaks ;
    helpers::Array<ModelStreakAnchorV34> anchors ;
};

struct ModelEffectLightV34 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
};

struct ModelLightDataV34 {
    helpers::Array<ModelEffectLightV34> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV34 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV34 {
    helpers::Array<ModelClothBoneWeightV34> weights ;
};

struct ModelClothConstraintV34 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV34 {
    qword bone;
    byte type;
};

struct ModelClothDataV34 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV34> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV34> lod0Constraints ;
    helpers::Array<ModelClothConstraintV34> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV34> obstacles ;
};

struct ModelLightningSystemV34 {
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV34 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin;
    dword colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV34 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
};

struct ModelLightningDataV34 {
    helpers::Array<ModelLightningSystemV34> systems ;
    helpers::Array<ModelLightningBoltV34> bolts ;
    helpers::Array<ModelLightningNodeV34> nodes ;
};

struct ModelBoneConstraintV34 {
    qword token;
    word flags;
    float twistOffset;
    byte animBlend;
    byte drag;
    float ellipseRatio;
    byte gravity;
    float collisionRadius;
    byte wind;
    float2 angle;
    byte angleStrength;
    byte angleType;
    float2 distanceInner;
    byte distanceInnerStrength;
    byte distanceInnerType;
    float2 distanceOuter;
    byte distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    byte twistStrength;
    byte twistType;
};

struct ModelFileDataV34 {
    helpers::PtrStruct<ModelMaterialDataV34> materials ;
    helpers::PtrStruct<ModelMeshDataV34> meshes ;
    helpers::Ptr<ModelModelDataV34> model ;
    helpers::Array<ModelPropertyDataV34> properties ;
    helpers::Ptr<ModelCloudDataV34> cloudData ;
    helpers::Array<ModelObstacleDataV34> obstacles ;
    helpers::Ptr<ModelStreakDataV34> streakData ;
    helpers::Ptr<ModelLightDataV34> lightData ;
    helpers::Array<ModelClothDataV34> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV34> lightningData ;
    helpers::Array<ModelBoneConstraintV34> boneConstraints ;
};

typedef ModelFileDataV34 Gw2StructMODL;

/* Version: 33, ReferencedFunction: 0x1 */
struct ModelTextureDataV33 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV33 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV33 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV33 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV33 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV33> textures ;
    helpers::Array<ModelConstantDataV33> constants ;
    helpers::Array<ModelMatConstLinkV33> matConstLinks ;
    helpers::Array<ModelUVTransLinkV33> uvTransLinks ;
};

struct ModelMeshLodDataV33 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV33 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV33 {
    helpers::Array<ModelMeshLodDataV33> lods ;
    helpers::Array<ModelMeshMorphTargetV33> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV33 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV33 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV33 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV33 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV33> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV33 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV33 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV33 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV33> Skeleton ;
    ModelTransformDataV33 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV33> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV33> trackMasks ;
    helpers::Array<byte> skeletonHash ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV33 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV33 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV33 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV33 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV33 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV33> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV33> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV33> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelCloudDataV33 {
    helpers::Array<ModelParticleCloudV33> clouds ;
    helpers::Array<ModelParticleEmitterV33> emitters ;
};

struct ModelObstacleDataV33 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelStreakV33 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV33 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV33 {
    helpers::Array<ModelStreakV33> streaks ;
    helpers::Array<ModelStreakAnchorV33> anchors ;
};

struct ModelEffectLightV33 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV33 {
    helpers::Array<ModelEffectLightV33> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV33 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV33 {
    helpers::Array<ModelClothBoneWeightV33> weights ;
};

struct ModelClothConstraintV33 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV33 {
    qword bone;
    byte type;
};

struct ModelClothDataV33 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV33> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV33> lod0Constraints ;
    helpers::Array<ModelClothConstraintV33> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV33> obstacles ;
};

struct ModelLightningSystemV33 {
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV33 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin;
    dword colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV33 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    dword visBoneIndex;
};

struct ModelLightningDataV33 {
    helpers::Array<ModelLightningSystemV33> systems ;
    helpers::Array<ModelLightningBoltV33> bolts ;
    helpers::Array<ModelLightningNodeV33> nodes ;
};

struct ModelBoneConstraintV33 {
    qword token;
    word flags;
    float twistOffset;
    byte animBlend;
    byte drag;
    float ellipseRatio;
    byte gravity;
    float collisionRadius;
    byte wind;
    float2 angle;
    byte angleStrength;
    byte angleType;
    float2 distanceInner;
    byte distanceInnerStrength;
    byte distanceInnerType;
    float2 distanceOuter;
    byte distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    byte twistStrength;
    byte twistType;
};

struct ModelFileDataV33 {
    helpers::PtrStruct<ModelMaterialDataV33> materials ;
    helpers::PtrStruct<ModelMeshDataV33> meshes ;
    helpers::Ptr<ModelModelDataV33> model ;
    helpers::Array<ModelPropertyDataV33> properties ;
    helpers::Ptr<ModelCloudDataV33> cloudData ;
    helpers::Array<ModelObstacleDataV33> obstacles ;
    helpers::Ptr<ModelStreakDataV33> streakData ;
    helpers::Ptr<ModelLightDataV33> lightData ;
    helpers::Array<ModelClothDataV33> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV33> lightningData ;
    helpers::Array<ModelBoneConstraintV33> boneConstraints ;
};

typedef ModelFileDataV33 Gw2StructMODL;

/* Version: 32, ReferencedFunction: 0x1 */
struct ModelTextureDataV32 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV32 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV32 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV32 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV32 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV32> textures ;
    helpers::Array<ModelConstantDataV32> constants ;
    helpers::Array<ModelMatConstLinkV32> matConstLinks ;
    helpers::Array<ModelUVTransLinkV32> uvTransLinks ;
};

struct ModelMeshLodDataV32 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV32 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV32 {
    helpers::Array<ModelMeshLodDataV32> lods ;
    helpers::Array<ModelMeshMorphTargetV32> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV32 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV32 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV32 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV32 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV32> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV32 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV32 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV32 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV32> Skeleton ;
    ModelTransformDataV32 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV32> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV32> trackMasks ;
    helpers::Array<byte> skeletonHash ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV32 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV32 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV32 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV32 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV32 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV32> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV32> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV32> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelCloudDataV32 {
    helpers::Array<ModelParticleCloudV32> clouds ;
    helpers::Array<ModelParticleEmitterV32> emitters ;
};

struct ModelObstacleDataV32 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelStreakV32 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV32 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV32 {
    helpers::Array<ModelStreakV32> streaks ;
    helpers::Array<ModelStreakAnchorV32> anchors ;
};

struct ModelEffectLightV32 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV32 {
    helpers::Array<ModelEffectLightV32> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV32 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV32 {
    helpers::Array<ModelClothBoneWeightV32> weights ;
};

struct ModelClothConstraintV32 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV32 {
    qword bone;
    byte type;
};

struct ModelClothDataV32 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV32> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV32> lod0Constraints ;
    helpers::Array<ModelClothConstraintV32> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV32> obstacles ;
};

struct ModelLightningSystemV32 {
    helpers::Array<word> boltIndices ;
    dword flags;
    dword materialIndex;
};

struct ModelLightningBoltV32 {
    qword bone;
    helpers::Array<word> nodeIndices ;
    dword colorBegin;
    dword colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    float fps;
    float probability;
    float2 lifetime;
    word numSegments;
    float period;
    float texOffset;
    float texScale;
    float texSpeed;
    float thickness;
    byte thicknessPreset;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
};

struct ModelLightningNodeV32 {
    qword bone;
    helpers::Array<word> childrenIndices ;
    dword flags;
    float probability;
    float radius;
    byte shape;
    dword visBoneIndex;
};

struct ModelLightningDataV32 {
    helpers::Array<ModelLightningSystemV32> systems ;
    helpers::Array<ModelLightningBoltV32> bolts ;
    helpers::Array<ModelLightningNodeV32> nodes ;
};

struct ModelFileDataV32 {
    helpers::PtrStruct<ModelMaterialDataV32> materials ;
    helpers::PtrStruct<ModelMeshDataV32> meshes ;
    helpers::Ptr<ModelModelDataV32> model ;
    helpers::Array<ModelPropertyDataV32> properties ;
    helpers::Ptr<ModelCloudDataV32> cloudData ;
    helpers::Array<ModelObstacleDataV32> obstacles ;
    helpers::Ptr<ModelStreakDataV32> streakData ;
    helpers::Ptr<ModelLightDataV32> lightData ;
    helpers::Array<ModelClothDataV32> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
    helpers::Ptr<ModelLightningDataV32> lightningData ;
};

typedef ModelFileDataV32 Gw2StructMODL;

/* Version: 31, ReferencedFunction: 0x1 */
struct ModelTextureDataV31 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV31 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV31 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV31 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV31 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV31> textures ;
    helpers::Array<ModelConstantDataV31> constants ;
    helpers::Array<ModelMatConstLinkV31> matConstLinks ;
    helpers::Array<ModelUVTransLinkV31> uvTransLinks ;
};

struct ModelMeshLodDataV31 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV31 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV31 {
    helpers::Array<ModelMeshLodDataV31> lods ;
    helpers::Array<ModelMeshMorphTargetV31> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV31 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV31 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV31 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV31 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV31> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV31 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV31 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV31 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV31> Skeleton ;
    ModelTransformDataV31 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV31> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV31> trackMasks ;
    helpers::Array<byte> skeletonHash ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV31 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV31 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV31 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV31 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV31 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV31> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV31> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV31> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelCloudDataV31 {
    helpers::Array<ModelParticleCloudV31> clouds ;
    helpers::Array<ModelParticleEmitterV31> emitters ;
};

struct ModelObstacleDataV31 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelStreakV31 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV31 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
};

struct ModelStreakDataV31 {
    helpers::Array<ModelStreakV31> streaks ;
    helpers::Array<ModelStreakAnchorV31> anchors ;
};

struct ModelEffectLightV31 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV31 {
    helpers::Array<ModelEffectLightV31> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV31 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV31 {
    helpers::Array<ModelClothBoneWeightV31> weights ;
};

struct ModelClothConstraintV31 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV31 {
    qword bone;
    byte type;
};

struct ModelClothDataV31 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV31> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV31> lod0Constraints ;
    helpers::Array<ModelClothConstraintV31> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV31> obstacles ;
};

struct ModelFileDataV31 {
    helpers::PtrStruct<ModelMaterialDataV31> materials ;
    helpers::PtrStruct<ModelMeshDataV31> meshes ;
    helpers::Ptr<ModelModelDataV31> model ;
    helpers::Array<ModelPropertyDataV31> properties ;
    helpers::Ptr<ModelCloudDataV31> cloudData ;
    helpers::Array<ModelObstacleDataV31> obstacles ;
    helpers::Ptr<ModelStreakDataV31> streakData ;
    helpers::Ptr<ModelLightDataV31> lightData ;
    helpers::Array<ModelClothDataV31> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV31 Gw2StructMODL;

/* Version: 30, ReferencedFunction: 0x1 */
struct ModelTextureDataV30 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV30 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV30 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV30 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV30 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV30> textures ;
    helpers::Array<ModelConstantDataV30> constants ;
    helpers::Array<ModelMatConstLinkV30> matConstLinks ;
    helpers::Array<ModelUVTransLinkV30> uvTransLinks ;
};

struct ModelMeshLodDataV30 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV30 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV30 {
    helpers::Array<ModelMeshLodDataV30> lods ;
    helpers::Array<ModelMeshMorphTargetV30> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV30 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV30 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV30 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV30 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV30> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV30 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV30 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV30 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV30> Skeleton ;
    ModelTransformDataV30 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV30> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV30> trackMasks ;
    helpers::Array<byte> skeletonHash ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV30 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV30 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV30 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV30 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV30 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV30> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV30> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV30> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelCloudDataV30 {
    helpers::Array<ModelParticleCloudV30> clouds ;
    helpers::Array<ModelParticleEmitterV30> emitters ;
};

struct ModelObstacleDataV30 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelStreakV30 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV30 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV30 {
    helpers::Array<ModelStreakV30> streaks ;
    helpers::Array<ModelStreakAnchorV30> anchors ;
};

struct ModelEffectLightV30 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV30 {
    helpers::Array<ModelEffectLightV30> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV30 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV30 {
    helpers::Array<ModelClothBoneWeightV30> weights ;
};

struct ModelClothConstraintV30 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV30 {
    qword bone;
    byte type;
};

struct ModelClothDataV30 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV30> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV30> lod0Constraints ;
    helpers::Array<ModelClothConstraintV30> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV30> obstacles ;
};

struct ModelFileDataV30 {
    helpers::PtrStruct<ModelMaterialDataV30> materials ;
    helpers::PtrStruct<ModelMeshDataV30> meshes ;
    helpers::Ptr<ModelModelDataV30> model ;
    helpers::Array<ModelPropertyDataV30> properties ;
    helpers::Ptr<ModelCloudDataV30> cloudData ;
    helpers::Array<ModelObstacleDataV30> obstacles ;
    helpers::Ptr<ModelStreakDataV30> streakData ;
    helpers::Ptr<ModelLightDataV30> lightData ;
    helpers::Array<ModelClothDataV30> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV30 Gw2StructMODL;

/* Version: 29, ReferencedFunction: 0x410CB7C000000001 */
struct ModelTextureDataV29 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV29 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMatConstLinkV29 {
    qword linkToken;
    dword constantToken;
};

struct ModelUVTransLinkV29 {
    qword linkToken;
    dword uvAnimId;
    byte type;
};

struct ModelMaterialDataV29 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV29> textures ;
    helpers::Array<ModelConstantDataV29> constants ;
    helpers::Array<ModelMatConstLinkV29> matConstLinks ;
    helpers::Array<ModelUVTransLinkV29> uvTransLinks ;
};

struct ModelMeshLodDataV29 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV29 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV29 {
    helpers::Array<ModelMeshLodDataV29> lods ;
    helpers::Array<ModelMeshMorphTargetV29> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV29 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV29 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV29 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV29 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV29> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV29 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV29 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV29 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV29> Skeleton ;
    ModelTransformDataV29 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV29> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV29> trackMasks ;
    helpers::Array<byte> skeletonHash ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV29 {
    qword id;
    dword type;
    dword mergeIndex;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV29 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV29 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV29 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV29 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV29> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV29> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV29> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelCloudDataV29 {
    helpers::Array<ModelParticleCloudV29> clouds ;
    helpers::Array<ModelParticleEmitterV29> emitters ;
};

struct ModelObstacleDataV29 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelStreakV29 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV29 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV29 {
    helpers::Array<ModelStreakV29> streaks ;
    helpers::Array<ModelStreakAnchorV29> anchors ;
};

struct ModelEffectLightV29 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV29 {
    helpers::Array<ModelEffectLightV29> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV29 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV29 {
    helpers::Array<ModelClothBoneWeightV29> weights ;
};

struct ModelClothConstraintV29 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothObstacleV29 {
    qword bone;
    byte type;
};

struct ModelClothDataV29 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV29> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV29> lod0Constraints ;
    helpers::Array<ModelClothConstraintV29> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
    helpers::Array<ModelClothObstacleV29> obstacles ;
};

struct ModelFileDataV29 {
    helpers::PtrStruct<ModelMaterialDataV29> materials ;
    helpers::PtrStruct<ModelMeshDataV29> meshes ;
    helpers::Ptr<ModelModelDataV29> model ;
    helpers::Array<ModelPropertyDataV29> properties ;
    helpers::Ptr<ModelCloudDataV29> cloudData ;
    helpers::Array<ModelObstacleDataV29> obstacles ;
    helpers::Ptr<ModelStreakDataV29> streakData ;
    helpers::Ptr<ModelLightDataV29> lightData ;
    helpers::Array<ModelClothDataV29> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV29 Gw2StructMODL;

/* Version: 28, ReferencedFunction: 0x1 */
struct ModelTextureDataV28 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV28 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV28 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV28> textures ;
    helpers::Array<ModelConstantDataV28> constants ;
};

struct ModelMeshLodDataV28 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV28 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV28 {
    helpers::Array<ModelMeshLodDataV28> lods ;
    helpers::Array<ModelMeshMorphTargetV28> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
};

struct ModelTransformDataV28 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV28 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV28 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV28 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV28> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV28 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV28 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV28 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV28> Skeleton ;
    ModelTransformDataV28 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV28> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV28> trackMasks ;
    helpers::Array<byte> skeletonHash ;
    float3 center;
    float radius;
};

struct ModelPropertyDataV28 {
    qword id;
    dword type;
    dword mergeIndex;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV28 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV28 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV28 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV28 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV28> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV28> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV28> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelCloudDataV28 {
    helpers::Array<ModelParticleCloudV28> clouds ;
    helpers::Array<ModelParticleEmitterV28> emitters ;
};

struct ModelObstacleDataV28 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelStreakV28 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV28 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV28 {
    helpers::Array<ModelStreakV28> streaks ;
    helpers::Array<ModelStreakAnchorV28> anchors ;
};

struct ModelEffectLightV28 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV28 {
    helpers::Array<ModelEffectLightV28> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV28 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV28 {
    helpers::Array<ModelClothBoneWeightV28> weights ;
};

struct ModelClothConstraintV28 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothDataV28 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV28> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV28> lod0Constraints ;
    helpers::Array<ModelClothConstraintV28> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
};

struct ModelFileDataV28 {
    helpers::PtrStruct<ModelMaterialDataV28> materials ;
    helpers::PtrStruct<ModelMeshDataV28> meshes ;
    helpers::Ptr<ModelModelDataV28> model ;
    helpers::Array<ModelPropertyDataV28> properties ;
    helpers::Ptr<ModelCloudDataV28> cloudData ;
    helpers::Array<ModelObstacleDataV28> obstacles ;
    helpers::Ptr<ModelStreakDataV28> streakData ;
    helpers::Ptr<ModelLightDataV28> lightData ;
    helpers::Array<ModelClothDataV28> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV28 Gw2StructMODL;

/* Version: 27, ReferencedFunction: 0x1 */
struct ModelTextureDataV27 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV27 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV27 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV27> textures ;
    helpers::Array<ModelConstantDataV27> constants ;
};

struct ModelMeshLodDataV27 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV27 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV27 {
    helpers::Array<ModelMeshLodDataV27> lods ;
    helpers::Array<ModelMeshMorphTargetV27> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
};

struct ModelTransformDataV27 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV27 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV27 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV27 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV27> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV27 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV27 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV27 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV27> Skeleton ;
    ModelTransformDataV27 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV27> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV27> trackMasks ;
    helpers::Array<byte> skeletonHash ;
};

struct ModelPropertyDataV27 {
    qword id;
    dword type;
    dword mergeIndex;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV27 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV27 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV27 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV27 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV27> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV27> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV27> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelCloudDataV27 {
    helpers::Array<ModelParticleCloudV27> clouds ;
    helpers::Array<ModelParticleEmitterV27> emitters ;
};

struct ModelObstacleDataV27 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelStreakV27 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV27 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV27 {
    helpers::Array<ModelStreakV27> streaks ;
    helpers::Array<ModelStreakAnchorV27> anchors ;
};

struct ModelEffectLightV27 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV27 {
    helpers::Array<ModelEffectLightV27> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV27 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV27 {
    helpers::Array<ModelClothBoneWeightV27> weights ;
};

struct ModelClothConstraintV27 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothDataV27 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV27> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV27> lod0Constraints ;
    helpers::Array<ModelClothConstraintV27> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
};

struct ModelFileDataV27 {
    helpers::PtrStruct<ModelMaterialDataV27> materials ;
    helpers::PtrStruct<ModelMeshDataV27> meshes ;
    helpers::Ptr<ModelModelDataV27> model ;
    helpers::Array<ModelPropertyDataV27> properties ;
    helpers::Ptr<ModelCloudDataV27> cloudData ;
    helpers::Array<ModelObstacleDataV27> obstacles ;
    helpers::Ptr<ModelStreakDataV27> streakData ;
    helpers::Ptr<ModelLightDataV27> lightData ;
    helpers::Array<ModelClothDataV27> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV27 Gw2StructMODL;

/* Version: 26, ReferencedFunction: 0x410CB40000000001 */
struct ModelTextureDataV26 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV26 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV26 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV26> textures ;
    helpers::Array<ModelConstantDataV26> constants ;
};

struct ModelMeshLodDataV26 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV26 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV26 {
    helpers::Array<ModelMeshLodDataV26> lods ;
    helpers::Array<ModelMeshMorphTargetV26> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV26 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV26 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV26 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV26 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV26> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV26 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV26 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV26 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV26> Skeleton ;
    ModelTransformDataV26 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV26> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV26> trackMasks ;
    helpers::Array<byte> skeletonHash ;
};

struct ModelPropertyDataV26 {
    qword id;
    dword type;
    dword mergeIndex;
    qword val;
    helpers::FileName strVal;
};

struct ModelParticleCloudV26 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV26 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV26 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV26 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV26> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV26> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV26> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelCloudDataV26 {
    helpers::Array<ModelParticleCloudV26> clouds ;
    helpers::Array<ModelParticleEmitterV26> emitters ;
};

struct ModelObstacleDataV26 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelStreakV26 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV26 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV26 {
    helpers::Array<ModelStreakV26> streaks ;
    helpers::Array<ModelStreakAnchorV26> anchors ;
};

struct ModelEffectLightV26 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV26 {
    helpers::Array<ModelEffectLightV26> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV26 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV26 {
    helpers::Array<ModelClothBoneWeightV26> weights ;
};

struct ModelClothConstraintV26 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothDataV26 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV26> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV26> lod0Constraints ;
    helpers::Array<ModelClothConstraintV26> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
};

struct ModelFileDataV26 {
    helpers::PtrStruct<ModelMaterialDataV26> materials ;
    helpers::PtrStruct<ModelMeshDataV26> meshes ;
    helpers::Ptr<ModelModelDataV26> model ;
    helpers::Array<ModelPropertyDataV26> properties ;
    helpers::Ptr<ModelCloudDataV26> cloudData ;
    helpers::Array<ModelObstacleDataV26> obstacles ;
    helpers::Ptr<ModelStreakDataV26> streakData ;
    helpers::Ptr<ModelLightDataV26> lightData ;
    helpers::Array<ModelClothDataV26> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV26 Gw2StructMODL;

/* Version: 25, ReferencedFunction: 0x410CB21000000001 */
struct ModelTextureDataV25 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV25 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV25 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV25> textures ;
    helpers::Array<ModelConstantDataV25> constants ;
};

struct ModelMeshLodDataV25 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV25 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV25 {
    helpers::Array<ModelMeshLodDataV25> lods ;
    helpers::Array<ModelMeshMorphTargetV25> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV25 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV25 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV25 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV25 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV25> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV25 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV25 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV25 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV25> Skeleton ;
    ModelTransformDataV25 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV25> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV25> trackMasks ;
    helpers::Array<byte> skeletonHash ;
};

struct ModelFloatPropertyDataV25 {
    qword token;
    float value;
};

struct ModelPropertyDataV25 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV25> floatValues ;
};

struct ModelParticleCloudV25 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV25 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV25 {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV25 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV25> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV25> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV25> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelCloudDataV25 {
    helpers::Array<ModelParticleCloudV25> clouds ;
    helpers::Array<ModelParticleEmitterV25> emitters ;
};

struct ModelObstacleDataV25 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelStreakV25 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV25 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV25 {
    helpers::Array<ModelStreakV25> streaks ;
    helpers::Array<ModelStreakAnchorV25> anchors ;
};

struct ModelEffectLightV25 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV25 {
    helpers::Array<ModelEffectLightV25> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV25 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV25 {
    helpers::Array<ModelClothBoneWeightV25> weights ;
};

struct ModelClothConstraintV25 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothDataV25 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV25> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV25> lod0Constraints ;
    helpers::Array<ModelClothConstraintV25> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
};

struct ModelFileDataV25 {
    helpers::PtrStruct<ModelMaterialDataV25> materials ;
    helpers::PtrStruct<ModelMeshDataV25> meshes ;
    helpers::Ptr<ModelModelDataV25> model ;
    helpers::Ptr<ModelPropertyDataV25> properties ;
    helpers::Ptr<ModelCloudDataV25> cloudData ;
    helpers::Array<ModelObstacleDataV25> obstacles ;
    helpers::Ptr<ModelStreakDataV25> streakData ;
    helpers::Ptr<ModelLightDataV25> lightData ;
    helpers::Array<ModelClothDataV25> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV25 Gw2StructMODL;

/* Version: 24, ReferencedFunction: 0x410CB1B000000001 */
struct ModelTextureDataV24 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV24 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV24 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV24> textures ;
    helpers::Array<ModelConstantDataV24> constants ;
};

struct ModelMeshLodDataV24 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV24 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV24 {
    helpers::Array<ModelMeshLodDataV24> lods ;
    helpers::Array<ModelMeshMorphTargetV24> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV24 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV24 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV24 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV24 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV24> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV24 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV24 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV24 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV24> Skeleton ;
    ModelTransformDataV24 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV24> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV24> trackMasks ;
    helpers::Array<byte> skeletonHash ;
};

struct ModelFloatPropertyDataV24 {
    qword token;
    float value;
};

struct ModelPropertyDataV24 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV24> floatValues ;
};

struct ModelParticleCloudV24 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV24 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV24 {
    byte columns;
    byte count;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV24 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    dword emitterFlags;
    helpers::Ptr<ModelParticleCurveV24> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV24> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV24> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelCloudDataV24 {
    helpers::Array<ModelParticleCloudV24> clouds ;
    helpers::Array<ModelParticleEmitterV24> emitters ;
};

struct ModelObstacleDataV24 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelStreakV24 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float noise;
    float spawnDist;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV24 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV24 {
    helpers::Array<ModelStreakV24> streaks ;
    helpers::Array<ModelStreakAnchorV24> anchors ;
};

struct ModelEffectLightV24 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV24 {
    helpers::Array<ModelEffectLightV24> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV24 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV24 {
    helpers::Array<ModelClothBoneWeightV24> weights ;
};

struct ModelClothConstraintV24 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothDataV24 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV24> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV24> lod0Constraints ;
    helpers::Array<ModelClothConstraintV24> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
};

struct ModelFileDataV24 {
    helpers::PtrStruct<ModelMaterialDataV24> materials ;
    helpers::PtrStruct<ModelMeshDataV24> meshes ;
    helpers::Ptr<ModelModelDataV24> model ;
    helpers::Ptr<ModelPropertyDataV24> properties ;
    helpers::Ptr<ModelCloudDataV24> cloudData ;
    helpers::Array<ModelObstacleDataV24> obstacles ;
    helpers::Ptr<ModelStreakDataV24> streakData ;
    helpers::Ptr<ModelLightDataV24> lightData ;
    helpers::Array<ModelClothDataV24> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV24 Gw2StructMODL;

/* Version: 23, ReferencedFunction: 0x410CB13000000001 */
struct ModelTextureDataV23 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV23 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV23 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV23> textures ;
    helpers::Array<ModelConstantDataV23> constants ;
};

struct ModelMeshLodDataV23 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV23 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV23 {
    helpers::Array<ModelMeshLodDataV23> lods ;
    helpers::Array<ModelMeshMorphTargetV23> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV23 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV23 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV23 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV23 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV23> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV23 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV23 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV23 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV23> Skeleton ;
    ModelTransformDataV23 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV23> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV23> trackMasks ;
    helpers::Array<byte> skeletonHash ;
};

struct ModelFloatPropertyDataV23 {
    qword token;
    float value;
};

struct ModelPropertyDataV23 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV23> floatValues ;
};

struct ModelParticleCloudV23 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV23 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV23 {
    byte columns;
    byte count;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV23 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV23> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV23> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV23> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelCloudDataV23 {
    helpers::Array<ModelParticleCloudV23> clouds ;
    helpers::Array<ModelParticleEmitterV23> emitters ;
};

struct ModelObstacleDataV23 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelStreakV23 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float noise;
    float spawnDist;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV23 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV23 {
    helpers::Array<ModelStreakV23> streaks ;
    helpers::Array<ModelStreakAnchorV23> anchors ;
};

struct ModelEffectLightV23 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV23 {
    helpers::Array<ModelEffectLightV23> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV23 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV23 {
    helpers::Array<ModelClothBoneWeightV23> weights ;
};

struct ModelClothConstraintV23 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothDataV23 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV23> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV23> lod0Constraints ;
    helpers::Array<ModelClothConstraintV23> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
};

struct ModelFileDataV23 {
    helpers::PtrStruct<ModelMaterialDataV23> materials ;
    helpers::PtrStruct<ModelMeshDataV23> meshes ;
    helpers::Ptr<ModelModelDataV23> model ;
    helpers::Ptr<ModelPropertyDataV23> properties ;
    helpers::Ptr<ModelCloudDataV23> cloudData ;
    helpers::Array<ModelObstacleDataV23> obstacles ;
    helpers::Ptr<ModelStreakDataV23> streakData ;
    helpers::Ptr<ModelLightDataV23> lightData ;
    helpers::Array<ModelClothDataV23> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV23 Gw2StructMODL;

/* Version: 22, ReferencedFunction: 0x1 */
struct ModelTextureDataV22 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV22 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV22 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV22> textures ;
    helpers::Array<ModelConstantDataV22> constants ;
};

struct ModelMeshLodDataV22 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV22 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV22 {
    helpers::Array<ModelMeshLodDataV22> lods ;
    helpers::Array<ModelMeshMorphTargetV22> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV22 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV22 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV22 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV22 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV22> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV22 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV22 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV22 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV22> Skeleton ;
    ModelTransformDataV22 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV22> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV22> trackMasks ;
    helpers::Array<byte> skeletonHash ;
};

struct ModelFloatPropertyDataV22 {
    qword token;
    float value;
};

struct ModelPropertyDataV22 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV22> floatValues ;
};

struct ModelParticleCloudV22 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV22 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV22 {
    byte columns;
    byte count;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV22 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV22> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV22> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV22> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelParticleObstacleV22 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV22 {
    helpers::Array<ModelParticleCloudV22> clouds ;
    helpers::Array<ModelParticleEmitterV22> emitters ;
    helpers::Array<ModelParticleObstacleV22> obstacles ;
};

struct ModelStreakV22 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float noise;
    float spawnDist;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV22 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV22 {
    helpers::Array<ModelStreakV22> streaks ;
    helpers::Array<ModelStreakAnchorV22> anchors ;
};

struct ModelEffectLightV22 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV22 {
    helpers::Array<ModelEffectLightV22> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV22 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV22 {
    helpers::Array<ModelClothBoneWeightV22> weights ;
};

struct ModelClothConstraintV22 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothDataV22 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV22> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV22> lod0Constraints ;
    helpers::Array<ModelClothConstraintV22> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
};

struct ModelFileDataV22 {
    helpers::PtrStruct<ModelMaterialDataV22> materials ;
    helpers::PtrStruct<ModelMeshDataV22> meshes ;
    helpers::Ptr<ModelModelDataV22> model ;
    helpers::Ptr<ModelPropertyDataV22> properties ;
    helpers::Ptr<ModelCloudDataV22> cloudData ;
    helpers::Ptr<ModelStreakDataV22> streakData ;
    helpers::Ptr<ModelLightDataV22> lightData ;
    helpers::Array<ModelClothDataV22> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV22 Gw2StructMODL;

/* Version: 21, ReferencedFunction: 0x410CB06000000001 */
struct ModelTextureDataV21 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV21 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV21 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV21> textures ;
    helpers::Array<ModelConstantDataV21> constants ;
};

struct ModelMeshLodDataV21 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV21 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV21 {
    helpers::Array<ModelMeshLodDataV21> lods ;
    helpers::Array<ModelMeshMorphTargetV21> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV21 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV21 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV21 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV21 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV21> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV21 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV21 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV21 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV21> Skeleton ;
    ModelTransformDataV21 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV21> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV21> trackMasks ;
    helpers::Array<byte> skeletonHash ;
};

struct ModelFloatPropertyDataV21 {
    qword token;
    float value;
};

struct ModelPropertyDataV21 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV21> floatValues ;
};

struct ModelParticleCloudV21 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    float3 velocity;
};

struct ModelParticleCurveV21 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV21 {
    byte columns;
    byte count;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV21 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    byte alignmentType;
    float3 alignmentDir;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV21> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV21> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV21> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
    byte windInfluence;
};

struct ModelParticleObstacleV21 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV21 {
    helpers::Array<ModelParticleCloudV21> clouds ;
    helpers::Array<ModelParticleEmitterV21> emitters ;
    helpers::Array<ModelParticleObstacleV21> obstacles ;
};

struct ModelStreakV21 {
    float3 acceleration;
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float noise;
    float spawnDist;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
    float wind;
};

struct ModelStreakAnchorV21 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV21 {
    helpers::Array<ModelStreakV21> streaks ;
    helpers::Array<ModelStreakAnchorV21> anchors ;
};

struct ModelEffectLightV21 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV21 {
    helpers::Array<ModelEffectLightV21> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV21 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV21 {
    helpers::Array<ModelClothBoneWeightV21> weights ;
};

struct ModelClothConstraintV21 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothDataV21 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV21> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV21> lod0Constraints ;
    helpers::Array<ModelClothConstraintV21> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
};

struct ModelFileDataV21 {
    helpers::PtrStruct<ModelMaterialDataV21> materials ;
    helpers::PtrStruct<ModelMeshDataV21> meshes ;
    helpers::Ptr<ModelModelDataV21> model ;
    helpers::Ptr<ModelPropertyDataV21> properties ;
    helpers::Ptr<ModelCloudDataV21> cloudData ;
    helpers::Ptr<ModelStreakDataV21> streakData ;
    helpers::Ptr<ModelLightDataV21> lightData ;
    helpers::Array<ModelClothDataV21> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV21 Gw2StructMODL;

/* Version: 20, ReferencedFunction: 0x410CAE4000000001 */
struct ModelTextureDataV20 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV20 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV20 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV20> textures ;
    helpers::Array<ModelConstantDataV20> constants ;
};

struct ModelMeshLodDataV20 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV20 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV20 {
    helpers::Array<ModelMeshLodDataV20> lods ;
    helpers::Array<ModelMeshMorphTargetV20> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV20 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV20 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV20 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV20 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV20> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV20 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV20 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV20 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV20> Skeleton ;
    ModelTransformDataV20 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV20> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<ModelTrackMaskV20> trackMasks ;
    helpers::Array<byte> skeletonHash ;
};

struct ModelFloatPropertyDataV20 {
    qword token;
    float value;
};

struct ModelPropertyDataV20 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV20> floatValues ;
};

struct ModelParticleCloudV20 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
};

struct ModelParticleCurveV20 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV20 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV20 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    float colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV20> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV20> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV20> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
};

struct ModelParticleObstacleV20 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV20 {
    helpers::Array<ModelParticleCloudV20> clouds ;
    helpers::Array<ModelParticleEmitterV20> emitters ;
    helpers::Array<ModelParticleObstacleV20> obstacles ;
};

struct ModelStreakV20 {
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float spawnFreq;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
};

struct ModelStreakAnchorV20 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV20 {
    helpers::Array<ModelStreakV20> streaks ;
    helpers::Array<ModelStreakAnchorV20> anchors ;
};

struct ModelEffectLightV20 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV20 {
    helpers::Array<ModelEffectLightV20> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV20 {
    qword token;
    byte weight;
};

struct ModelClothMeshGroupV20 {
    helpers::Array<ModelClothBoneWeightV20> weights ;
};

struct ModelClothConstraintV20 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothDataV20 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV20> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV20> lod0Constraints ;
    helpers::Array<ModelClothConstraintV20> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
};

struct ModelFileDataV20 {
    helpers::PtrStruct<ModelMaterialDataV20> materials ;
    helpers::PtrStruct<ModelMeshDataV20> meshes ;
    helpers::Ptr<ModelModelDataV20> model ;
    helpers::Ptr<ModelPropertyDataV20> properties ;
    helpers::Ptr<ModelCloudDataV20> cloudData ;
    helpers::Ptr<ModelStreakDataV20> streakData ;
    helpers::Ptr<ModelLightDataV20> lightData ;
    helpers::Array<ModelClothDataV20> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV20 Gw2StructMODL;

/* Version: 19, ReferencedFunction: 0x1 */
struct ModelTextureDataV19 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV19 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV19 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV19> textures ;
    helpers::Array<ModelConstantDataV19> constants ;
};

struct ModelMeshLodDataV19 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV19 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV19 {
    helpers::Array<ModelMeshLodDataV19> lods ;
    helpers::Array<ModelMeshMorphTargetV19> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV19 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV19 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV19 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV19 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV19> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV19 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV19 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV19 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV19> Skeleton ;
    ModelTransformDataV19 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV19> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<ModelTrackMaskV19> trackMasks ;
    helpers::Array<byte> skeletonHash ;
};

struct ModelFloatPropertyDataV19 {
    qword token;
    float value;
};

struct ModelPropertyDataV19 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV19> floatValues ;
};

struct ModelParticleCloudV19 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
};

struct ModelParticleCurveV19 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV19 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV19 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    float colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV19> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV19> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV19> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
};

struct ModelParticleObstacleV19 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV19 {
    helpers::Array<ModelParticleCloudV19> clouds ;
    helpers::Array<ModelParticleEmitterV19> emitters ;
    helpers::Array<ModelParticleObstacleV19> obstacles ;
};

struct ModelStreakV19 {
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float spawnFreq;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
};

struct ModelStreakAnchorV19 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV19 {
    helpers::Array<ModelStreakV19> streaks ;
    helpers::Array<ModelStreakAnchorV19> anchors ;
};

struct ModelEffectLightV19 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV19 {
    helpers::Array<ModelEffectLightV19> effectLights ;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelClothBoneWeightV19 {
    word index;
    byte weight;
};

struct ModelClothMeshGroupV19 {
    helpers::Array<ModelClothBoneWeightV19> weights ;
};

struct ModelClothConstraintV19 {
    word vertIndexA;
    word vertIndexB;
    float distance;
};

struct ModelClothDataV19 {
    dword materialIndex;
    byte flags;
    float gravity;
    float weight;
    float wind;
    byte rigidness;
    PackVertexType mesh;
    helpers::Array<word> indices ;
    word lockCount;
    helpers::Array<ModelClothMeshGroupV19> groups ;
    helpers::Array<byte> softLocks ;
    helpers::Array<ModelClothConstraintV19> lod0Constraints ;
    helpers::Array<ModelClothConstraintV19> lod1Constraints ;
    word lod1VertexCount;
    helpers::Array<word> lod1Indices ;
    helpers::Array<float3> barycentricCoords ;
    helpers::Array<word> barycentricIndices ;
};

struct ModelFileDataV19 {
    helpers::PtrStruct<ModelMaterialDataV19> materials ;
    helpers::PtrStruct<ModelMeshDataV19> meshes ;
    helpers::Ptr<ModelModelDataV19> model ;
    helpers::Ptr<ModelPropertyDataV19> properties ;
    helpers::Ptr<ModelCloudDataV19> cloudData ;
    helpers::Ptr<ModelStreakDataV19> streakData ;
    helpers::Ptr<ModelLightDataV19> lightData ;
    helpers::Array<ModelClothDataV19> clothData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV19 Gw2StructMODL;

/* Version: 18, ReferencedFunction: 0x1 */
struct ModelTextureDataV18 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV18 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV18 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV18> textures ;
    helpers::Array<ModelConstantDataV18> constants ;
};

struct ModelMeshLodDataV18 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV18 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
    helpers::String meshName;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV18 {
    helpers::Array<ModelMeshLodDataV18> lods ;
    helpers::Array<ModelMeshMorphTargetV18> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV18 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV18 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV18 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV18 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV18> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV18 {
    helpers::Ptr<byte> Mesh ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV18 {
    PackGrannyTrackMaskType trackMask;
    qword token;
};

struct ModelModelDataV18 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV18> Skeleton ;
    ModelTransformDataV18 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV18> MeshBindings ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<ModelTrackMaskV18> trackMasks ;
    helpers::Array<byte> skeletonHash ;
};

struct ModelFloatPropertyDataV18 {
    qword token;
    float value;
};

struct ModelPropertyDataV18 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV18> floatValues ;
};

struct ModelParticleCloudV18 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
};

struct ModelParticleCurveV18 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV18 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV18 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    float colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV18> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV18> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV18> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
};

struct ModelParticleObstacleV18 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV18 {
    helpers::Array<ModelParticleCloudV18> clouds ;
    helpers::Array<ModelParticleEmitterV18> emitters ;
    helpers::Array<ModelParticleObstacleV18> obstacles ;
};

struct ModelStreakV18 {
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float spawnFreq;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
};

struct ModelStreakAnchorV18 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV18 {
    helpers::Array<ModelStreakV18> streaks ;
    helpers::Array<ModelStreakAnchorV18> anchors ;
};

struct ModelEffectLightV18 {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
    dword visBoneIndex;
};

struct ModelLightDataV18 {
    helpers::Array<ModelEffectLightV18> effectLights ;
};

struct ModelFileDataV18 {
    helpers::PtrStruct<ModelMaterialDataV18> materials ;
    helpers::PtrStruct<ModelMeshDataV18> meshes ;
    helpers::Ptr<ModelModelDataV18> model ;
    helpers::Ptr<ModelPropertyDataV18> properties ;
    helpers::Ptr<ModelCloudDataV18> cloudData ;
    helpers::Ptr<ModelStreakDataV18> streakData ;
    helpers::Ptr<ModelLightDataV18> lightData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV18 Gw2StructMODL;

/* Version: 17, ReferencedFunction: 0x1 */
struct ModelTextureDataV17 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV17 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV17 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV17> textures ;
    helpers::Array<ModelConstantDataV17> constants ;
};

struct ModelMeshLodDataV17 {
    helpers::Array<word> indices ;
};

struct ModelMeshMorphTargetV17 {
    helpers::Array<word> positionIndices ;
    helpers::Array<float3> positions ;
    helpers::Array<word> normalIndices ;
    helpers::Array<float3> normals ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV17 {
    helpers::Array<ModelMeshLodDataV17> lods ;
    helpers::Array<ModelMeshMorphTargetV17> morphTargets ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV17 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV17 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV17 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV17 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV17> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV17 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV17 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV17> Skeleton ;
    ModelTransformDataV17 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV17> MeshBindings ;
    helpers::Array<dword> boneFlags ;
};

struct ModelFloatPropertyDataV17 {
    qword token;
    float value;
};

struct ModelPropertyDataV17 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV17> floatValues ;
};

struct ModelParticleCloudV17 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
};

struct ModelParticleCurveV17 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV17 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV17 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    float colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV17> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV17> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV17> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
};

struct ModelParticleObstacleV17 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV17 {
    helpers::Array<ModelParticleCloudV17> clouds ;
    helpers::Array<ModelParticleEmitterV17> emitters ;
    helpers::Array<ModelParticleObstacleV17> obstacles ;
};

struct ModelStreakV17 {
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float spawnFreq;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
};

struct ModelStreakAnchorV17 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV17 {
    helpers::Array<ModelStreakV17> streaks ;
    helpers::Array<ModelStreakAnchorV17> anchors ;
};

struct ModelEffectLightV17 {
    qword bone;
    byte color[4];
    float2 ranges;
};

struct ModelLightDataV17 {
    helpers::Array<ModelEffectLightV17> effectLights ;
};

struct ModelFileDataV17 {
    helpers::PtrStruct<ModelMaterialDataV17> materials ;
    helpers::PtrStruct<ModelMeshDataV17> meshes ;
    helpers::Ptr<ModelModelDataV17> model ;
    helpers::Ptr<ModelPropertyDataV17> properties ;
    helpers::Ptr<ModelCloudDataV17> cloudData ;
    helpers::Ptr<ModelStreakDataV17> streakData ;
    helpers::Ptr<ModelLightDataV17> lightData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
    helpers::FileName soundScript;
};

typedef ModelFileDataV17 Gw2StructMODL;

/* Version: 16, ReferencedFunction: 0x1 */
struct ModelTextureDataV16 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV16 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV16 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV16> textures ;
    helpers::Array<ModelConstantDataV16> constants ;
};

struct ModelMeshLodDataV16 {
    helpers::Array<word> indices ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV16 {
    helpers::Array<ModelMeshLodDataV16> lods ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV16 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV16 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV16 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV16 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV16> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV16 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV16 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV16> Skeleton ;
    ModelTransformDataV16 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV16> MeshBindings ;
    helpers::Array<dword> boneFlags ;
};

struct ModelFloatPropertyDataV16 {
    qword token;
    float value;
};

struct ModelPropertyDataV16 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV16> floatValues ;
};

struct ModelParticleCloudV16 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
};

struct ModelParticleCurveV16 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV16 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV16 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    float colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV16> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV16> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV16> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
};

struct ModelParticleObstacleV16 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV16 {
    helpers::Array<ModelParticleCloudV16> clouds ;
    helpers::Array<ModelParticleEmitterV16> emitters ;
    helpers::Array<ModelParticleObstacleV16> obstacles ;
};

struct ModelStreakV16 {
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float spawnFreq;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
};

struct ModelStreakAnchorV16 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV16 {
    helpers::Array<ModelStreakV16> streaks ;
    helpers::Array<ModelStreakAnchorV16> anchors ;
};

struct ModelEffectLightV16 {
    qword bone;
    byte color[4];
    float2 ranges;
};

struct ModelLightDataV16 {
    helpers::Array<ModelEffectLightV16> effectLights ;
};

struct ModelFileDataV16 {
    helpers::PtrStruct<ModelMaterialDataV16> materials ;
    helpers::PtrStruct<ModelMeshDataV16> meshes ;
    helpers::Ptr<ModelModelDataV16> model ;
    helpers::Ptr<ModelPropertyDataV16> properties ;
    helpers::Ptr<ModelCloudDataV16> cloudData ;
    helpers::Ptr<ModelStreakDataV16> streakData ;
    helpers::Ptr<ModelLightDataV16> lightData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
    float lodOverride[2];
};

typedef ModelFileDataV16 Gw2StructMODL;

/* Version: 15, ReferencedFunction: 0x1 */
struct ModelTextureDataV15 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV15 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV15 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV15> textures ;
    helpers::Array<ModelConstantDataV15> constants ;
};

struct ModelMeshLodDataV15 {
    helpers::Array<word> indices ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV15 {
    helpers::Array<ModelMeshLodDataV15> lods ;
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV15 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV15 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV15 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV15 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV15> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV15 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV15 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV15> Skeleton ;
    ModelTransformDataV15 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV15> MeshBindings ;
    helpers::Array<dword> boneFlags ;
};

struct ModelFloatPropertyDataV15 {
    qword token;
    float value;
};

struct ModelPropertyDataV15 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV15> floatValues ;
};

struct ModelParticleCloudV15 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
};

struct ModelParticleCurveV15 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV15 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV15 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    float colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV15> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV15> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV15> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
};

struct ModelParticleObstacleV15 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV15 {
    helpers::Array<ModelParticleCloudV15> clouds ;
    helpers::Array<ModelParticleEmitterV15> emitters ;
    helpers::Array<ModelParticleObstacleV15> obstacles ;
};

struct ModelStreakV15 {
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float spawnFreq;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
};

struct ModelStreakAnchorV15 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV15 {
    helpers::Array<ModelStreakV15> streaks ;
    helpers::Array<ModelStreakAnchorV15> anchors ;
};

struct ModelEffectLightV15 {
    qword bone;
    byte color[4];
    float2 ranges;
};

struct ModelLightDataV15 {
    helpers::Array<ModelEffectLightV15> effectLights ;
};

struct ModelFileDataV15 {
    helpers::PtrStruct<ModelMaterialDataV15> materials ;
    helpers::PtrStruct<ModelMeshDataV15> meshes ;
    helpers::Ptr<ModelModelDataV15> model ;
    helpers::Ptr<ModelPropertyDataV15> properties ;
    helpers::Ptr<ModelCloudDataV15> cloudData ;
    helpers::Ptr<ModelStreakDataV15> streakData ;
    helpers::Ptr<ModelLightDataV15> lightData ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
};

typedef ModelFileDataV15 Gw2StructMODL;

/* Version: 14, ReferencedFunction: 0x1 */
struct ModelTextureDataV14 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV14 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV14 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV14> textures ;
    helpers::Array<ModelConstantDataV14> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV14 {
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
    helpers::Array<qword> actionOffsetNames ;
    helpers::Array<float3> actionOffsets ;
};

struct ModelTransformDataV14 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV14 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV14 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV14 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV14> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV14 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV14 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV14> Skeleton ;
    ModelTransformDataV14 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV14> MeshBindings ;
    helpers::Array<dword> boneFlags ;
};

struct ModelFloatPropertyDataV14 {
    qword token;
    float value;
};

struct ModelPropertyDataV14 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV14> floatValues ;
};

struct ModelParticleCloudV14 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
};

struct ModelParticleCurveV14 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV14 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV14 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    float colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV14> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV14> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV14> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
};

struct ModelParticleObstacleV14 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV14 {
    helpers::Array<ModelParticleCloudV14> clouds ;
    helpers::Array<ModelParticleEmitterV14> emitters ;
    helpers::Array<ModelParticleObstacleV14> obstacles ;
};

struct ModelStreakV14 {
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float spawnFreq;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
};

struct ModelStreakAnchorV14 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV14 {
    helpers::Array<ModelStreakV14> streaks ;
    helpers::Array<ModelStreakAnchorV14> anchors ;
};

struct ModelFileDataV14 {
    helpers::PtrStruct<ModelMaterialDataV14> materials ;
    helpers::PtrStruct<ModelMeshDataV14> meshes ;
    helpers::Ptr<ModelModelDataV14> model ;
    helpers::Ptr<ModelPropertyDataV14> properties ;
    helpers::Ptr<ModelCloudDataV14> cloudData ;
    helpers::Ptr<ModelStreakDataV14> streakData ;
};

typedef ModelFileDataV14 Gw2StructMODL;

/* Version: 13, ReferencedFunction: 0x1 */
struct ModelTextureDataV13 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV13 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV13 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV13> textures ;
    helpers::Array<ModelConstantDataV13> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV13 {
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV13 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV13 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV13 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV13 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV13> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV13 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV13 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV13> Skeleton ;
    ModelTransformDataV13 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV13> MeshBindings ;
    helpers::Array<dword> boneFlags ;
};

struct ModelFloatPropertyDataV13 {
    qword token;
    float value;
};

struct ModelPropertyDataV13 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV13> floatValues ;
};

struct ModelParticleCloudV13 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
};

struct ModelParticleCurveV13 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV13 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV13 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    float colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV13> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV13> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV13> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
};

struct ModelParticleObstacleV13 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV13 {
    helpers::Array<ModelParticleCloudV13> clouds ;
    helpers::Array<ModelParticleEmitterV13> emitters ;
    helpers::Array<ModelParticleObstacleV13> obstacles ;
};

struct ModelStreakV13 {
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float spawnFreq;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
};

struct ModelStreakAnchorV13 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV13 {
    helpers::Array<ModelStreakV13> streaks ;
    helpers::Array<ModelStreakAnchorV13> anchors ;
};

struct ModelFileDataV13 {
    helpers::PtrStruct<ModelMaterialDataV13> materials ;
    helpers::PtrStruct<ModelMeshDataV13> meshes ;
    helpers::Ptr<ModelModelDataV13> model ;
    helpers::Ptr<ModelPropertyDataV13> properties ;
    helpers::Ptr<ModelCloudDataV13> cloudData ;
    helpers::Ptr<ModelStreakDataV13> streakData ;
};

typedef ModelFileDataV13 Gw2StructMODL;

/* Version: 12, ReferencedFunction: 0x1 */
struct ModelTextureDataV12 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV12 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV12 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV12> textures ;
    helpers::Array<ModelConstantDataV12> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV12 {
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
    helpers::Array<dword> seamVertIndices ;
};

struct ModelTransformDataV12 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV12 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV12 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV12 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV12> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV12 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV12 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV12> Skeleton ;
    ModelTransformDataV12 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV12> MeshBindings ;
    helpers::Array<dword> boneFlags ;
};

struct ModelFloatPropertyDataV12 {
    qword token;
    float value;
};

struct ModelPropertyDataV12 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV12> floatValues ;
};

struct ModelParticleCloudV12 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
};

struct ModelParticleCurveV12 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV12 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV12 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    float colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV12> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV12> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV12> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
};

struct ModelParticleObstacleV12 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV12 {
    helpers::Array<ModelParticleCloudV12> clouds ;
    helpers::Array<ModelParticleEmitterV12> emitters ;
    helpers::Array<ModelParticleObstacleV12> obstacles ;
};

struct ModelStreakV12 {
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float spawnFreq;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
};

struct ModelStreakAnchorV12 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV12 {
    helpers::Array<ModelStreakV12> streaks ;
    helpers::Array<ModelStreakAnchorV12> anchors ;
};

struct ModelFileDataV12 {
    helpers::PtrStruct<ModelMaterialDataV12> materials ;
    helpers::PtrStruct<ModelMeshDataV12> meshes ;
    helpers::Ptr<ModelModelDataV12> model ;
    helpers::Ptr<ModelPropertyDataV12> properties ;
    helpers::Ptr<ModelCloudDataV12> cloudData ;
    helpers::Ptr<ModelStreakDataV12> streakData ;
};

typedef ModelFileDataV12 Gw2StructMODL;

/* Version: 11, ReferencedFunction: 0x410CABD000000001 */
struct ModelTextureDataV11 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV11 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV11 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV11> textures ;
    helpers::Array<ModelConstantDataV11> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV11 {
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
};

struct ModelTransformDataV11 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV11 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV11 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV11 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV11> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV11 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV11 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV11> Skeleton ;
    ModelTransformDataV11 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV11> MeshBindings ;
    helpers::Array<dword> boneFlags ;
};

struct ModelFloatPropertyDataV11 {
    qword token;
    float value;
};

struct ModelPropertyDataV11 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV11> floatValues ;
};

struct ModelParticleCloudV11 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
};

struct ModelParticleCurveV11 {
    byte curveType;
    helpers::Array<float2> keys ;
};

struct ModelParticleFlipbookV11 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleEmitterV11 {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    float colorFalloff;
    float drag;
    helpers::Ptr<ModelParticleCurveV11> opacityCurve ;
    dword opacityCurvePreset;
    dword flags;
    helpers::Ptr<ModelParticleFlipbookV11> flipbook ;
    float2 lifetime;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    helpers::Ptr<ModelParticleCurveV11> scaleCurve ;
    dword scaleCurvePreset;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    float4 texCoordRect;
    dword visBoneIndex;
};

struct ModelParticleObstacleV11 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV11 {
    helpers::Array<ModelParticleCloudV11> clouds ;
    helpers::Array<ModelParticleEmitterV11> emitters ;
    helpers::Array<ModelParticleObstacleV11> obstacles ;
};

struct ModelStreakV11 {
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float spawnFreq;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
};

struct ModelStreakAnchorV11 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV11 {
    helpers::Array<ModelStreakV11> streaks ;
    helpers::Array<ModelStreakAnchorV11> anchors ;
};

struct ModelFileDataV11 {
    helpers::PtrStruct<ModelMaterialDataV11> materials ;
    helpers::PtrStruct<ModelMeshDataV11> meshes ;
    helpers::Ptr<ModelModelDataV11> model ;
    helpers::Ptr<ModelPropertyDataV11> properties ;
    helpers::Ptr<ModelCloudDataV11> cloudData ;
    helpers::Ptr<ModelStreakDataV11> streakData ;
};

typedef ModelFileDataV11 Gw2StructMODL;

/* Version: 10, ReferencedFunction: 0x1 */
struct ModelTextureDataV10 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV10 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV10 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV10> textures ;
    helpers::Array<ModelConstantDataV10> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV10 {
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
};

struct ModelTransformDataV10 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV10 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV10 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV10 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV10> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV10 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV10 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV10> Skeleton ;
    ModelTransformDataV10 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV10> MeshBindings ;
    helpers::Array<dword> boneFlags ;
};

struct ModelFloatPropertyDataV10 {
    qword token;
    float value;
};

struct ModelPropertyDataV10 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV10> floatValues ;
};

struct ModelParticleFlipbookV10 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleCloudV10 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    helpers::Array<ModelParticleFlipbookV10> flipbook ;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    byte opacityCurveType;
    helpers::Array<float2> opacityKeys ;
    byte scaleCurveType;
    helpers::Array<float2> scaleKeys ;
};

struct ModelParticleEmitterV10 {
    float2 acceleration[4];
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    dword flags;
    float2 lifetime;
    float2 rotationChange;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    dword visBoneIndex;
};

struct ModelParticleObstacleV10 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV10 {
    helpers::Array<ModelParticleCloudV10> clouds ;
    helpers::Array<ModelParticleEmitterV10> emitters ;
    helpers::Array<ModelParticleObstacleV10> obstacles ;
};

struct ModelStreakV10 {
    helpers::Array<dword> anchorIndices ;
    qword bone;
    dword flags;
    dword materialIndex;
    float spawnFreq;
    float stretchDist;
    float texScale;
    dword visBoneIndex;
};

struct ModelStreakAnchorV10 {
    qword bone;
    dword color;
    float falloff;
    float lifetime;
};

struct ModelStreakDataV10 {
    helpers::Array<ModelStreakV10> streaks ;
    helpers::Array<ModelStreakAnchorV10> anchors ;
};

struct ModelFileDataV10 {
    helpers::PtrStruct<ModelMaterialDataV10> materials ;
    helpers::PtrStruct<ModelMeshDataV10> meshes ;
    helpers::Ptr<ModelModelDataV10> model ;
    helpers::Ptr<ModelPropertyDataV10> properties ;
    helpers::Ptr<ModelCloudDataV10> cloudData ;
    helpers::Ptr<ModelStreakDataV10> streakData ;
};

typedef ModelFileDataV10 Gw2StructMODL;

/* Version: 9, ReferencedFunction: 0x1 */
struct ModelTextureDataV9 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV9 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV9 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    byte texCoordCount;
    helpers::Array<ModelTextureDataV9> textures ;
    helpers::Array<ModelConstantDataV9> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV9 {
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
};

struct ModelTransformDataV9 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV9 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV9 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV9 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV9> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV9 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV9 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV9> Skeleton ;
    ModelTransformDataV9 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV9> MeshBindings ;
    helpers::Array<dword> boneFlags ;
};

struct ModelFloatPropertyDataV9 {
    qword token;
    float value;
};

struct ModelPropertyDataV9 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV9> floatValues ;
};

struct ModelParticleFlipbookV9 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleCloudV9 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    helpers::Array<ModelParticleFlipbookV9> flipbook ;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    byte opacityCurveType;
    helpers::Array<float2> opacityKeys ;
    byte scaleCurveType;
    helpers::Array<float2> scaleKeys ;
};

struct ModelParticleEmitterV9 {
    float2 acceleration[4];
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    dword flags;
    float2 lifetime;
    float2 rotationChange;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    dword visBoneIndex;
};

struct ModelParticleObstacleV9 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV9 {
    helpers::Array<ModelParticleCloudV9> clouds ;
    helpers::Array<ModelParticleEmitterV9> emitters ;
    helpers::Array<ModelParticleObstacleV9> obstacles ;
};

struct ModelFileDataV9 {
    helpers::PtrStruct<ModelMaterialDataV9> materials ;
    helpers::PtrStruct<ModelMeshDataV9> meshes ;
    helpers::Ptr<ModelModelDataV9> model ;
    helpers::Ptr<ModelPropertyDataV9> properties ;
    helpers::Ptr<ModelCloudDataV9> cloudData ;
};

typedef ModelFileDataV9 Gw2StructMODL;

/* Version: 8, ReferencedFunction: 0x410CE78000000001 */
struct ModelTextureDataV8 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
    byte uvAnimId;
    byte uvPSInputIndex;
};

struct ModelConstantDataV8 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV8 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV8> textures ;
    helpers::Array<ModelConstantDataV8> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV8 {
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
};

struct ModelTransformDataV8 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV8 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV8 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV8 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV8> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV8 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV8 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV8> Skeleton ;
    ModelTransformDataV8 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV8> MeshBindings ;
    helpers::Array<dword> boneFlags ;
};

struct ModelFloatPropertyDataV8 {
    qword token;
    float value;
};

struct ModelPropertyDataV8 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV8> floatValues ;
};

struct ModelParticleFlipbookV8 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleCloudV8 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    helpers::Array<ModelParticleFlipbookV8> flipbook ;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    byte opacityCurveType;
    helpers::Array<float2> opacityKeys ;
    byte scaleCurveType;
    helpers::Array<float2> scaleKeys ;
};

struct ModelParticleEmitterV8 {
    float2 acceleration[4];
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    dword flags;
    float2 lifetime;
    float2 rotationChange;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    dword visBoneIndex;
};

struct ModelParticleObstacleV8 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV8 {
    helpers::Array<ModelParticleCloudV8> clouds ;
    helpers::Array<ModelParticleEmitterV8> emitters ;
    helpers::Array<ModelParticleObstacleV8> obstacles ;
};

struct ModelFileDataV8 {
    helpers::PtrStruct<ModelMaterialDataV8> materials ;
    helpers::PtrStruct<ModelMeshDataV8> meshes ;
    helpers::Ptr<ModelModelDataV8> model ;
    helpers::Ptr<ModelPropertyDataV8> properties ;
    helpers::Ptr<ModelCloudDataV8> cloudData ;
};

typedef ModelFileDataV8 Gw2StructMODL;

/* Version: 7, ReferencedFunction: 0x1 */
struct ModelTextureDataV7 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
};

struct ModelConstantDataV7 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV7 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV7> textures ;
    helpers::Array<ModelConstantDataV7> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV7 {
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV7 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelAnimationDataV7 {
    qword token;
    PackGrannyAnimationTypeV0 animation;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV7> visTrackData ;
};

struct ModelAnimationImportDataV7 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelTransformDataV7 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV7 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV7 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV7 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV7> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV7 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV7 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV7> Skeleton ;
    ModelTransformDataV7 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV7> MeshBindings ;
    helpers::Array<dword> boneFlags ;
};

struct ModelFloatPropertyDataV7 {
    qword token;
    float value;
};

struct ModelPropertyDataV7 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV7> floatValues ;
};

struct ModelCollisionMeshV7 {
    qword animationSequence;
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
};

struct ModelCollisionCloudV7 {
    qword animationSequence;
    helpers::Array<float3> points ;
    byte surface;
};

struct ModelCollisionCubeV7 {
    float4 transform[3];
    byte surface;
};

struct ModelCollisionSphereV7 {
    float radius;
    float3 position;
    byte surface;
};

struct ModelCollisionSurfaceV7 {
    helpers::Array<qword> tokens ;
};

struct ModelCollisionDataV7 {
    helpers::Array<ModelCollisionMeshV7> meshes ;
    helpers::Array<ModelCollisionCloudV7> clouds ;
    helpers::Array<ModelCollisionCubeV7> cubes ;
    helpers::Array<ModelCollisionSphereV7> spheres ;
    helpers::Array<ModelCollisionSurfaceV7> surfaces ;
};

struct ModelParticleFlipbookV7 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleCloudV7 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    helpers::Array<ModelParticleFlipbookV7> flipbook ;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    byte opacityCurveType;
    helpers::Array<float2> opacityKeys ;
    byte scaleCurveType;
    helpers::Array<float2> scaleKeys ;
};

struct ModelParticleEmitterV7 {
    float2 acceleration[4];
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    dword flags;
    float2 lifetime;
    float2 rotationChange;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    dword visBoneIndex;
};

struct ModelParticleObstacleV7 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV7 {
    helpers::Array<ModelParticleCloudV7> clouds ;
    helpers::Array<ModelParticleEmitterV7> emitters ;
    helpers::Array<ModelParticleObstacleV7> obstacles ;
};

struct ModelFileDataV7 {
    helpers::PtrStruct<ModelMaterialDataV7> materials ;
    helpers::PtrStruct<ModelMeshDataV7> meshes ;
    helpers::PtrStruct<ModelAnimationDataV7> animations ;
    helpers::Array<qword> animationFallbacks ;
    helpers::Array<ModelAnimationImportDataV7> animationImports ;
    helpers::Ptr<ModelModelDataV7> model ;
    helpers::Ptr<ModelPropertyDataV7> properties ;
    helpers::Ptr<ModelCollisionDataV7> collisionData ;
    helpers::Ptr<ModelCloudDataV7> cloudData ;
};

typedef ModelFileDataV7 Gw2StructMODL;

/* Version: 6, ReferencedFunction: 0x410CDA2000000001 */
struct ModelTextureDataV6 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
};

struct ModelConstantDataV6 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV6 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV6> textures ;
    helpers::Array<ModelConstantDataV6> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV6 {
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<dword> visBoneIndices ;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV6 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelAnimationDataV6 {
    qword token;
    PackGrannyAnimationTypeV0 animation;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV6> visTrackData ;
};

struct ModelAnimationImportDataV6 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelTransformDataV6 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV6 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV6 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV6 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV6> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV6 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV6 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV6> Skeleton ;
    ModelTransformDataV6 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV6> MeshBindings ;
};

struct ModelFloatPropertyDataV6 {
    qword token;
    float value;
};

struct ModelPropertyDataV6 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV6> floatValues ;
};

struct ModelCollisionMeshV6 {
    qword animationSequence;
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
};

struct ModelCollisionCloudV6 {
    qword animationSequence;
    helpers::Array<float3> points ;
    byte surface;
};

struct ModelCollisionCubeV6 {
    float4 transform[3];
    byte surface;
};

struct ModelCollisionSphereV6 {
    float radius;
    float3 position;
    byte surface;
};

struct ModelCollisionSurfaceV6 {
    helpers::Array<qword> tokens ;
};

struct ModelCollisionDataV6 {
    helpers::Array<ModelCollisionMeshV6> meshes ;
    helpers::Array<ModelCollisionCloudV6> clouds ;
    helpers::Array<ModelCollisionCubeV6> cubes ;
    helpers::Array<ModelCollisionSphereV6> spheres ;
    helpers::Array<ModelCollisionSurfaceV6> surfaces ;
};

struct ModelParticleFlipbookV6 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleCloudV6 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    helpers::Array<ModelParticleFlipbookV6> flipbook ;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    byte opacityCurveType;
    helpers::Array<float2> opacityKeys ;
    byte scaleCurveType;
    helpers::Array<float2> scaleKeys ;
};

struct ModelParticleEmitterV6 {
    float2 acceleration[4];
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    dword flags;
    float2 lifetime;
    float2 rotationChange;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
    dword visBoneIndex;
};

struct ModelParticleObstacleV6 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
    dword visBoneIndex;
};

struct ModelCloudDataV6 {
    helpers::Array<ModelParticleCloudV6> clouds ;
    helpers::Array<ModelParticleEmitterV6> emitters ;
    helpers::Array<ModelParticleObstacleV6> obstacles ;
};

struct ModelFileDataV6 {
    helpers::PtrStruct<ModelMaterialDataV6> materials ;
    helpers::PtrStruct<ModelMeshDataV6> meshes ;
    helpers::PtrStruct<ModelAnimationDataV6> animations ;
    helpers::Array<qword> animationFallbacks ;
    helpers::Array<ModelAnimationImportDataV6> animationImports ;
    helpers::Ptr<ModelModelDataV6> model ;
    helpers::Ptr<ModelPropertyDataV6> properties ;
    helpers::Ptr<ModelCollisionDataV6> collisionData ;
    helpers::Ptr<ModelCloudDataV6> cloudData ;
};

typedef ModelFileDataV6 Gw2StructMODL;

/* Version: 5, ReferencedFunction: 0x1 */
struct ModelTextureDataV5 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
};

struct ModelConstantDataV5 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV5 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV5> textures ;
    helpers::Array<ModelConstantDataV5> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV5 {
    PackGrannyMeshType mesh;
    dword flags;
    helpers::Array<qword> visTokens ;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV5 {
    qword token;
    helpers::Array<float> keys ;
};

struct ModelAnimationDataV5 {
    qword token;
    PackGrannyAnimationTypeV0 animation;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV5> visTrackData ;
};

struct ModelTransformDataV5 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV5 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV5 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV5 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV5> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV5 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV5 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV5> Skeleton ;
    ModelTransformDataV5 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV5> MeshBindings ;
};

struct ModelFloatPropertyDataV5 {
    qword token;
    float value;
};

struct ModelPropertyDataV5 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV5> floatValues ;
};

struct ModelCollisionMeshV5 {
    qword animationSequence;
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
};

struct ModelCollisionCloudV5 {
    qword animationSequence;
    helpers::Array<float3> points ;
    byte surface;
};

struct ModelCollisionCubeV5 {
    float4 transform[3];
    byte surface;
};

struct ModelCollisionSphereV5 {
    float radius;
    float3 position;
    byte surface;
};

struct ModelCollisionSurfaceV5 {
    helpers::Array<qword> tokens ;
};

struct ModelCollisionDataV5 {
    helpers::Array<ModelCollisionMeshV5> meshes ;
    helpers::Array<ModelCollisionCloudV5> clouds ;
    helpers::Array<ModelCollisionCubeV5> cubes ;
    helpers::Array<ModelCollisionSphereV5> spheres ;
    helpers::Array<ModelCollisionSurfaceV5> surfaces ;
};

struct ModelParticleFlipbookV5 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleCloudV5 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    dword flags;
    helpers::Array<ModelParticleFlipbookV5> flipbook ;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    byte opacityCurveType;
    helpers::Array<float2> opacityKeys ;
    byte scaleCurveType;
    helpers::Array<float2> scaleKeys ;
};

struct ModelParticleEmitterV5 {
    float2 acceleration[4];
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    dword flags;
    float2 lifetime;
    float2 rotationChange;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
};

struct ModelParticleObstacleV5 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelCloudDataV5 {
    helpers::Array<ModelParticleCloudV5> clouds ;
    helpers::Array<ModelParticleEmitterV5> emitters ;
    helpers::Array<ModelParticleObstacleV5> obstacles ;
};

struct ModelFileDataV5 {
    helpers::PtrStruct<ModelMaterialDataV5> materials ;
    helpers::PtrStruct<ModelMeshDataV5> meshes ;
    helpers::PtrStruct<ModelAnimationDataV5> animations ;
    helpers::Ptr<ModelModelDataV5> model ;
    helpers::Ptr<ModelPropertyDataV5> properties ;
    helpers::Ptr<ModelCollisionDataV5> collisionData ;
    helpers::Ptr<ModelCloudDataV5> cloudData ;
};

typedef ModelFileDataV5 Gw2StructMODL;

/* Version: 4, ReferencedFunction: 0x1 */
struct ModelTextureDataV4 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
};

struct ModelConstantDataV4 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV4 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV4> textures ;
    helpers::Array<ModelConstantDataV4> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV4 {
    PackGrannyMeshType mesh;
    helpers::Array<qword> visTokens ;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV4 {
    qword token;
    helpers::Array<float> keys ;
};

struct ModelAnimationDataV4 {
    qword token;
    PackGrannyAnimationTypeV0 animation;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV4> visTrackData ;
};

struct ModelTransformDataV4 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV4 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV4 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV4 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV4> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV4 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV4 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV4> Skeleton ;
    ModelTransformDataV4 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV4> MeshBindings ;
};

struct ModelFloatPropertyDataV4 {
    qword token;
    float value;
};

struct ModelPropertyDataV4 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV4> floatValues ;
};

struct ModelCollisionMeshV4 {
    qword animationSequence;
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
};

struct ModelCollisionCloudV4 {
    qword animationSequence;
    helpers::Array<float3> points ;
    byte surface;
};

struct ModelCollisionCubeV4 {
    float4 transform[3];
    byte surface;
};

struct ModelCollisionSphereV4 {
    float radius;
    float3 position;
    byte surface;
};

struct ModelCollisionSurfaceV4 {
    helpers::Array<qword> tokens ;
};

struct ModelCollisionDataV4 {
    helpers::Array<ModelCollisionMeshV4> meshes ;
    helpers::Array<ModelCollisionCloudV4> clouds ;
    helpers::Array<ModelCollisionCubeV4> cubes ;
    helpers::Array<ModelCollisionSphereV4> spheres ;
    helpers::Array<ModelCollisionSurfaceV4> surfaces ;
};

struct ModelParticleFlipbookV4 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleCloudV4 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    helpers::Array<ModelParticleFlipbookV4> flipbook ;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    byte opacityCurveType;
    helpers::Array<float2> opacityKeys ;
    byte scaleCurveType;
    helpers::Array<float2> scaleKeys ;
};

struct ModelParticleEmitterV4 {
    float2 acceleration[4];
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    dword flags;
    float2 lifetime;
    float2 rotationChange;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
};

struct ModelParticleObstacleV4 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelCloudDataV4 {
    helpers::Array<ModelParticleCloudV4> clouds ;
    helpers::Array<ModelParticleEmitterV4> emitters ;
    helpers::Array<ModelParticleObstacleV4> obstacles ;
};

struct ModelFileDataV4 {
    helpers::PtrStruct<ModelMaterialDataV4> materials ;
    helpers::PtrStruct<ModelMeshDataV4> meshes ;
    helpers::PtrStruct<ModelAnimationDataV4> animations ;
    helpers::Ptr<ModelModelDataV4> model ;
    helpers::Ptr<ModelPropertyDataV4> properties ;
    helpers::Ptr<ModelCollisionDataV4> collisionData ;
    helpers::Ptr<ModelCloudDataV4> cloudData ;
};

typedef ModelFileDataV4 Gw2StructMODL;

/* Version: 3, ReferencedFunction: 0x1 */
struct ModelTextureDataV3 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
};

struct ModelConstantDataV3 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV3 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV3> textures ;
    helpers::Array<ModelConstantDataV3> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV3 {
    PackGrannyMeshType mesh;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelAnimationDataV3 {
    qword token;
    PackGrannyAnimationTypeV0 animation;
};

struct ModelTransformDataV3 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV3 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV3 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV3 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV3> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV3 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV3 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV3> Skeleton ;
    ModelTransformDataV3 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV3> MeshBindings ;
};

struct ModelFloatPropertyDataV3 {
    qword token;
    float value;
};

struct ModelPropertyDataV3 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV3> floatValues ;
};

struct ModelCollisionMeshV3 {
    qword animationSequence;
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
};

struct ModelCollisionCloudV3 {
    qword animationSequence;
    helpers::Array<float3> points ;
    byte surface;
};

struct ModelCollisionCubeV3 {
    float4 transform[3];
    byte surface;
};

struct ModelCollisionSphereV3 {
    float radius;
    float3 position;
    byte surface;
};

struct ModelCollisionSurfaceV3 {
    helpers::Array<qword> tokens ;
};

struct ModelCollisionDataV3 {
    helpers::Array<ModelCollisionMeshV3> meshes ;
    helpers::Array<ModelCollisionCloudV3> clouds ;
    helpers::Array<ModelCollisionCubeV3> cubes ;
    helpers::Array<ModelCollisionSphereV3> spheres ;
    helpers::Array<ModelCollisionSurfaceV3> surfaces ;
};

struct ModelParticleFlipbookV3 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleCloudV3 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    helpers::Array<ModelParticleFlipbookV3> flipbook ;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    byte opacityCurveType;
    helpers::Array<float2> opacityKeys ;
    byte scaleCurveType;
    helpers::Array<float2> scaleKeys ;
};

struct ModelParticleEmitterV3 {
    float2 acceleration[4];
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    dword flags;
    float2 lifetime;
    float2 rotationChange;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
};

struct ModelParticleObstacleV3 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelCloudDataV3 {
    helpers::Array<ModelParticleCloudV3> clouds ;
    helpers::Array<ModelParticleEmitterV3> emitters ;
    helpers::Array<ModelParticleObstacleV3> obstacles ;
};

struct ModelFileDataV3 {
    helpers::PtrStruct<ModelMaterialDataV3> materials ;
    helpers::PtrStruct<ModelMeshDataV3> meshes ;
    helpers::PtrStruct<ModelAnimationDataV3> animations ;
    helpers::Ptr<ModelModelDataV3> model ;
    helpers::Ptr<ModelPropertyDataV3> properties ;
    helpers::Ptr<ModelCollisionDataV3> collisionData ;
    helpers::Ptr<ModelCloudDataV3> cloudData ;
};

typedef ModelFileDataV3 Gw2StructMODL;

/* Version: 2, ReferencedFunction: 0x1 */
struct ModelTextureDataV2 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
};

struct ModelConstantDataV2 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV2 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV2> textures ;
    helpers::Array<ModelConstantDataV2> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV2 {
    PackGrannyMeshType mesh;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelAnimationDataV2 {
    qword token;
    PackGrannyAnimationTypeV0 animation;
};

struct ModelTransformDataV2 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV2 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV2 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV2 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV2> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV2 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV2 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV2> Skeleton ;
    ModelTransformDataV2 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV2> MeshBindings ;
};

struct ModelFloatPropertyDataV2 {
    qword token;
    float value;
};

struct ModelPropertyDataV2 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV2> floatValues ;
};

struct ModelCollisionMeshV2 {
    qword animationSequence;
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
};

struct ModelCollisionCloudV2 {
    qword animationSequence;
    helpers::Array<float3> points ;
    byte surface;
};

struct ModelCollisionSurfaceV2 {
    helpers::Array<qword> tokens ;
};

struct ModelCollisionDataV2 {
    helpers::Array<ModelCollisionMeshV2> meshes ;
    helpers::Array<ModelCollisionCloudV2> clouds ;
    helpers::Array<ModelCollisionSurfaceV2> surfaces ;
};

struct ModelParticleFlipbookV2 {
    byte columns;
    byte count;
    byte flags;
    dword fps;
    byte rows;
    byte start;
};

struct ModelParticleCloudV2 {
    float3 acceleration;
    qword bone;
    float drag;
    helpers::Array<dword> emitterIndices ;
    helpers::Array<ModelParticleFlipbookV2> flipbook ;
    dword materialIndex;
    helpers::Array<dword> obstacleIndices ;
    byte opacityCurveType;
    helpers::Array<float2> opacityKeys ;
    byte scaleCurveType;
    helpers::Array<float2> scaleKeys ;
};

struct ModelParticleEmitterV2 {
    float2 acceleration[4];
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float2 colorPeriod;
    dword flags;
    float2 lifetime;
    float2 rotationChange;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    byte spawnShape;
};

struct ModelParticleObstacleV2 {
    qword bone;
    float dragCoef;
    dword flags;
    float3 geoData;
    float gravityCoef;
    byte response;
    byte type;
};

struct ModelCloudDataV2 {
    helpers::Array<ModelParticleCloudV2> clouds ;
    helpers::Array<ModelParticleEmitterV2> emitters ;
    helpers::Array<ModelParticleObstacleV2> obstacles ;
};

struct ModelFileDataV2 {
    helpers::PtrStruct<ModelMaterialDataV2> materials ;
    helpers::PtrStruct<ModelMeshDataV2> meshes ;
    helpers::PtrStruct<ModelAnimationDataV2> animations ;
    helpers::Ptr<ModelModelDataV2> model ;
    helpers::Ptr<ModelPropertyDataV2> properties ;
    helpers::Ptr<ModelCollisionDataV2> collisionData ;
    helpers::Ptr<ModelCloudDataV2> cloudData ;
};

typedef ModelFileDataV2 Gw2StructMODL;

/* Version: 1, ReferencedFunction: 0x1 */
struct ModelTextureDataV1 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
};

struct ModelConstantDataV1 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV1 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV1> textures ;
    helpers::Array<ModelConstantDataV1> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV1 {
    PackGrannyMeshType mesh;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelAnimationDataV1 {
    qword token;
    PackGrannyAnimationTypeV0 animation;
};

struct ModelTransformDataV1 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV1 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV1 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV1 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV1> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV1 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV1 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV1> Skeleton ;
    ModelTransformDataV1 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV1> MeshBindings ;
};

struct ModelFloatPropertyDataV1 {
    qword token;
    float value;
};

struct ModelPropertyDataV1 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV1> floatValues ;
};

struct ModelChunkCollisionMeshV1 {
    qword animationSequence;
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
};

struct ModelChunkCollisionCloudV1 {
    qword animationSequence;
    helpers::Array<float3> points ;
    byte surface;
};

struct ModelChunkCollisionSurfaceV1 {
    helpers::Array<qword> tokens ;
};

struct ModelChunkCollisionDataV1 {
    helpers::Array<ModelChunkCollisionMeshV1> meshes ;
    helpers::Array<ModelChunkCollisionCloudV1> clouds ;
    helpers::Array<ModelChunkCollisionSurfaceV1> surfaces ;
};

struct ModelFileDataV1 {
    helpers::PtrStruct<ModelMaterialDataV1> materials ;
    helpers::PtrStruct<ModelMeshDataV1> meshes ;
    helpers::PtrStruct<ModelAnimationDataV1> animations ;
    helpers::Ptr<ModelModelDataV1> model ;
    helpers::Ptr<ModelPropertyDataV1> properties ;
    helpers::Ptr<ModelChunkCollisionDataV1> collisionData ;
};

typedef ModelFileDataV1 Gw2StructMODL;

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelTextureDataV0 {
    helpers::FileName filename;
    dword textureFlags;
    qword token;
    qword blitId;
};

struct ModelConstantDataV0 {
    dword name;
    float4 value;
    dword constantFlags;
};

struct ModelMaterialDataV0 {
    helpers::FileName filename;
    dword materialFlags;
    dword sortOrder;
    helpers::Array<ModelTextureDataV0> textures ;
    helpers::Array<ModelConstantDataV0> constants ;
};

struct PackGrannyMeshType {
    helpers::Array<byte> mesh ;
};

struct ModelMeshDataV0 {
    PackGrannyMeshType mesh;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelAnimationDataV0 {
    qword token;
    PackGrannyAnimationTypeV0 animation;
};

struct ModelTransformDataV0 {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneDataV0 {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformDataV0 LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelSkeletonDataV0 {
    helpers::String Name;
    helpers::Array<ModelBoneDataV0> Bones ;
    dword LODType;
};

struct ModelMeshBindingDataV0 {
    helpers::Ptr<byte> Mesh ;
};

struct ModelModelDataV0 {
    helpers::String Name;
    helpers::Ptr<ModelSkeletonDataV0> Skeleton ;
    ModelTransformDataV0 InitialPlacement;
    helpers::Array<ModelMeshBindingDataV0> MeshBindings ;
};

struct ModelFloatPropertyDataV0 {
    qword token;
    float value;
};

struct ModelPropertyDataV0 {
    helpers::Array<qword> boolTokens ;
    helpers::Array<ModelFloatPropertyDataV0> floatValues ;
};

struct ModelFileDataV0 {
    helpers::PtrStruct<ModelMaterialDataV0> materials ;
    helpers::PtrStruct<ModelMeshDataV0> meshes ;
    helpers::PtrStruct<ModelAnimationDataV0> animations ;
    helpers::Ptr<ModelModelDataV0> model ;
    helpers::Ptr<ModelPropertyDataV0> properties ;
};

typedef ModelFileDataV0 Gw2StructMODL;


/* ===============================================
 * Chunk: ANIM, versions: 26, strucTab: 0x14203C590
 * ===============================================
 */

/* Version: 25, ReferencedFunction: 0x410C844000000001 */
struct PackGrannyAnimationTypeV1 {
    helpers::Array<byte> animation ;
    helpers::Array<dword> pointers ;
};

struct ModelAnimationLodV25 {
    PackGrannyAnimationTypeV1 data;
    helpers::FileName fileFull;
};

struct ModelVisTrackDataV33 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV25 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV25 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV25> uvTransformData ;
};

struct ModelCloudAnimV25 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV25> cloudTrackData ;
};

struct ModelMatConstAnimV25 {
    dword materialId;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV25 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV25> lightTrackData ;
};

struct ModelAnimPropertyDataV25 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV25 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelBoneConstraintAnimV25 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV25> bcTrackData ;
};

struct ModelAnchorAnimV25 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV25> anchorTrackData ;
};

struct ModelStreakAnimV25 {
    qword bone;
    helpers::Array<ModelAnchorAnimV25> anchorAnim ;
};

struct ModelLightningAnimV25 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV25> lightningTrackData ;
};

struct ModelWindAnimationV25 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV25> windTrackData ;
};

struct ModelAnimationDataV33 {
    qword token;
    PackGrannyAnimationTypeV1 data;
    helpers::Ptr<ModelAnimationLodV25> animLod ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV33> visTrackData ;
    helpers::Array<ModelUVAnimationV25> uvAnimData ;
    helpers::Array<ModelCloudAnimV25> cloudAnim ;
    helpers::Array<ModelMatConstAnimV25> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV25> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV25> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV25> tokenMapAnims ;
    helpers::Array<ModelBoneConstraintAnimV25> bcAnim ;
    helpers::Array<ModelStreakAnimV25> streakAnim ;
    helpers::Array<ModelLightningAnimV25> lightningAnim ;
    helpers::Array<ModelWindAnimationV25> windAnimData ;
};

struct ModelCompoundAnimationDataV25 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportSequenceV25 {
    qword name;
    float duration;
};

struct ModelAnimationImportDataV33 {
    helpers::FileName filename;
    helpers::Array<ModelAnimationImportSequenceV25> sequences ;
};

struct ModelFileAnimationBankV25 {
    helpers::PtrStruct<ModelAnimationDataV33> animations ;
    helpers::Array<ModelCompoundAnimationDataV25> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV33> imports ;
};

struct ModelFileAnimationV25 {
    helpers::Ptr<ModelFileAnimationBankV25> bank ;
    PackGrannyAnimationTypeV1 anim;
};

typedef ModelFileAnimationV25 Gw2StructANIM;

/* Version: 24, ReferencedFunction: 0x410C81C000000001 */
struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelAnimationLodV24 {
    PackGrannyAnimationTypeV0 data;
    helpers::FileName fileFull;
};

struct ModelVisTrackDataV32 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV24 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV24 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV24> uvTransformData ;
};

struct ModelCloudAnimV24 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV24> cloudTrackData ;
};

struct ModelMatConstAnimV24 {
    dword materialId;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV24 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV24> lightTrackData ;
};

struct ModelAnimPropertyDataV24 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV24 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelBoneConstraintAnimV24 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV24> bcTrackData ;
};

struct ModelAnchorAnimV24 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV24> anchorTrackData ;
};

struct ModelStreakAnimV24 {
    qword bone;
    helpers::Array<ModelAnchorAnimV24> anchorAnim ;
};

struct ModelLightningAnimV24 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV24> lightningTrackData ;
};

struct ModelWindAnimationV24 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV24> windTrackData ;
};

struct ModelAnimationDataV32 {
    qword token;
    PackGrannyAnimationTypeV0 data;
    helpers::Ptr<ModelAnimationLodV24> animLod ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV32> visTrackData ;
    helpers::Array<ModelUVAnimationV24> uvAnimData ;
    helpers::Array<ModelCloudAnimV24> cloudAnim ;
    helpers::Array<ModelMatConstAnimV24> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV24> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV24> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV24> tokenMapAnims ;
    helpers::Array<ModelBoneConstraintAnimV24> bcAnim ;
    helpers::Array<ModelStreakAnimV24> streakAnim ;
    helpers::Array<ModelLightningAnimV24> lightningAnim ;
    helpers::Array<ModelWindAnimationV24> windAnimData ;
};

struct ModelCompoundAnimationDataV24 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportSequenceV24 {
    qword name;
    float duration;
};

struct ModelAnimationImportDataV32 {
    helpers::FileName filename;
    helpers::Array<ModelAnimationImportSequenceV24> sequences ;
};

struct ModelFileAnimationBankV24 {
    helpers::PtrStruct<ModelAnimationDataV32> animations ;
    helpers::Array<ModelCompoundAnimationDataV24> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV32> imports ;
};

struct ModelFileAnimationV24 {
    helpers::Ptr<ModelFileAnimationBankV24> bank ;
    PackGrannyAnimationTypeV0 anim;
};

typedef ModelFileAnimationV24 Gw2StructANIM;

/* Version: 23, ReferencedFunction: 0x410C7F8000000001 */
struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV31 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV23 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV23 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV23> uvTransformData ;
};

struct ModelCloudAnimV23 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV23> cloudTrackData ;
};

struct ModelMatConstAnimV23 {
    dword materialId;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV23 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV23> lightTrackData ;
};

struct ModelAnimPropertyDataV23 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV23 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelBoneConstraintAnimV23 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV23> bcTrackData ;
};

struct ModelAnchorAnimV23 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV23> anchorTrackData ;
};

struct ModelStreakAnimV23 {
    qword bone;
    helpers::Array<ModelAnchorAnimV23> anchorAnim ;
};

struct ModelLightningAnimV23 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV23> lightningTrackData ;
};

struct ModelWindAnimationV23 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV23> windTrackData ;
};

struct ModelAnimationDataV31 {
    qword token;
    PackGrannyAnimationTypeV0 data;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV31> visTrackData ;
    helpers::Array<ModelUVAnimationV23> uvAnimData ;
    helpers::Array<ModelCloudAnimV23> cloudAnim ;
    helpers::Array<ModelMatConstAnimV23> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV23> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV23> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV23> tokenMapAnims ;
    helpers::Array<ModelBoneConstraintAnimV23> bcAnim ;
    helpers::Array<ModelStreakAnimV23> streakAnim ;
    helpers::Array<ModelLightningAnimV23> lightningAnim ;
    helpers::Array<ModelWindAnimationV23> windAnimData ;
};

struct ModelCompoundAnimationDataV23 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportSequenceV23 {
    qword name;
    float duration;
};

struct ModelAnimationImportDataV31 {
    helpers::FileName filename;
    helpers::Array<ModelAnimationImportSequenceV23> sequences ;
};

struct ModelFileAnimationBankV23 {
    helpers::PtrStruct<ModelAnimationDataV31> animations ;
    helpers::Array<ModelCompoundAnimationDataV23> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV31> imports ;
};

typedef ModelFileAnimationBankV23 Gw2StructANIM;

/* Version: 22, ReferencedFunction: 0x1 */
struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV30 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV22 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV22 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV22> uvTransformData ;
};

struct ModelCloudAnimV22 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV22> cloudTrackData ;
};

struct ModelMatConstAnimV22 {
    dword materialId;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV22 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV22> lightTrackData ;
};

struct ModelAnimPropertyDataV22 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV22 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelBoneConstraintAnimV22 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV22> bcTrackData ;
};

struct ModelAnchorAnimV22 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV22> anchorTrackData ;
};

struct ModelStreakAnimV22 {
    qword bone;
    helpers::Array<ModelAnchorAnimV22> anchorAnim ;
};

struct ModelLightningAnimV22 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV22> lightningTrackData ;
};

struct ModelWindAnimationV22 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV22> windTrackData ;
};

struct ModelAnimationDataV30 {
    qword token;
    PackGrannyAnimationTypeV0 data;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV30> visTrackData ;
    helpers::Array<ModelUVAnimationV22> uvAnimData ;
    helpers::Array<ModelCloudAnimV22> cloudAnim ;
    helpers::Array<ModelMatConstAnimV22> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV22> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV22> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV22> tokenMapAnims ;
    helpers::Array<ModelBoneConstraintAnimV22> bcAnim ;
    helpers::Array<ModelStreakAnimV22> streakAnim ;
    helpers::Array<ModelLightningAnimV22> lightningAnim ;
    helpers::Array<ModelWindAnimationV22> windAnimData ;
};

struct ModelCompoundAnimationDataV22 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportSequenceV22 {
    qword name;
    float duration;
};

struct ModelAnimationImportDataV30 {
    helpers::FileName filename;
    helpers::Array<ModelAnimationImportSequenceV22> sequences ;
};

struct ModelFileAnimationBankV22 {
    helpers::PtrStruct<ModelAnimationDataV30> animations ;
    helpers::Array<ModelCompoundAnimationDataV22> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV30> imports ;
};

typedef ModelFileAnimationBankV22 Gw2StructANIM;

/* Version: 21, ReferencedFunction: 0x1 */
struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV29 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV21 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV21 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV21> uvTransformData ;
};

struct ModelCloudAnimV21 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV21> cloudTrackData ;
};

struct ModelMatConstAnimV21 {
    dword materialId;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV21 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV21> lightTrackData ;
};

struct ModelAnimPropertyDataV21 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV21 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelBoneConstraintAnimV21 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV21> bcTrackData ;
};

struct ModelAnchorAnimV21 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV21> anchorTrackData ;
};

struct ModelStreakAnimV21 {
    qword bone;
    helpers::Array<ModelAnchorAnimV21> anchorAnim ;
};

struct ModelLightningAnimV21 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV21> lightningTrackData ;
};

struct ModelWindAnimationV21 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV21> windTrackData ;
};

struct ModelAnimationDataV29 {
    qword token;
    PackGrannyAnimationTypeV0 data;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV29> visTrackData ;
    helpers::Array<ModelUVAnimationV21> uvAnimData ;
    helpers::Array<ModelCloudAnimV21> cloudAnim ;
    helpers::Array<ModelMatConstAnimV21> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV21> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV21> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV21> tokenMapAnims ;
    helpers::Array<ModelBoneConstraintAnimV21> bcAnim ;
    helpers::Array<ModelStreakAnimV21> streakAnim ;
    helpers::Array<ModelLightningAnimV21> lightningAnim ;
    helpers::Array<ModelWindAnimationV21> windAnimData ;
};

struct ModelCompoundAnimationDataV21 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportSequenceV21 {
    qword name;
    float duration;
};

struct ModelAnimationImportDataV29 {
    helpers::FileName filename;
    helpers::Array<ModelAnimationImportSequenceV21> sequences ;
};

struct ModelFileAnimationBankV21 {
    helpers::PtrStruct<ModelAnimationDataV29> animations ;
    helpers::Array<ModelCompoundAnimationDataV21> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV29> imports ;
    helpers::FileName modelReference;
};

typedef ModelFileAnimationBankV21 Gw2StructANIM;

/* Version: 20, ReferencedFunction: 0x1 */
struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV28 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV20 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV20 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV20> uvTransformData ;
};

struct ModelCloudAnimV20 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV20> cloudTrackData ;
};

struct ModelMatConstAnimV20 {
    dword materialId;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV20 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV20> lightTrackData ;
};

struct ModelAnimPropertyDataV20 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV20 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelBoneConstraintAnimV20 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV20> bcTrackData ;
};

struct ModelAnchorAnimV20 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV20> anchorTrackData ;
};

struct ModelStreakAnimV20 {
    qword bone;
    helpers::Array<ModelAnchorAnimV20> anchorAnim ;
};

struct ModelLightningAnimV20 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV20> lightningTrackData ;
};

struct ModelAnimationDataV28 {
    qword token;
    PackGrannyAnimationTypeV0 data;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV28> visTrackData ;
    helpers::Array<ModelUVAnimationV20> uvAnimData ;
    helpers::Array<ModelCloudAnimV20> cloudAnim ;
    helpers::Array<ModelMatConstAnimV20> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV20> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV20> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV20> tokenMapAnims ;
    helpers::Array<ModelBoneConstraintAnimV20> bcAnim ;
    helpers::Array<ModelStreakAnimV20> streakAnim ;
    helpers::Array<ModelLightningAnimV20> lightningAnim ;
};

struct ModelCompoundAnimationDataV20 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportSequenceV20 {
    qword name;
    float duration;
};

struct ModelAnimationImportDataV28 {
    helpers::FileName filename;
    helpers::Array<ModelAnimationImportSequenceV20> sequences ;
};

struct ModelFileAnimationBankV20 {
    helpers::PtrStruct<ModelAnimationDataV28> animations ;
    helpers::Array<ModelCompoundAnimationDataV20> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV28> imports ;
    helpers::FileName modelReference;
};

typedef ModelFileAnimationBankV20 Gw2StructANIM;

/* Version: 19, ReferencedFunction: 0x1 */
struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV27 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV19 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV19 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV19> uvTransformData ;
};

struct ModelCloudAnimV19 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV19> cloudTrackData ;
};

struct ModelMatConstAnimV19 {
    dword materialId;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV19 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV19> lightTrackData ;
};

struct ModelAnimPropertyDataV19 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV19 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelBoneConstraintAnimV19 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV19> bcTrackData ;
};

struct ModelAnchorAnimV19 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV19> anchorTrackData ;
};

struct ModelStreakAnimV19 {
    qword bone;
    helpers::Array<ModelAnchorAnimV19> anchorAnim ;
};

struct ModelAnimationDataV27 {
    qword token;
    PackGrannyAnimationTypeV0 data;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV27> visTrackData ;
    helpers::Array<ModelUVAnimationV19> uvAnimData ;
    helpers::Array<ModelCloudAnimV19> cloudAnim ;
    helpers::Array<ModelMatConstAnimV19> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV19> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV19> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV19> tokenMapAnims ;
    helpers::Array<ModelBoneConstraintAnimV19> bcAnim ;
    helpers::Array<ModelStreakAnimV19> streakAnim ;
};

struct ModelCompoundAnimationDataV19 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportSequenceV19 {
    qword name;
    float duration;
};

struct ModelAnimationImportDataV27 {
    helpers::FileName filename;
    helpers::Array<ModelAnimationImportSequenceV19> sequences ;
};

struct ModelFileAnimationBankV19 {
    helpers::PtrStruct<ModelAnimationDataV27> animations ;
    helpers::Array<ModelCompoundAnimationDataV19> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV27> imports ;
    helpers::FileName modelReference;
};

typedef ModelFileAnimationBankV19 Gw2StructANIM;

/* Version: 18, ReferencedFunction: 0x410C7EB000000001 */
struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV26 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV18 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV18 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV18> uvTransformData ;
};

struct ModelCloudAnimV18 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV18> cloudTrackData ;
};

struct ModelMatConstAnimV18 {
    dword materialId;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV18 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV18> lightTrackData ;
};

struct ModelAnimPropertyDataV18 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV18 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelBoneConstraintAnimV18 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV18> bcTrackData ;
};

struct ModelAnchorAnimV18 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV18> anchorTrackData ;
};

struct ModelStreakAnimV18 {
    qword bone;
    helpers::Array<ModelAnchorAnimV18> anchorAnim ;
};

struct ModelAnimationDataV26 {
    qword token;
    PackGrannyAnimationTypeV0 data;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV26> visTrackData ;
    helpers::Array<ModelUVAnimationV18> uvAnimData ;
    helpers::Array<ModelCloudAnimV18> cloudAnim ;
    helpers::Array<ModelMatConstAnimV18> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV18> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV18> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV18> tokenMapAnims ;
    helpers::Array<ModelBoneConstraintAnimV18> bcAnim ;
    helpers::Array<ModelStreakAnimV18> streakAnim ;
};

struct ModelCompoundAnimationDataV18 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportSequenceV18 {
    qword name;
    float duration;
};

struct ModelAnimationImportDataV26 {
    helpers::FileName filename;
    helpers::Array<ModelAnimationImportSequenceV18> sequences ;
};

struct ModelFileAnimationBankV18 {
    helpers::PtrStruct<ModelAnimationDataV26> animations ;
    helpers::Array<ModelCompoundAnimationDataV18> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV26> imports ;
};

typedef ModelFileAnimationBankV18 Gw2StructANIM;

/* Version: 17, ReferencedFunction: 0x410C795000000001 */
struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV25 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV17 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV17 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV17> uvTransformData ;
};

struct ModelCloudAnimV17 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV17> cloudTrackData ;
};

struct ModelMatConstAnimV17 {
    dword matIndex;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV17 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV17> lightTrackData ;
};

struct ModelAnimPropertyDataV17 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV17 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelBoneConstraintAnimV17 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV17> bcTrackData ;
};

struct ModelAnchorAnimV17 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV17> anchorTrackData ;
};

struct ModelStreakAnimV17 {
    qword bone;
    helpers::Array<ModelAnchorAnimV17> anchorAnim ;
};

struct ModelAnimationDataV25 {
    qword token;
    PackGrannyAnimationTypeV0 data;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV25> visTrackData ;
    helpers::Array<ModelUVAnimationV17> uvAnimData ;
    helpers::Array<ModelCloudAnimV17> cloudAnim ;
    helpers::Array<ModelMatConstAnimV17> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV17> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV17> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV17> tokenMapAnims ;
    helpers::Array<ModelBoneConstraintAnimV17> bcAnim ;
    helpers::Array<ModelStreakAnimV17> streakAnim ;
};

struct ModelCompoundAnimationDataV17 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportSequenceV17 {
    qword name;
    float duration;
};

struct ModelAnimationImportDataV25 {
    helpers::FileName filename;
    helpers::Array<ModelAnimationImportSequenceV17> sequences ;
};

struct ModelFileAnimationBankV17 {
    helpers::PtrStruct<ModelAnimationDataV25> animations ;
    helpers::Array<ModelCompoundAnimationDataV17> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV25> imports ;
};

typedef ModelFileAnimationBankV17 Gw2StructANIM;

/* Version: 16, ReferencedFunction: 0x1 */
struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelVisTrackDataV24 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV16 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV16 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV16> uvTransformData ;
};

struct ModelCloudAnimV16 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV16> cloudTrackData ;
};

struct ModelMatConstAnimV16 {
    dword matIndex;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV16 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV16> lightTrackData ;
};

struct ModelAnimPropertyDataV16 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV16 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelBoneConstraintAnimV16 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV16> bcTrackData ;
};

struct ModelAnchorAnimV16 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV16> anchorTrackData ;
};

struct ModelStreakAnimV16 {
    qword bone;
    helpers::Array<ModelAnchorAnimV16> anchorAnim ;
};

struct ModelAnimationDataV24 {
    qword token;
    PackGrannyAnimationTypeV0 data;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV24> visTrackData ;
    helpers::Array<ModelUVAnimationV16> uvAnimData ;
    helpers::Array<ModelCloudAnimV16> cloudAnim ;
    helpers::Array<ModelMatConstAnimV16> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV16> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV16> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV16> tokenMapAnims ;
    helpers::Array<ModelBoneConstraintAnimV16> bcAnim ;
    helpers::Array<ModelStreakAnimV16> streakAnim ;
};

struct ModelCompoundAnimationDataV16 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV24 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV16 {
    helpers::PtrStruct<ModelAnimationDataV24> animations ;
    helpers::Array<ModelCompoundAnimationDataV16> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV24> imports ;
};

typedef ModelFileAnimationBankV16 Gw2StructANIM;

/* Version: 15, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV23 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV15 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV15 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV15> uvTransformData ;
};

struct ModelCloudAnimV15 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV15> cloudTrackData ;
};

struct ModelMatConstAnimV15 {
    dword matIndex;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV15 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV15> lightTrackData ;
};

struct ModelAnimPropertyDataV15 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV15 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelBoneConstraintAnimV15 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV15> bcTrackData ;
};

struct ModelAnimationDataV23 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV23> visTrackData ;
    helpers::Array<ModelUVAnimationV15> uvAnimData ;
    helpers::Array<ModelCloudAnimV15> cloudAnim ;
    helpers::Array<ModelMatConstAnimV15> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV15> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV15> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV15> tokenMapAnims ;
    helpers::Array<ModelBoneConstraintAnimV15> bcAnim ;
};

struct ModelCompoundAnimationDataV15 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV23 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV15 {
    helpers::PtrStruct<ModelAnimationDataV23> animations ;
    helpers::Array<ModelCompoundAnimationDataV15> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV23> imports ;
};

typedef ModelFileAnimationBankV15 Gw2StructANIM;

/* Version: 14, ReferencedFunction: 0x410C768000000001 */
struct ModelVisTrackDataV22 {
    qword boneToken;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV14 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV14 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV14> uvTransformData ;
};

struct ModelCloudAnimV14 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV14> cloudTrackData ;
};

struct ModelMatConstAnimV14 {
    dword matIndex;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV14 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV14> lightTrackData ;
};

struct ModelAnimPropertyDataV14 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV14 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelAnimationDataV22 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV22> visTrackData ;
    helpers::Array<ModelUVAnimationV14> uvAnimData ;
    helpers::Array<ModelCloudAnimV14> cloudAnim ;
    helpers::Array<ModelMatConstAnimV14> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV14> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV14> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV14> tokenMapAnims ;
};

struct ModelCompoundAnimationDataV14 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV22 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV14 {
    helpers::PtrStruct<ModelAnimationDataV22> animations ;
    helpers::Array<ModelCompoundAnimationDataV14> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV22> imports ;
};

typedef ModelFileAnimationBankV14 Gw2StructANIM;

/* Version: 13, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV21 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV13 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV13 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV13> uvTransformData ;
};

struct ModelCloudAnimV13 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV13> cloudTrackData ;
};

struct ModelMatConstAnimV13 {
    dword matIndex;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV13 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV13> lightTrackData ;
};

struct ModelAnimPropertyDataV13 {
    qword id;
    dword type;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV13 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelAnimationDataV21 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV21> visTrackData ;
    helpers::Array<ModelUVAnimationV13> uvAnimData ;
    helpers::Array<ModelCloudAnimV13> cloudAnim ;
    helpers::Array<ModelMatConstAnimV13> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV13> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV13> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV13> tokenMapAnims ;
};

struct ModelCompoundAnimationDataV13 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV21 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV13 {
    helpers::PtrStruct<ModelAnimationDataV21> animations ;
    helpers::Array<ModelCompoundAnimationDataV13> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV21> imports ;
};

typedef ModelFileAnimationBankV13 Gw2StructANIM;

/* Version: 12, ReferencedFunction: 0x410C75A000000001 */
struct ModelVisTrackDataV20 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV12 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV12 {
    dword uvAnimId;
    helpers::Array<ModelTrackTypeDataV12> uvTransformData ;
};

struct ModelCloudAnimV12 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV12> cloudTrackData ;
};

struct ModelMatConstAnimV12 {
    dword matIndex;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV12 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV12> lightTrackData ;
};

struct ModelAnimPropertyDataV12 {
    qword id;
    dword type;
    qword val;
    helpers::FileName strVal;
};

struct ModelTokenMapAnimV12 {
    qword linkToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelAnimationDataV20 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV20> visTrackData ;
    helpers::Array<ModelUVAnimationV12> uvAnimData ;
    helpers::Array<ModelCloudAnimV12> cloudAnim ;
    helpers::Array<ModelMatConstAnimV12> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV12> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV12> properties ;
    float3 center;
    float radius;
    helpers::Array<ModelTokenMapAnimV12> tokenMapAnims ;
};

struct ModelCompoundAnimationDataV12 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV20 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV12 {
    helpers::PtrStruct<ModelAnimationDataV20> animations ;
    helpers::Array<ModelCompoundAnimationDataV12> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV20> imports ;
};

typedef ModelFileAnimationBankV12 Gw2StructANIM;

/* Version: 11, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV19 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV11 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV11 {
    byte uvAnimId;
    helpers::Array<ModelTrackTypeDataV11> uvTransformData ;
};

struct ModelCloudAnimV11 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV11> cloudTrackData ;
};

struct ModelMatConstAnimV11 {
    dword matIndex;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV11 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV11> lightTrackData ;
};

struct ModelAnimPropertyDataV11 {
    qword id;
    dword type;
    qword val;
    helpers::FileName strVal;
};

struct ModelAnimationDataV19 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV19> visTrackData ;
    helpers::Array<ModelUVAnimationV11> uvAnimData ;
    helpers::Array<ModelCloudAnimV11> cloudAnim ;
    helpers::Array<ModelMatConstAnimV11> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV11> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV11> properties ;
    float3 center;
    float radius;
};

struct ModelCompoundAnimationDataV11 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV19 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV11 {
    helpers::PtrStruct<ModelAnimationDataV19> animations ;
    helpers::Array<ModelCompoundAnimationDataV11> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV19> imports ;
};

typedef ModelFileAnimationBankV11 Gw2StructANIM;

/* Version: 10, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV18 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV10 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV10 {
    byte uvAnimId;
    helpers::Array<ModelTrackTypeDataV10> uvTransformData ;
};

struct ModelCloudAnimV10 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV10> cloudTrackData ;
};

struct ModelMatConstAnimV10 {
    dword matIndex;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV10 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV10> lightTrackData ;
};

struct ModelAnimPropertyDataV10 {
    qword id;
    dword type;
    qword val;
    helpers::FileName strVal;
};

struct ModelAnimationDataV18 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV18> visTrackData ;
    helpers::Array<ModelUVAnimationV10> uvAnimData ;
    helpers::Array<ModelCloudAnimV10> cloudAnim ;
    helpers::Array<ModelMatConstAnimV10> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV10> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
    helpers::Array<ModelAnimPropertyDataV10> properties ;
};

struct ModelCompoundAnimationDataV10 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV18 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV10 {
    helpers::PtrStruct<ModelAnimationDataV18> animations ;
    helpers::Array<ModelCompoundAnimationDataV10> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV18> imports ;
};

typedef ModelFileAnimationBankV10 Gw2StructANIM;

/* Version: 9, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV17 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV9 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelUVAnimationV9 {
    byte uvAnimId;
    helpers::Array<ModelTrackTypeDataV9> uvTransformData ;
};

struct ModelCloudAnimV9 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV9> cloudTrackData ;
};

struct ModelMatConstAnimV9 {
    dword matIndex;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
    float4 initialValue;
};

struct ModelLightAnimationV9 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV9> lightTrackData ;
};

struct ModelAnimationDataV17 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV17> visTrackData ;
    helpers::Array<ModelUVAnimationV9> uvAnimData ;
    helpers::Array<ModelCloudAnimV9> cloudAnim ;
    helpers::Array<ModelMatConstAnimV9> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV9> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
};

struct ModelCompoundAnimationDataV9 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV17 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV9 {
    helpers::PtrStruct<ModelAnimationDataV17> animations ;
    helpers::Array<ModelCompoundAnimationDataV9> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV17> imports ;
};

typedef ModelFileAnimationBankV9 Gw2StructANIM;

/* Version: 8, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV16 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV8 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
};

struct ModelUVAnimationV8 {
    byte uvAnimId;
    helpers::Array<ModelTrackTypeDataV8> uvTransformData ;
};

struct ModelCloudAnimV8 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV8> cloudTrackData ;
};

struct ModelMatConstAnimV8 {
    dword matIndex;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
};

struct ModelLightAnimationV8 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV8> lightTrackData ;
};

struct ModelAnimationDataV16 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV16> visTrackData ;
    helpers::Array<ModelUVAnimationV8> uvAnimData ;
    helpers::Array<ModelCloudAnimV8> cloudAnim ;
    helpers::Array<ModelMatConstAnimV8> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV8> lightAnimData ;
    dword isAdditive;
    dword variantCount;
    dword variantIndices[3];
};

struct ModelCompoundAnimationDataV8 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV16 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV8 {
    helpers::PtrStruct<ModelAnimationDataV16> animations ;
    helpers::Array<ModelCompoundAnimationDataV8> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV16> imports ;
};

typedef ModelFileAnimationBankV8 Gw2StructANIM;

/* Version: 7, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV15 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV7 {
    byte type;
    dword trackGroupIndex;
    dword vectorTrackIndex;
};

struct ModelUVAnimationV7 {
    byte uvAnimId;
    helpers::Array<ModelTrackTypeDataV7> uvTransformData ;
};

struct ModelCloudAnimV7 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV7> cloudTrackData ;
};

struct ModelMatConstAnimV7 {
    dword matIndex;
    dword constToken;
    dword trackGroupIndex;
    dword vectorTrackIndex;
};

struct ModelLightAnimationV7 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV7> lightTrackData ;
};

struct ModelAnimationDataV15 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV15> visTrackData ;
    helpers::Array<ModelUVAnimationV7> uvAnimData ;
    helpers::Array<ModelCloudAnimV7> cloudAnim ;
    helpers::Array<ModelMatConstAnimV7> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV7> lightAnimData ;
    dword isAdditive;
};

struct ModelCompoundAnimationDataV7 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV15 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV7 {
    helpers::PtrStruct<ModelAnimationDataV15> animations ;
    helpers::Array<ModelCompoundAnimationDataV7> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV15> imports ;
};

typedef ModelFileAnimationBankV7 Gw2StructANIM;

/* Version: 6, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV14 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV6 {
    byte type;
    dword vectorTrackIndex;
};

struct ModelUVAnimationV6 {
    byte uvAnimId;
    helpers::Array<ModelTrackTypeDataV6> uvTransformData ;
};

struct ModelCloudAnimV6 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV6> cloudTrackData ;
};

struct ModelMatConstAnimV6 {
    dword matIndex;
    dword constToken;
    dword vectorTrackIndex;
};

struct ModelLightAnimationV6 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV6> lightTrackData ;
};

struct ModelAnimationDataV14 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV14> visTrackData ;
    helpers::Array<ModelUVAnimationV6> uvAnimData ;
    helpers::Array<ModelCloudAnimV6> cloudAnim ;
    helpers::Array<ModelMatConstAnimV6> matConstAnim ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV6> lightAnimData ;
    dword isAdditive;
};

struct ModelCompoundAnimationDataV6 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV14 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV6 {
    helpers::PtrStruct<ModelAnimationDataV14> animations ;
    helpers::Array<ModelCompoundAnimationDataV6> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV14> imports ;
};

typedef ModelFileAnimationBankV6 Gw2StructANIM;

/* Version: 5, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV13 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV5 {
    byte type;
    dword vectorTrackIndex;
};

struct ModelUVAnimationV5 {
    byte uvAnimId;
    helpers::Array<ModelTrackTypeDataV5> uvTransformData ;
};

struct ModelLightAnimationV5 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV5> lightTrackData ;
};

struct ModelAnimationDataV13 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV13> visTrackData ;
    helpers::Array<ModelUVAnimationV5> uvAnimData ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV5> lightAnimData ;
    dword isAdditive;
};

struct ModelCompoundAnimationDataV5 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV13 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV5 {
    helpers::PtrStruct<ModelAnimationDataV13> animations ;
    helpers::Array<ModelCompoundAnimationDataV5> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV13> imports ;
};

typedef ModelFileAnimationBankV5 Gw2StructANIM;

/* Version: 4, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV12 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV4 {
    byte type;
    dword vectorTrackIndex;
};

struct ModelUVAnimationV4 {
    byte uvAnimId;
    helpers::Array<ModelTrackTypeDataV4> uvTransformData ;
};

struct ModelLightAnimationV4 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV4> lightTrackData ;
};

struct ModelAnimationDataV12 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV12> visTrackData ;
    helpers::Array<ModelUVAnimationV4> uvAnimData ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV4> lightAnimData ;
    dword isAdditive;
};

struct ModelCompoundAnimationDataV4 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV12 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV4 {
    helpers::PtrStruct<ModelAnimationDataV12> animations ;
    helpers::Array<ModelCompoundAnimationDataV4> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV12> imports ;
};

typedef ModelFileAnimationBankV4 Gw2StructANIM;

/* Version: 3, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV11 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelTrackTypeDataV3 {
    byte type;
    dword vectorTrackIndex;
};

struct ModelUVAnimationV3 {
    byte uvAnimId;
    helpers::Array<ModelTrackTypeDataV3> uvTransformData ;
};

struct ModelLightAnimationV3 {
    qword bone;
    helpers::Array<ModelTrackTypeDataV3> lightTrackData ;
};

struct ModelAnimationDataV11 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV11> visTrackData ;
    helpers::Array<ModelUVAnimationV3> uvAnimData ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
    helpers::Array<ModelLightAnimationV3> lightAnimData ;
};

struct ModelCompoundAnimationDataV3 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV11 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV3 {
    helpers::PtrStruct<ModelAnimationDataV11> animations ;
    helpers::Array<ModelCompoundAnimationDataV3> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV11> imports ;
};

typedef ModelFileAnimationBankV3 Gw2StructANIM;

/* Version: 2, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV10 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelUVTransformV2 {
    byte type;
    dword vectorTrackIndex;
};

struct ModelUVAnimationV2 {
    byte uvAnimId;
    helpers::Array<ModelUVTransformV2> uvTransformData ;
};

struct ModelAnimationDataV10 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV10> visTrackData ;
    helpers::Array<ModelUVAnimationV2> uvAnimData ;
    helpers::Array<word> morphTrackGroups ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
};

struct ModelCompoundAnimationDataV2 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV10 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationBankV2 {
    helpers::PtrStruct<ModelAnimationDataV10> animations ;
    helpers::Array<ModelCompoundAnimationDataV2> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV10> imports ;
};

typedef ModelFileAnimationBankV2 Gw2StructANIM;

/* Version: 1, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV9 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelUVTransformV1 {
    byte type;
    dword vectorTrackIndex;
};

struct ModelUVAnimationV1 {
    byte uvAnimId;
    helpers::Array<ModelUVTransformV1> uvTransformData ;
};

struct ModelAnimationDataV9 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV9> visTrackData ;
    helpers::Array<ModelUVAnimationV1> uvAnimData ;
    helpers::Array<float> triggerTimes ;
    helpers::Array<qword> triggerTokens ;
};

struct ModelCompoundAnimationDataV1 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV9 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationV1 {
    helpers::PtrStruct<ModelAnimationDataV9> animations ;
    helpers::Array<ModelCompoundAnimationDataV1> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV9> imports ;
};

typedef ModelFileAnimationV1 Gw2StructANIM;

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelVisTrackDataV8 {
    dword boneIndex;
    helpers::Array<float> keys ;
};

struct ModelUVTransformV0 {
    byte type;
    dword vectorTrackIndex;
};

struct ModelUVAnimationV0 {
    byte uvAnimId;
    helpers::Array<ModelUVTransformV0> uvTransformData ;
};

struct ModelAnimationDataV8 {
    qword token;
    helpers::Array<byte> data ;
    float moveSpeed;
    helpers::Array<ModelVisTrackDataV8> visTrackData ;
    helpers::Array<ModelUVAnimationV0> uvAnimData ;
};

struct ModelCompoundAnimationDataV0 {
    qword token;
    qword start;
    qword loop;
    qword end;
};

struct ModelAnimationImportDataV8 {
    helpers::FileName filename;
    helpers::Array<qword> sequenceTokens ;
};

struct ModelFileAnimationV0 {
    helpers::PtrStruct<ModelAnimationDataV8> animations ;
    helpers::Array<ModelCompoundAnimationDataV0> compoundAnimations ;
    helpers::Array<qword> fallbacks ;
    helpers::Array<ModelAnimationImportDataV8> imports ;
};

typedef ModelFileAnimationV0 Gw2StructANIM;


/* ===============================================
 * Chunk: COLL, versions: 5, strucTab: 0x14203C800
 * ===============================================
 */

/* Version: 4, ReferencedFunction: 0x1 */
struct ModelCollisionKeyFrameV10 {
    float time;
    float3 position;
    float4 orientation;
};

struct ModelCollisionAnimatedObjectV10 {
    helpers::Array<dword> shapeIndices ;
    helpers::Array<ModelCollisionKeyFrameV10> keyFrames ;
};

struct ModelCollisionAnimationV10 {
    qword animation;
    helpers::Array<ModelCollisionAnimatedObjectV10> objects ;
    helpers::Array<float3> targetPoints ;
};

struct ModelCollisionMeshV10 {
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
    helpers::Array<float3> navSeedPoints ;
};

struct ModelCollisionBoxV10 {
    float3 dimensions;
    float3 position;
    float4 rotation;
    byte surface;
};

struct ModelCollisionSphereV10 {
    float radius;
    float3 position;
    byte surface;
};

struct ModelCollisionCapsuleV10 {
    float3 p0;
    float3 p1;
    float radius;
    byte surface;
};

struct ModelCollisionSurfaceV10 {
    helpers::Array<qword> tokens ;
};

struct ModelFileCollisionV10 {
    helpers::Array<ModelCollisionAnimationV10> animations ;
    helpers::Array<ModelCollisionMeshV10> meshes ;
    helpers::Array<ModelCollisionBoxV10> boxes ;
    helpers::Array<ModelCollisionSphereV10> spheres ;
    helpers::Array<ModelCollisionCapsuleV10> capsules ;
    helpers::Array<ModelCollisionSurfaceV10> surfaces ;
};

typedef ModelFileCollisionV10 Gw2StructCOLL;

/* Version: 3, ReferencedFunction: 0x410C868000000001 */
struct ModelCollisionKeyFrameV9 {
    float time;
    float3 position;
    float4 orientation;
};

struct ModelCollisionAnimatedObjectV9 {
    helpers::Array<dword> shapeIndices ;
    helpers::Array<ModelCollisionKeyFrameV9> keyFrames ;
};

struct ModelCollisionAnimationV9 {
    qword animation;
    helpers::Array<ModelCollisionAnimatedObjectV9> objects ;
};

struct ModelCollisionMeshV9 {
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
};

struct ModelCollisionBoxV9 {
    float3 dimensions;
    float3 position;
    float4 rotation;
    byte surface;
};

struct ModelCollisionSphereV9 {
    float radius;
    float3 position;
    byte surface;
};

struct ModelCollisionCapsuleV9 {
    float3 p0;
    float3 p1;
    float radius;
    byte surface;
};

struct ModelCollisionSurfaceV9 {
    helpers::Array<qword> tokens ;
};

struct ModelFileCollisionV9 {
    helpers::Array<ModelCollisionAnimationV9> animations ;
    helpers::Array<ModelCollisionMeshV9> meshes ;
    helpers::Array<ModelCollisionBoxV9> boxes ;
    helpers::Array<ModelCollisionSphereV9> spheres ;
    helpers::Array<ModelCollisionCapsuleV9> capsules ;
    helpers::Array<ModelCollisionSurfaceV9> surfaces ;
};

typedef ModelFileCollisionV9 Gw2StructCOLL;

/* Version: 2, ReferencedFunction: 0x1 */
struct ModelCollisionMeshV8 {
    helpers::Array<qword> animationSequences ;
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
};

struct ModelCollisionCloudV8 {
    qword animationSequence;
    helpers::Array<float3> points ;
    byte surface;
};

struct ModelCollisionCubeV8 {
    float4 transform[3];
    byte surface;
};

struct ModelCollisionSphereV8 {
    float radius;
    float3 position;
    byte surface;
};

struct ModelCollisionCapsuleV8 {
    float3 p0;
    float3 p1;
    float radius;
    byte surface;
};

struct ModelCollisionSurfaceV8 {
    helpers::Array<qword> tokens ;
};

struct ModelFileCollisionV8 {
    helpers::Array<ModelCollisionMeshV8> meshes ;
    helpers::Array<ModelCollisionCloudV8> clouds ;
    helpers::Array<ModelCollisionCubeV8> cubes ;
    helpers::Array<ModelCollisionSphereV8> spheres ;
    helpers::Array<ModelCollisionCapsuleV8> capsules ;
    helpers::Array<ModelCollisionSurfaceV8> surfaces ;
};

typedef ModelFileCollisionV8 Gw2StructCOLL;

/* Version: 1, ReferencedFunction: 0x1 */
struct ModelCollisionMeshV1 {
    helpers::Array<qword> animationSequences ;
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
};

struct ModelCollisionCloudV1 {
    qword animationSequence;
    helpers::Array<float3> points ;
    byte surface;
};

struct ModelCollisionCubeV1 {
    float4 transform[3];
    byte surface;
};

struct ModelCollisionSphereV1 {
    float radius;
    float3 position;
    byte surface;
};

struct ModelCollisionSurfaceV1 {
    helpers::Array<qword> tokens ;
};

struct ModelFileCollisionV1 {
    helpers::Array<ModelCollisionMeshV1> meshes ;
    helpers::Array<ModelCollisionCloudV1> clouds ;
    helpers::Array<ModelCollisionCubeV1> cubes ;
    helpers::Array<ModelCollisionSphereV1> spheres ;
    helpers::Array<ModelCollisionSurfaceV1> surfaces ;
};

typedef ModelFileCollisionV1 Gw2StructCOLL;

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelCollisionMeshV0 {
    qword animationSequence;
    helpers::Array<float3> vertices ;
    helpers::Array<word> indices ;
    helpers::Array<byte> surfaces ;
};

struct ModelCollisionCloudV0 {
    qword animationSequence;
    helpers::Array<float3> points ;
    byte surface;
};

struct ModelCollisionCubeV0 {
    float4 transform[3];
    byte surface;
};

struct ModelCollisionSphereV0 {
    float radius;
    float3 position;
    byte surface;
};

struct ModelCollisionSurfaceV0 {
    helpers::Array<qword> tokens ;
};

struct ModelFileCollisionV0 {
    helpers::Array<ModelCollisionMeshV0> meshes ;
    helpers::Array<ModelCollisionCloudV0> clouds ;
    helpers::Array<ModelCollisionCubeV0> cubes ;
    helpers::Array<ModelCollisionSphereV0> spheres ;
    helpers::Array<ModelCollisionSurfaceV0> surfaces ;
};

typedef ModelFileCollisionV0 Gw2StructCOLL;


/* ===============================================
 * Chunk: GR2S, versions: 5, strucTab: 0x14203C880
 * ===============================================
 */

/* Version: 4, ReferencedFunction: 0x410C9EC000000001 */
struct ModelGr2DataV4 {
    helpers::WString filename;
    dword flags;
    helpers::Array<byte> data ;
};

struct ModelFileGr2sV4 {
    helpers::Array<ModelGr2DataV4> gr2Data ;
};

typedef ModelFileGr2sV4 Gw2StructGR2S;

/* Version: 3, ReferencedFunction: 0x410C998000000001 */
struct ModelGr2DataV3 {
    helpers::WString filename;
    dword flags;
    helpers::Array<byte> data ;
};

struct ModelFileGr2sV3 {
    helpers::Array<ModelGr2DataV3> gr2Data ;
};

typedef ModelFileGr2sV3 Gw2StructGR2S;

/* Version: 2, ReferencedFunction: 0x410C929000000001 */
struct ModelGr2DataV2 {
    helpers::WString filename;
    dword flags;
    helpers::Array<byte> data ;
};

struct ModelFileGr2sV2 {
    helpers::Array<ModelGr2DataV2> gr2Data ;
};

typedef ModelFileGr2sV2 Gw2StructGR2S;

/* Version: 1, ReferencedFunction: 0x1 */
struct ModelGr2DataV1 {
    helpers::WString filename;
    dword flags;
    helpers::Array<byte> data ;
};

struct ModelFileGr2sV1 {
    helpers::Array<ModelGr2DataV1> gr2Data ;
};

typedef ModelFileGr2sV1 Gw2StructGR2S;

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelGr2DataV0 {
    helpers::Array<byte> data ;
};

struct ModelFileGr2sV0 {
    helpers::Array<ModelGr2DataV0> gr2Data ;
};

typedef ModelFileGr2sV0 Gw2StructGR2S;


/* ===============================================
 * Chunk: TOOL, versions: 17, strucTab: 0x14203C900
 * ===============================================
 */

/* Version: 16, ReferencedFunction: 0x410CA8D000000001 */
struct ModelToolCloudV16 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolBlitTextureV16 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV16 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelToolLightningV16 {
    helpers::Array<char_ptr> systemNames ;
    helpers::Array<char_ptr> boltNames ;
    helpers::Array<char_ptr> nodeNames ;
};

struct PackGrannyAnimationTypeV1 {
    helpers::Array<byte> animation ;
    helpers::Array<dword> pointers ;
};

struct ModelToolAnimationV16 {
    qword name;
    helpers::WString filename;
    PackGrannyAnimationTypeV1 data;
};

struct ModelSequenceCompressionInfoV16 {
    qword animToken;
    helpers::WString cmpGroup;
    helpers::WString cmpType;
};

struct ModelFileToolV16 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV16> cloudData ;
    helpers::Array<ModelToolBlitTextureV16> blitTextures ;
    helpers::Ptr<ModelToolStreakV16> streakData ;
    helpers::Ptr<ModelToolLightningV16> lightningData ;
    helpers::Array<qword> permutationTokens ;
    helpers::Array<ModelToolAnimationV16> highLodAnimations ;
    helpers::Array<ModelSequenceCompressionInfoV16> compressionInfos ;
    helpers::String region;
};

typedef ModelFileToolV16 Gw2StructTOOL;

/* Version: 15, ReferencedFunction: 0x1 */
struct ModelToolCloudV15 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolBlitTextureV15 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV15 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelToolLightningV15 {
    helpers::Array<char_ptr> systemNames ;
    helpers::Array<char_ptr> boltNames ;
    helpers::Array<char_ptr> nodeNames ;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelToolAnimationV15 {
    qword name;
    helpers::WString filename;
    PackGrannyAnimationTypeV0 data;
};

struct ModelSequenceCompressionInfoV15 {
    qword animToken;
    helpers::WString cmpGroup;
    helpers::WString cmpType;
};

struct ModelFileToolV15 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV15> cloudData ;
    helpers::Array<ModelToolBlitTextureV15> blitTextures ;
    helpers::Ptr<ModelToolStreakV15> streakData ;
    helpers::Ptr<ModelToolLightningV15> lightningData ;
    helpers::Array<qword> permutationTokens ;
    helpers::Array<ModelToolAnimationV15> highLodAnimations ;
    helpers::Array<ModelSequenceCompressionInfoV15> compressionInfos ;
    helpers::String region;
};

typedef ModelFileToolV15 Gw2StructTOOL;

/* Version: 14, ReferencedFunction: 0x1 */
struct ModelToolCloudV14 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolBlitTextureV14 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV14 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelToolLightningV14 {
    helpers::Array<char_ptr> systemNames ;
    helpers::Array<char_ptr> boltNames ;
    helpers::Array<char_ptr> nodeNames ;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelToolAnimationV14 {
    qword name;
    helpers::WString filename;
    PackGrannyAnimationTypeV0 data;
};

struct ModelSequenceCompressionInfoV14 {
    qword animToken;
    helpers::WString cmpGroup;
    helpers::WString cmpType;
};

struct ModelFileToolV14 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV14> cloudData ;
    helpers::Array<ModelToolBlitTextureV14> blitTextures ;
    helpers::Ptr<ModelToolStreakV14> streakData ;
    helpers::Ptr<ModelToolLightningV14> lightningData ;
    helpers::Array<qword> permutationTokens ;
    helpers::Array<ModelToolAnimationV14> highLodAnimations ;
    helpers::Array<ModelSequenceCompressionInfoV14> compressionInfos ;
};

typedef ModelFileToolV14 Gw2StructTOOL;

/* Version: 13, ReferencedFunction: 0x1 */
struct ModelToolCloudV13 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolBlitTextureV13 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV13 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelToolLightningV13 {
    helpers::Array<char_ptr> systemNames ;
    helpers::Array<char_ptr> boltNames ;
    helpers::Array<char_ptr> nodeNames ;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelToolAnimationV13 {
    qword name;
    helpers::WString filename;
    PackGrannyAnimationTypeV0 data;
};

struct ModelFileToolV13 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV13> cloudData ;
    helpers::Array<ModelToolBlitTextureV13> blitTextures ;
    helpers::Ptr<ModelToolStreakV13> streakData ;
    helpers::Ptr<ModelToolLightningV13> lightningData ;
    helpers::Array<qword> permutationTokens ;
    helpers::Array<ModelToolAnimationV13> highLodAnimations ;
};

typedef ModelFileToolV13 Gw2StructTOOL;

/* Version: 12, ReferencedFunction: 0x1 */
struct ModelToolCloudV12 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolBlitTextureV12 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV12 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelToolLightningV12 {
    helpers::Array<char_ptr> systemNames ;
    helpers::Array<char_ptr> boltNames ;
    helpers::Array<char_ptr> nodeNames ;
};

struct PackGrannyAnimationTypeV0 {
    helpers::Array<byte> animation ;
};

struct ModelToolAnimationV12 {
    qword name;
    helpers::WString filename;
    PackGrannyAnimationTypeV0 data;
};

struct ModelFileToolV12 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV12> cloudData ;
    helpers::Array<ModelToolBlitTextureV12> blitTextures ;
    helpers::Ptr<ModelToolStreakV12> streakData ;
    helpers::Ptr<ModelToolLightningV12> lightningData ;
    helpers::Array<qword> permutationTokens ;
    helpers::Array<ModelToolAnimationV12> highLodAnimations ;
};

typedef ModelFileToolV12 Gw2StructTOOL;

/* Version: 11, ReferencedFunction: 0x410CA8C000000001 */
struct ModelToolCloudV11 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolBlitTextureV11 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV11 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelToolLightningV11 {
    helpers::Array<char_ptr> systemNames ;
    helpers::Array<char_ptr> boltNames ;
    helpers::Array<char_ptr> nodeNames ;
};

struct ModelFileToolV11 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV11> cloudData ;
    helpers::Array<ModelToolBlitTextureV11> blitTextures ;
    helpers::Ptr<ModelToolStreakV11> streakData ;
    helpers::Ptr<ModelToolLightningV11> lightningData ;
    helpers::Array<qword> permutationTokens ;
};

typedef ModelFileToolV11 Gw2StructTOOL;

/* Version: 10, ReferencedFunction: 0x410CAA7000000001 */
struct ModelToolCloudV10 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolBlitTextureV10 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV10 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelToolLightningV10 {
    helpers::Array<char_ptr> systemNames ;
    helpers::Array<char_ptr> boltNames ;
    helpers::Array<char_ptr> nodeNames ;
};

struct ModelFileToolV10 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV10> cloudData ;
    helpers::Array<ModelToolBlitTextureV10> blitTextures ;
    helpers::Ptr<ModelToolStreakV10> streakData ;
    helpers::Ptr<ModelToolLightningV10> lightningData ;
    helpers::Array<qword> permutationTokens ;
};

typedef ModelFileToolV10 Gw2StructTOOL;

/* Version: 9, ReferencedFunction: 0x1 */
struct ModelToolCloudV9 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolBlitTextureV9 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV9 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelToolLightningV9 {
    helpers::Array<char_ptr> systemNames ;
    helpers::Array<char_ptr> boltNames ;
    helpers::Array<char_ptr> nodeNames ;
};

struct ModelToolPropertyDataV9 {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelFileToolV9 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV9> cloudData ;
    helpers::Array<ModelToolBlitTextureV9> blitTextures ;
    helpers::Ptr<ModelToolStreakV9> streakData ;
    helpers::Ptr<ModelToolLightningV9> lightningData ;
    helpers::Array<qword> permutationTokens ;
    helpers::Array<ModelToolPropertyDataV9> properties ;
};

typedef ModelFileToolV9 Gw2StructTOOL;

/* Version: 8, ReferencedFunction: 0x1 */
struct ModelToolCloudV8 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolBlitTextureV8 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV8 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelToolLightningV8 {
    helpers::Array<char_ptr> systemNames ;
    helpers::Array<char_ptr> boltNames ;
    helpers::Array<char_ptr> nodeNames ;
};

struct ModelFileToolV8 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV8> cloudData ;
    helpers::Array<ModelToolBlitTextureV8> blitTextures ;
    helpers::Ptr<ModelToolStreakV8> streakData ;
    helpers::Ptr<ModelToolLightningV8> lightningData ;
    helpers::Array<qword> permutationTokens ;
};

typedef ModelFileToolV8 Gw2StructTOOL;

/* Version: 7, ReferencedFunction: 0x1 */
struct ModelToolCloudV7 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolBlitTextureV7 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV7 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelToolLightningV7 {
    helpers::Array<char_ptr> systemNames ;
    helpers::Array<char_ptr> boltNames ;
    helpers::Array<char_ptr> nodeNames ;
};

struct ModelFileToolV7 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV7> cloudData ;
    helpers::Array<ModelToolBlitTextureV7> blitTextures ;
    helpers::Ptr<ModelToolStreakV7> streakData ;
    helpers::Ptr<ModelToolLightningV7> lightningData ;
};

typedef ModelFileToolV7 Gw2StructTOOL;

/* Version: 6, ReferencedFunction: 0x410CAA1000000001 */
struct ModelToolCloudV6 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolBlitTextureV6 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV6 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelFileToolV6 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV6> cloudData ;
    helpers::Array<ModelToolBlitTextureV6> blitTextures ;
    helpers::Ptr<ModelToolStreakV6> streakData ;
};

typedef ModelFileToolV6 Gw2StructTOOL;

/* Version: 5, ReferencedFunction: 0x410CA9E000000001 */
struct ModelToolCloudV5 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
};

struct ModelToolMotionV5 {
    qword sequence;
    helpers::Array<float> keys ;
    helpers::Array<float3> values ;
};

struct ModelToolBlitTextureV5 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV5 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelFileToolV5 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Array<char_ptr> obstacleNames ;
    helpers::Ptr<ModelToolCloudV5> cloudData ;
    helpers::Array<ModelToolMotionV5> motions ;
    helpers::Array<ModelToolBlitTextureV5> blitTextures ;
    helpers::Ptr<ModelToolStreakV5> streakData ;
};

typedef ModelFileToolV5 Gw2StructTOOL;

/* Version: 4, ReferencedFunction: 0x1 */
struct ModelToolCloudV4 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
    helpers::Array<char_ptr> obstacleNames ;
};

struct ModelToolMotionV4 {
    qword sequence;
    helpers::Array<float> keys ;
    helpers::Array<float3> values ;
};

struct ModelToolBlitTextureV4 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelToolStreakV4 {
    helpers::Array<char_ptr> streakNames ;
    helpers::Array<char_ptr> anchorNames ;
};

struct ModelFileToolV4 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Ptr<ModelToolCloudV4> cloudData ;
    helpers::Array<ModelToolMotionV4> motions ;
    helpers::Array<ModelToolBlitTextureV4> blitTextures ;
    helpers::Ptr<ModelToolStreakV4> streakData ;
};

typedef ModelFileToolV4 Gw2StructTOOL;

/* Version: 3, ReferencedFunction: 0x1 */
struct ModelToolCloudV3 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
    helpers::Array<char_ptr> obstacleNames ;
};

struct ModelToolMotionV3 {
    qword sequence;
    helpers::Array<float> keys ;
    helpers::Array<float3> values ;
};

struct ModelToolBlitTextureV3 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelFileToolV3 {
    qword modelType;
    helpers::Array<char_ptr> materialNames ;
    helpers::Ptr<ModelToolCloudV3> cloudData ;
    helpers::Array<ModelToolMotionV3> motions ;
    helpers::Array<ModelToolBlitTextureV3> blitTextures ;
};

typedef ModelFileToolV3 Gw2StructTOOL;

/* Version: 2, ReferencedFunction: 0x1 */
struct ModelToolCloudV2 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
    helpers::Array<char_ptr> obstacleNames ;
};

struct ModelToolMotionV2 {
    qword sequence;
    helpers::Array<float> keys ;
    helpers::Array<float3> values ;
};

struct ModelToolBlitTextureV2 {
    qword blitId;
    helpers::FileName filename;
};

struct ModelFileToolV2 {
    helpers::Array<char_ptr> materialNames ;
    helpers::Ptr<ModelToolCloudV2> cloudData ;
    helpers::Array<ModelToolMotionV2> motions ;
    helpers::Array<ModelToolBlitTextureV2> blitTextures ;
};

typedef ModelFileToolV2 Gw2StructTOOL;

/* Version: 1, ReferencedFunction: 0x1 */
struct ModelToolCloudV1 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
    helpers::Array<char_ptr> obstacleNames ;
};

struct ModelToolMotionV1 {
    qword sequence;
    helpers::Array<float> keys ;
    helpers::Array<float3> values ;
};

struct ModelFileToolV1 {
    helpers::Array<char_ptr> materialNames ;
    helpers::Ptr<ModelToolCloudV1> cloudData ;
    helpers::Array<ModelToolMotionV1> motions ;
};

typedef ModelFileToolV1 Gw2StructTOOL;

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelToolCloudV0 {
    helpers::Array<char_ptr> cloudNames ;
    helpers::Array<char_ptr> emitterNames ;
    helpers::Array<char_ptr> obstacleNames ;
};

struct ModelFileToolV0 {
    helpers::Array<char_ptr> materialNames ;
    helpers::Ptr<ModelToolCloudV0> cloudData ;
};

typedef ModelFileToolV0 Gw2StructTOOL;


/* ===============================================
 * Chunk: ROOT, versions: 2, strucTab: 0x14203CA98
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x410CA48000000001 */
struct ModelRootMotionV1 {
    qword sequence;
    helpers::Array<float> keys ;
    helpers::Array<float3> posValues ;
    helpers::Array<float4> quatValues ;
};

struct ModelFileRootMotionV1 {
    helpers::Array<ModelRootMotionV1> rootMotions ;
};

typedef ModelFileRootMotionV1 Gw2StructROOT;

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelRootMotionV0 {
    qword sequence;
    helpers::Array<float> keys ;
    helpers::Array<float3> values ;
};

struct ModelFileRootMotionV0 {
    helpers::Array<ModelRootMotionV0> rootMotions ;
};

typedef ModelFileRootMotionV0 Gw2StructROOT;


/* ===============================================
 * Chunk: GAME, versions: 1, strucTab: 0x14203CAC8
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelFileGame {
    helpers::Array<byte> gameData ;
};

typedef ModelFileGame Gw2StructGAME;


/* ===============================================
 * Chunk: ICON, versions: 1, strucTab: 0x14203CAE0
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelFileIcon {
    helpers::Array<byte> jpgData ;
};

typedef ModelFileIcon Gw2StructICON;


/* ===============================================
 * Chunk: SKEL, versions: 2, strucTab: 0x14203CAF8
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x410CA4D000000001 */
struct ModelTransformData {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneData {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformData LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelGrannySkeletonV1 {
    helpers::String Name;
    helpers::Array<ModelBoneData> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingData {
    helpers::Ptr<byte> Mesh ;
};

struct ModelGrannyModelV1 {
    helpers::String Name;
    helpers::Ptr<ModelGrannySkeletonV1> Skeleton ;
    ModelTransformData InitialPlacement;
    helpers::Array<ModelMeshBindingData> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelBoneConstraintLinkV63 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV63 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV63> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct PackGrannyMirrorSpecType {
    helpers::Array<byte> mirrorSpec ;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV63 {
    PackGrannyTrackMaskType data;
    qword token;
};

struct ModelSkeletonDataV63 {
    helpers::Ptr<ModelGrannyModelV1> grannyModel ;
    helpers::Array<ModelBoneConstraintV63> boneConstraints ;
    helpers::Array<dword> boneFlags ;
    PackGrannyMirrorSpecType mirrorSpec;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV63> trackMasks ;
};

struct ModelSkeletonOverridesV1 {
    helpers::Array<ModelBoneConstraintV63> boneConstraints ;
};

struct ModelFileSkeletonV1 {
    helpers::Ptr<ModelSkeletonDataV63> skeletonData ;
    helpers::FileName fileReference;
    helpers::Ptr<ModelSkeletonOverridesV1> overrides ;
};

typedef ModelFileSkeletonV1 Gw2StructSKEL;

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelTransformData {
    dword Flags;
    float3 Position;
    float4 Orientation;
    float3 ScaleShear[3];
};

struct ModelBoneData {
    helpers::String Name;
    dword ParentIndex;
    ModelTransformData LocalTransform;
    float4 InverseWorld4x4[4];
    float LODError;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelGrannySkeletonV0 {
    helpers::String Name;
    helpers::Array<ModelBoneData> Bones ;
    dword LODType;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelMeshBindingData {
    helpers::Ptr<byte> Mesh ;
};

struct ModelGrannyModelV0 {
    helpers::String Name;
    helpers::Ptr<ModelGrannySkeletonV0> Skeleton ;
    ModelTransformData InitialPlacement;
    helpers::Array<ModelMeshBindingData> MeshBindings ;
    helpers::Ptr<byte> ExtendedData.Type ;
    helpers::Ptr<byte> ExtendedData.Object ;
};

struct ModelBoneConstraintLinkV62 {
    float angle;
    float azimuth;
    float2 distance;
    qword token;
};

struct ModelBoneConstraintV62 {
    qword token;
    word flags;
    float twistOffset;
    float animBlend;
    float drag;
    float ellipseRatio;
    float gravity;
    float collisionRadius;
    float wind;
    float2 angle;
    float angleStrength;
    byte angleType;
    float2 distanceInner;
    float distanceInnerStrength;
    byte distanceInnerType;
    helpers::Array<ModelBoneConstraintLinkV62> links ;
    float2 distanceOuter;
    float distanceOuterStrength;
    byte distanceOuterType;
    float2 twist;
    float twistStrength;
    byte twistType;
};

struct ModelBoneSymmetryV62 {
    qword boneLeft;
    qword boneRight;
};

struct PackGrannyTrackMaskType {
    helpers::Array<byte> trackMask ;
};

struct ModelTrackMaskV62 {
    PackGrannyTrackMaskType data;
    qword token;
};

struct ModelSkeletonDataV62 {
    helpers::Ptr<ModelGrannyModelV0> grannyModel ;
    helpers::Array<ModelBoneConstraintV62> boneConstraints ;
    helpers::Array<dword> boneFlags ;
    helpers::Array<ModelBoneSymmetryV62> boneSymmetries ;
    helpers::Array<dword> emitterBones ;
    helpers::Array<ModelTrackMaskV62> trackMasks ;
};

struct ModelFileSkeletonV0 {
    helpers::Ptr<ModelSkeletonDataV62> skeletonData ;
    helpers::FileName fileReference;
};

typedef ModelFileSkeletonV0 Gw2StructSKEL;


/* ===============================================
 * Chunk: PRPS, versions: 1, strucTab: 0x14203CB28
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelFixedOffsetData {
    qword name;
    qword parentBone;
    float3 translation;
};

struct ModelPropertyData {
    qword id;
    dword type;
    dword mergeIndex;
    float time;
    qword val;
    helpers::FileName strVal;
};

struct ModelFileProperties {
    helpers::Array<ModelFixedOffsetData> fixedOffsetData ;
    helpers::Array<ModelPropertyData> properties ;
};

typedef ModelFileProperties Gw2StructPRPS;


/* ===============================================
 * Chunk: GEOM, versions: 2, strucTab: 0x14203CB40
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x410C8EF000000001 */
struct ModelMeshMorphVertV66 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV66 {
    helpers::Array<ModelMeshMorphVertV66> positions ;
    helpers::Array<ModelMeshMorphVertV66> normals ;
    qword mesh;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelMeshVertexDataV1 {
    dword vertexCount;
    PackVertexType mesh;
};

struct ModelMeshIndexDataV1 {
    helpers::Array<word> indices ;
};

struct ModelMeshGeometryV1 {
    ModelMeshVertexDataV1 verts;
    ModelMeshIndexDataV1 indices;
    helpers::Array<ModelMeshIndexDataV1> lods ;
    helpers::Array<dword> transforms ;
};

struct ModelMeshDataV66 {
    qword visBone;
    helpers::Array<ModelMeshMorphTargetV66> morphTargets ;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
    helpers::Array<qword> boneBindings ;
    helpers::Ptr<ModelMeshGeometryV1> geometry ;
};

struct ModelFileGeometryV1 {
    helpers::PtrStruct<ModelMeshDataV66> meshes ;
};

typedef ModelFileGeometryV1 Gw2StructGEOM;

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelMeshMorphVertV65 {
    word index;
    float3 vector;
};

struct ModelMeshMorphTargetV65 {
    helpers::Array<ModelMeshMorphVertV65> positions ;
    helpers::Array<ModelMeshMorphVertV65> normals ;
    qword mesh;
};

struct GrBoundData {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
};

struct PackVertexType {
    dword fvf;
    helpers::Array<byte> vertices ;
};

struct ModelMeshVertexDataV0 {
    dword vertexCount;
    PackVertexType mesh;
};

struct ModelMeshIndexDataV0 {
    helpers::Array<word> indices ;
};

struct ModelMeshGeometryV0 {
    ModelMeshVertexDataV0 verts;
    ModelMeshIndexDataV0 indices;
    helpers::Array<ModelMeshIndexDataV0> lods ;
};

struct ModelMeshDataV65 {
    qword visBone;
    helpers::Array<ModelMeshMorphTargetV65> morphTargets ;
    dword flags;
    helpers::Array<dword> seamVertIndices ;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    helpers::Array<GrBoundData> bounds ;
    dword materialIndex;
    helpers::String materialName;
    helpers::Array<char_ptr> boneNames ;
    helpers::Ptr<ModelMeshGeometryV0> geometry ;
};

struct ModelFileGeometryV0 {
    helpers::PtrStruct<ModelMeshDataV65> meshes ;
};

typedef ModelFileGeometryV0 Gw2StructGEOM;


/* ===============================================
 * Chunk: EXPA, versions: 4, strucTab: 0x14203CB70
 * ===============================================
 */

/* Version: 3, ReferencedFunction: 0x1 */
struct ModelFileSnapPointV3 {
    qword bone;
    qword shape;
    dword flags;
};

struct ModelExpansionEmitterV3 {
    float curl;
    float vortexSize;
    dword curlQuality;
    dword curlFlags;
    float fieldScale;
};

struct ModelFileExpansionV3 {
    helpers::Array<ModelFileSnapPointV3> snapPoints ;
    float snapPointPriority;
    helpers::Array<ModelExpansionEmitterV3> emitters ;
};

typedef ModelFileExpansionV3 Gw2StructEXPA;

/* Version: 2, ReferencedFunction: 0x1 */
struct ModelFileSnapPointV2 {
    qword bone;
    qword shape;
};

struct ModelExpansionEmitterV2 {
    float curl;
    float vortexSize;
    dword curlQuality;
    dword curlFlags;
    float fieldScale;
};

struct ModelFileExpansionV2 {
    helpers::Array<ModelFileSnapPointV2> snapPoints ;
    float snapPointPriority;
    helpers::Array<ModelExpansionEmitterV2> emitters ;
};

typedef ModelFileExpansionV2 Gw2StructEXPA;

/* Version: 1, ReferencedFunction: 0x1 */
struct ModelFileSnapPointV1 {
    qword bone;
};

struct ModelExpansionEmitterV1 {
    float curl;
    float vortexSize;
    dword curlQuality;
    dword curlFlags;
    float fieldScale;
};

struct ModelFileExpansionV1 {
    helpers::Array<ModelFileSnapPointV1> snapPoints ;
    float snapPointPriority;
    helpers::Array<ModelExpansionEmitterV1> emitters ;
};

typedef ModelFileExpansionV1 Gw2StructEXPA;

/* Version: 0, ReferencedFunction: 0x1 */
struct ModelFileSnapPointV0 {
    qword bone;
};

struct ModelExpansionEmitterV0 {
    float curl;
    float vortexSize;
};

struct ModelFileExpansionV0 {
    helpers::Array<ModelFileSnapPointV0> snapPoints ;
    float snapPointPriority;
    helpers::Array<ModelExpansionEmitterV0> emitters ;
};

typedef ModelFileExpansionV0 Gw2StructEXPA;


/* ===============================================
 * Chunk: PHYS, versions: 9, strucTab: 0x142155B60
 * ===============================================
 */

/* Version: 8, ReferencedFunction: 0x1 */
struct SceneBoxShapeV8 {
    float3 dimensions;
    float3 position;
    float4 rotation;
};

struct SceneSphereShapeV8 {
    float3 center;
    float radius;
};

struct SceneCapsuleShapeV8 {
    float3 p0;
    float3 p1;
    float radius;
};

struct SceneMeshShapeV8 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
    helpers::Array<byte> surfaces ;
};

struct SceneSurfaceV8 {
    helpers::Array<qword> tokens ;
};

struct SceneFilePhysicsV8 {
    helpers::Array<SceneBoxShapeV8> boxes ;
    helpers::Array<SceneSphereShapeV8> spheres ;
    helpers::Array<SceneCapsuleShapeV8> capsules ;
    helpers::Array<SceneMeshShapeV8> meshes ;
    helpers::Array<SceneSurfaceV8> surfaces ;
};

typedef SceneFilePhysicsV8 Gw2StructPHYS;

/* Version: 7, ReferencedFunction: 0x1 */
struct SceneBoxShapeV7 {
    float3 dimensions;
    float3 position;
    float4 rotation;
};

struct SceneSphereShapeV7 {
    float3 center;
    float radius;
};

struct SceneCapsuleShapeV7 {
    float3 p0;
    float3 p1;
    float radius;
};

struct SceneMeshShapeV7 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
};

struct SceneFilePhysicsV7 {
    helpers::Array<SceneBoxShapeV7> boxes ;
    helpers::Array<SceneSphereShapeV7> spheres ;
    helpers::Array<SceneCapsuleShapeV7> capsules ;
    helpers::Array<SceneMeshShapeV7> meshes ;
};

typedef SceneFilePhysicsV7 Gw2StructPHYS;

/* Version: 6, ReferencedFunction: 0x1 */
struct SceneShapeSurfaceV6 {
    helpers::Array<qword> tokens ;
};

struct SceneBoxShapeV6 {
    byte surface;
    float3 dimensions;
    float3 position;
    float4 rotation;
};

struct SceneSphereShapeV6 {
    byte surface;
    float3 center;
    float radius;
};

struct SceneCapsuleShapeV6 {
    byte surface;
    float3 p0;
    float3 p1;
    float radius;
};

struct SceneMeshShapeV6 {
    helpers::Array<byte> surfaces ;
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
};

struct SceneCollisionShapeV6 {
    dword shapeIndex;
};

struct SceneTriggerShapeV6 {
    dword shapeIndex;
    dword flags;
};

struct SceneNamedShapeV6 {
    dword shapeIndex;
};

struct SceneFilePhysicsV6 {
    helpers::Array<SceneShapeSurfaceV6> surfaces ;
    helpers::Array<SceneBoxShapeV6> boxes ;
    helpers::Array<SceneSphereShapeV6> spheres ;
    helpers::Array<SceneCapsuleShapeV6> capsules ;
    helpers::Array<SceneMeshShapeV6> meshes ;
    helpers::Array<SceneCollisionShapeV6> collisionShapes ;
    helpers::Array<SceneTriggerShapeV6> triggerShapes ;
    helpers::Array<SceneNamedShapeV6> namedShapes ;
};

typedef SceneFilePhysicsV6 Gw2StructPHYS;

/* Version: 5, ReferencedFunction: 0x1 */
struct SceneShapeSurfaceV5 {
    helpers::Array<qword> tokens ;
};

struct SceneBoxShapeV5 {
    byte surface;
    float3 dimensions;
    float3 position;
    float4 rotation;
};

struct SceneSphereShapeV5 {
    byte surface;
    float3 center;
    float radius;
};

struct SceneMeshShapeV5 {
    helpers::Array<byte> surfaces ;
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
};

struct SceneCollisionShapeV5 {
    dword shapeIndex;
};

struct SceneTriggerShapeV5 {
    dword shapeIndex;
    dword flags;
};

struct SceneNamedShapeV5 {
    dword shapeIndex;
};

struct SceneFilePhysicsV5 {
    helpers::Array<SceneShapeSurfaceV5> surfaces ;
    helpers::Array<SceneBoxShapeV5> boxes ;
    helpers::Array<SceneSphereShapeV5> spheres ;
    helpers::Array<SceneMeshShapeV5> meshes ;
    helpers::Array<SceneCollisionShapeV5> collisionShapes ;
    helpers::Array<SceneTriggerShapeV5> triggerShapes ;
    helpers::Array<SceneNamedShapeV5> namedShapes ;
};

typedef SceneFilePhysicsV5 Gw2StructPHYS;

/* Version: 4, ReferencedFunction: 0x1 */
struct SceneShapeV4 {
    helpers::Array<byte> surfaces ;
};

struct SceneShapeSurfaceV4 {
    helpers::Array<qword> tokens ;
};

struct SceneCollisionShapeV4 {
    dword shapeIndex;
};

struct SceneTriggerShapeV4 {
    dword shapeIndex;
    dword flags;
};

struct SceneNamedShapeV4 {
    dword shapeIndex;
};

struct SceneFilePhysicsV4 {
    helpers::Array<byte> shapeData ;
    helpers::Array<SceneShapeV4> shapes ;
    helpers::Array<SceneShapeSurfaceV4> surfaces ;
    helpers::Array<SceneCollisionShapeV4> collisionShapes ;
    helpers::Array<SceneTriggerShapeV4> triggerShapes ;
    helpers::Array<SceneNamedShapeV4> namedShapes ;
};

typedef SceneFilePhysicsV4 Gw2StructPHYS;

/* Version: 3, ReferencedFunction: 0x1 */
struct SceneShapeV3 {
    helpers::Array<byte> surfaces ;
};

struct SceneShapeSurfaceV3 {
    helpers::Array<qword> tokens ;
};

struct SceneCollisionShapeV3 {
    dword shapeIndex;
};

struct SceneTriggerShapeV3 {
    dword shapeIndex;
    dword flags;
};

struct SceneNamedShapeV3 {
    dword shapeIndex;
};

struct ScenePathPhysicsV3 {
    helpers::Array<float4> pathData ;
};

struct SceneFilePhysicsV3 {
    helpers::Array<byte> shapeData ;
    helpers::Array<SceneShapeV3> shapes ;
    helpers::Array<SceneShapeSurfaceV3> surfaces ;
    helpers::Array<SceneCollisionShapeV3> collisionShapes ;
    helpers::Array<SceneTriggerShapeV3> triggerShapes ;
    helpers::Array<SceneNamedShapeV3> namedShapes ;
    helpers::Array<ScenePathPhysicsV3> paths ;
};

typedef SceneFilePhysicsV3 Gw2StructPHYS;

/* Version: 2, ReferencedFunction: 0x1 */
struct SceneShapeV2 {
    dword shapeOffset;
};

struct SceneCollisionShapeV2 {
    dword shapeIndex;
};

struct SceneQueryShapeV2 {
    dword shapeIndex;
};

struct SceneNamedShapeV2 {
    dword shapeIndex;
};

struct ScenePathPhysicsV2 {
    helpers::Array<float4> pathData ;
};

struct SceneFilePhysicsV2 {
    helpers::Array<byte> shapeData ;
    helpers::Array<SceneShapeV2> shapes ;
    helpers::Array<SceneCollisionShapeV2> collisionShapes ;
    helpers::Array<SceneQueryShapeV2> queryShapes ;
    helpers::Array<SceneNamedShapeV2> namedShapes ;
    helpers::Array<ScenePathPhysicsV2> paths ;
};

typedef SceneFilePhysicsV2 Gw2StructPHYS;

/* Version: 1, ReferencedFunction: 0x1 */
struct SceneShapeV1 {
    dword shapeOffset;
};

struct SceneCollisionShapeV1 {
    dword shapeIndex;
};

struct SceneNamedShapeV1 {
    dword shapeIndex;
};

struct ScenePathPhysicsV1 {
    helpers::Array<float4> pathData ;
};

struct SceneFilePhysicsV1 {
    helpers::Array<byte> shapeData ;
    helpers::Array<SceneShapeV1> shapes ;
    helpers::Array<SceneCollisionShapeV1> collisionShapes ;
    helpers::Array<SceneNamedShapeV1> namedShapes ;
    helpers::Array<ScenePathPhysicsV1> paths ;
};

typedef SceneFilePhysicsV1 Gw2StructPHYS;

/* Version: 0, ReferencedFunction: 0x1 */
struct SceneShapeV0 {
    dword shapeOffset;
};

struct SceneCollisionShapeV0 {
    dword shapeIndex;
};

struct SceneNamedShapeV0 {
    dword shapeIndex;
};

struct SceneFilePhysicsV0 {
    helpers::Array<byte> shapeData ;
    helpers::Array<SceneShapeV0> shapes ;
    helpers::Array<SceneCollisionShapeV0> collisionShapes ;
    helpers::Array<SceneNamedShapeV0> namedShapes ;
};

typedef SceneFilePhysicsV0 Gw2StructPHYS;


/* ===============================================
 * Chunk: ANIM, versions: 3, strucTab: 0x142155C40
 * ===============================================
 */

/* Version: 2, ReferencedFunction: 0x1 */
struct SceneKeyframeV2 {
    float time;
    float3 position;
    float4 rotation;
};

struct SceneMotionV2 {
    helpers::Array<SceneKeyframeV2> keys ;
};

struct SceneActionPointV2 {
    qword name;
    SceneMotionV2 motion;
};

struct SceneAnimationEventV2 {
    qword name;
    float time;
};

struct SceneAnimationV2 {
    qword name;
    SceneMotionV2 motion;
    helpers::Array<SceneActionPointV2> actionPoints ;
    helpers::Array<SceneAnimationEventV2> events ;
};

struct SceneTransformV2 {
    qword name;
    float3 translation;
    float4 rotation;
};

struct ScenePoseV2 {
    qword name;
    helpers::Array<SceneTransformV2> transforms ;
};

struct SceneImportSequenceV2 {
    qword name;
};

struct SceneAnimationImportV2 {
    helpers::FileName filename;
    helpers::Array<SceneImportSequenceV2> animNames ;
    dword flags;
};

struct SceneFileAnimationV2 {
    helpers::Array<SceneAnimationV2> animations ;
    helpers::Array<ScenePoseV2> poses ;
    helpers::Array<SceneAnimationImportV2> imports ;
};

typedef SceneFileAnimationV2 Gw2StructANIM;

/* Version: 1, ReferencedFunction: 0x1 */
struct SceneKeyframeV1 {
    float time;
    float3 position;
    float4 rotation;
};

struct SceneMotionV1 {
    helpers::Array<SceneKeyframeV1> keys ;
};

struct SceneActionPointV1 {
    qword name;
    SceneMotionV1 motion;
};

struct SceneAnimationEventV1 {
    qword name;
    float time;
};

struct SceneAnimationV1 {
    qword name;
    SceneMotionV1 motion;
    helpers::Array<SceneActionPointV1> actionPoints ;
    helpers::Array<SceneAnimationEventV1> events ;
};

struct SceneAnimationImportV1 {
    helpers::FileName filename;
    helpers::Array<qword> animNames ;
};

struct SceneFileAnimationV1 {
    helpers::Array<SceneAnimationV1> animations ;
    helpers::Array<SceneAnimationImportV1> imports ;
};

typedef SceneFileAnimationV1 Gw2StructANIM;

/* Version: 0, ReferencedFunction: 0x1 */
struct SceneKeyframeV0 {
    float time;
    float3 position;
    float4 rotation;
};

struct SceneMotionV0 {
    helpers::Array<SceneKeyframeV0> keys ;
};

struct SceneActionPointV0 {
    qword name;
    SceneMotionV0 motion;
};

struct SceneAnimationV0 {
    qword name;
    SceneMotionV0 motion;
    helpers::Array<SceneActionPointV0> actionPoints ;
};

struct SceneAnimationImportV0 {
    helpers::FileName filename;
    helpers::Array<qword> animNames ;
};

struct SceneFileAnimationV0 {
    helpers::Array<SceneAnimationV0> animations ;
    helpers::Array<SceneAnimationImportV0> imports ;
};

typedef SceneFileAnimationV0 Gw2StructANIM;


/* ===============================================
 * Chunk: GAME, versions: 7, strucTab: 0x142155C90
 * ===============================================
 */

/* Version: 6, ReferencedFunction: 0x1 */
struct ScenePathNodeV6 {
    float3 position;
    float4 rotation;
    dword flags;
    float smoothing;
    byte singlesided;
};

struct ScenePathV6 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV6> points ;
    byte closed;
};

struct SceneEdgeV6 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV6 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV6> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
    helpers::Array<byte> surfaces ;
};

struct SceneGameSurfaceV6 {
    helpers::Array<qword> tokens ;
};

struct SceneFileGameV6 {
    helpers::Array<ScenePathV6> paths ;
    helpers::Array<SceneGameMeshV6> meshes ;
    helpers::Array<SceneGameSurfaceV6> surfaces ;
};

typedef SceneFileGameV6 Gw2StructGAME;

/* Version: 5, ReferencedFunction: 0x1 */
struct ScenePathNodeV5 {
    float3 position;
    float4 rotation;
    float radius;
    dword flags;
    float smoothing;
    byte singlesided;
};

struct ScenePathV5 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV5> points ;
    byte closed;
};

struct SceneEdgeV5 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV5 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV5> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
    helpers::Array<dword> surfaceFlags ;
};

struct SceneFileGameV5 {
    helpers::Array<ScenePathV5> paths ;
    helpers::Array<SceneGameMeshV5> meshes ;
};

typedef SceneFileGameV5 Gw2StructGAME;

/* Version: 4, ReferencedFunction: 0x1 */
struct ScenePathNodeV4 {
    float3 position;
    float4 rotation;
    float radius;
    dword flags;
    float smoothing;
    byte singlesided;
};

struct ScenePathV4 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV4> points ;
    byte closed;
};

struct SceneEdgeV4 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV4 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV4> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
    helpers::Array<dword> surfaceFlags ;
};

struct SceneGrabNodeV4 {
    float3 position;
    float4 rotation;
    float radius;
    dword flags;
    float smoothing;
};

struct SceneFileGameV4 {
    helpers::Array<ScenePathV4> paths ;
    helpers::Array<SceneGameMeshV4> meshes ;
    helpers::Array<SceneGrabNodeV4> grabPoints ;
};

typedef SceneFileGameV4 Gw2StructGAME;

/* Version: 3, ReferencedFunction: 0x1 */
struct ScenePathNodeV3 {
    float3 position;
    float4 rotation;
    float radius;
    dword flags;
    float smoothing;
};

struct ScenePathV3 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV3> points ;
    byte closed;
};

struct SceneEdgeV3 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV3 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV3> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
    helpers::Array<dword> surfaceFlags ;
};

struct SceneGrabNodeV3 {
    float3 position;
    float4 rotation;
    float radius;
    dword flags;
    float smoothing;
};

struct SceneFileGameV3 {
    helpers::Array<ScenePathV3> paths ;
    helpers::Array<SceneGameMeshV3> meshes ;
    helpers::Array<SceneGrabNodeV3> grabPoints ;
};

typedef SceneFileGameV3 Gw2StructGAME;

/* Version: 2, ReferencedFunction: 0x1 */
struct ScenePathNodeV2 {
    float3 position;
    float4 rotation;
    float radius;
    dword flags;
    float smoothing;
};

struct ScenePathV2 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV2> points ;
    byte closed;
};

struct SceneEdgeV2 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV2 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV2> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
};

struct SceneGrabNodeV2 {
    float3 position;
    float4 rotation;
    float radius;
    dword flags;
    float smoothing;
};

struct SceneFileGameV2 {
    helpers::Array<ScenePathV2> paths ;
    helpers::Array<SceneGameMeshV2> meshes ;
    helpers::Array<SceneGrabNodeV2> grabPoints ;
};

typedef SceneFileGameV2 Gw2StructGAME;

/* Version: 1, ReferencedFunction: 0x1 */
struct ScenePathNodeV1 {
    float3 position;
    float4 rotation;
    float radius;
    dword flags;
    float smoothing;
};

struct ScenePathV1 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV1> points ;
    byte closed;
};

struct SceneEdgeV1 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV1 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV1> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
};

struct SceneFileGameV1 {
    helpers::Array<ScenePathV1> paths ;
    helpers::Array<SceneGameMeshV1> meshes ;
};

typedef SceneFileGameV1 Gw2StructGAME;

/* Version: 0, ReferencedFunction: 0x1 */
struct ScenePathNodeV0 {
    float3 position;
    float4 rotation;
    float radius;
    dword flags;
};

struct ScenePathV0 {
    helpers::Array<qword> properties ;
    helpers::Array<ScenePathNodeV0> points ;
    byte closed;
};

struct SceneEdgeV0 {
    dword indices[2];
    helpers::Array<dword> triangles ;
};

struct SceneGameMeshV0 {
    helpers::Array<word> indices ;
    helpers::Array<float3> vertices ;
    helpers::Array<SceneEdgeV0> edges ;
    float4 moppInfo;
    helpers::Array<byte> moppBytes ;
};

struct SceneFileGameV0 {
    helpers::Array<ScenePathV0> paths ;
    helpers::Array<SceneGameMeshV0> meshes ;
};

typedef SceneFileGameV0 Gw2StructGAME;


/* ===============================================
 * Chunk: SKEL, versions: 4, strucTab: 0x142155D40
 * ===============================================
 */

/* Version: 3, ReferencedFunction: 0x1 */
struct SceneBoneV3 {
    float3 vertexA;
    float3 vertexB;
    float radius;
    float mass;
    qword name;
};

struct SceneJointV3 {
    dword bones[2];
    float3 pivots[2];
    float3 twists[2];
    float3 planes[2];
    float coneLimit;
    float planeMin;
    float planeMax;
    float twistMin;
    float twistMax;
};

struct SceneHingeJointV3 {
    dword bones[2];
    float3 pivots[2];
    float3 hinges[2];
    float3 normals[2];
    float limitMin;
    float limitMax;
};

struct SceneFileSkeletonV3 {
    helpers::Array<SceneBoneV3> bones ;
    helpers::Array<SceneJointV3> joints ;
    helpers::Array<SceneHingeJointV3> hingeJoints ;
    helpers::Array<dword> ragdollToModel ;
};

typedef SceneFileSkeletonV3 Gw2StructSKEL;

/* Version: 2, ReferencedFunction: 0x1 */
struct SceneBoneV2 {
    float3 vertexA;
    float3 vertexB;
    float radius;
    float mass;
};

struct SceneJointV2 {
    dword bones[2];
    float3 pivots[2];
    float3 twists[2];
    float3 planes[2];
    float coneLimit;
    float planeMin;
    float planeMax;
    float twistMin;
    float twistMax;
};

struct SceneHingeJointV2 {
    dword bones[2];
    float3 pivots[2];
    float3 hinges[2];
    float3 normals[2];
    float limitMin;
    float limitMax;
};

struct SceneFileSkeletonV2 {
    helpers::Array<SceneBoneV2> bones ;
    helpers::Array<SceneJointV2> joints ;
    helpers::Array<SceneHingeJointV2> hingeJoints ;
    helpers::Array<dword> ragdollToModel ;
};

typedef SceneFileSkeletonV2 Gw2StructSKEL;

/* Version: 1, ReferencedFunction: 0x1 */
struct SceneBoneV1 {
    float3 vertexA;
    float3 vertexB;
    float radius;
    float mass;
};

struct SceneJointV1 {
    dword bones[2];
    float3 pivots[2];
    float3 twists[2];
    float3 planes[2];
    float coneLimit;
    float planeMin;
    float planeMax;
    float twistMin;
    float twistMax;
};

struct SceneHingeJointV1 {
    dword bones[2];
    float3 pivots[2];
    float3 hinges[2];
    float3 normals[2];
    float limitMin;
    float limitMax;
};

struct SceneUnmappedBoneV1 {
    dword modelBoneIndex;
    dword sceneBoneIndex;
    float4 localPose[3];
};

struct SceneFileSkeletonV1 {
    helpers::Array<SceneBoneV1> bones ;
    helpers::Array<SceneJointV1> joints ;
    helpers::Array<SceneHingeJointV1> hingeJoints ;
    helpers::Array<SceneUnmappedBoneV1> unmappedBones ;
    helpers::Array<dword> ragdollToModel ;
    helpers::Array<dword> modelToRagdoll ;
};

typedef SceneFileSkeletonV1 Gw2StructSKEL;

/* Version: 0, ReferencedFunction: 0x1 */
struct SceneBoneV0 {
    float3 vertexA;
    float3 vertexB;
    float radius;
    float mass;
};

struct SceneJointV0 {
    dword bones[2];
    float3 pivots[2];
    float3 twists[2];
    float3 planes[2];
    float coneLimit;
    float planeMin;
    float planeMax;
    float twistMin;
    float twistMax;
};

struct SceneUnmappedBoneV0 {
    dword modelBoneIndex;
    dword sceneBoneIndex;
    float4 localPose[3];
};

struct SceneFileSkeletonV0 {
    helpers::Array<SceneBoneV0> bones ;
    helpers::Array<SceneJointV0> joints ;
    helpers::Array<SceneUnmappedBoneV0> unmappedBones ;
    helpers::Array<dword> ragdollToModel ;
    helpers::Array<dword> modelToRagdoll ;
};

typedef SceneFileSkeletonV0 Gw2StructSKEL;


/* ===============================================
 * Chunk: MFST, versions: 7, strucTab: 0x14215BBD0
 * ===============================================
 */

/* Version: 6, ReferencedFunction: 0x1 */
struct PackAssetManifestRecord {
    dword baseId;
    dword fileId;
    dword size;
    dword flags;
};

struct PackAssetManifestStream {
    dword parentBaseId;
    dword streamBaseId;
};

struct PackAssetManifestProperty {
    byte type;
    helpers::Array<byte> data ;
};

struct PackAssetManifestPropertyIndex {
    dword baseId;
    dword properyIndex;
};

struct PackAssetManifest {
    dword buildId;
    qword totalRecordSize;
    helpers::Array<PackAssetManifestRecord> records ;
    helpers::Array<PackAssetManifestStream> streams ;
    helpers::Array<PackAssetManifestProperty> properties ;
    helpers::Array<PackAssetManifestPropertyIndex> propertyTable ;
};

typedef PackAssetManifest Gw2StructMFST;

/* Version: 5, ReferencedFunction: 0x1 */
struct PackAssetManifestRecordV5 {
    dword baseId;
    dword fileId;
    dword size;
    dword flags;
};

struct PackAssetManifestStreamV5 {
    dword parentBaseId;
    dword streamBaseId;
};

struct PackAssetManifestPropertyV5 {
    byte type;
    helpers::Array<byte> data ;
};

struct PackAssetManifestPropertyIndexV5 {
    dword baseId;
    dword properyIndex;
};

struct PackAssetManifestV5 {
    dword buildId;
    helpers::Array<PackAssetManifestRecordV5> records ;
    helpers::Array<PackAssetManifestStreamV5> streams ;
    helpers::Array<PackAssetManifestPropertyV5> properties ;
    helpers::Array<PackAssetManifestPropertyIndexV5> propertyTable ;
};

typedef PackAssetManifestV5 Gw2StructMFST;

/* Version: 4, ReferencedFunction: 0x1 */
struct PackAssetManifestRecordV4 {
    dword baseId;
    dword fileId;
    dword size;
    dword flags;
};

struct PackAssetManifestStreamV4 {
    dword parentBaseId;
    dword streamBaseId;
};

struct PackAssetManifestOptionsV4 {
    dword baseId;
    dword fileId;
    dword flags;
};

struct PackAssetManifestPropertyV4 {
    byte type;
    helpers::Array<byte> data ;
};

struct PackAssetManifestPropertyIndexV4 {
    dword baseId;
    dword properyIndex;
};

struct PackAssetManifestV4 {
    dword buildId;
    helpers::Array<PackAssetManifestRecordV4> records ;
    helpers::Array<PackAssetManifestStreamV4> streams ;
    helpers::Array<PackAssetManifestOptionsV4> options ;
    helpers::Array<PackAssetManifestPropertyV4> properties ;
    helpers::Array<PackAssetManifestPropertyIndexV4> propertyTable ;
};

typedef PackAssetManifestV4 Gw2StructMFST;

/* Version: 3, ReferencedFunction: 0x1 */
struct PackAssetManifestRecordV3 {
    dword baseId;
    dword fileId;
    dword size;
};

struct PackAssetManifestStreamV3 {
    dword parentBaseId;
    dword streamBaseId;
};

struct PackAssetManifestOptionsV3 {
    dword baseId;
    dword fileId;
    dword flags;
};

struct PackAssetManifestV3 {
    dword buildId;
    helpers::Array<PackAssetManifestRecordV3> records ;
    helpers::Array<PackAssetManifestStreamV3> streams ;
    helpers::Array<PackAssetManifestOptionsV3> options ;
};

typedef PackAssetManifestV3 Gw2StructMFST;

/* Version: 2, ReferencedFunction: 0x1 */
struct PackAssetManifestRecordV2 {
    dword baseId;
    dword fileId;
    dword size;
};

struct PackAssetManifestStreamV2 {
    dword parentBaseId;
    dword streamBaseId;
};

struct PackAssetManifestV2 {
    dword buildId;
    helpers::Array<PackAssetManifestRecordV2> records ;
    helpers::Array<PackAssetManifestStreamV2> streams ;
    helpers::Array<PackAssetManifestRecordV2> noDeltaRecords ;
};

typedef PackAssetManifestV2 Gw2StructMFST;

/* Version: 1, ReferencedFunction: 0x1 */
struct PackAssetManifestRecordV1 {
    dword baseId;
    dword fileId;
    dword size;
};

struct PackAssetManifestStreamV1 {
    dword parentBaseId;
    dword streamBaseId;
};

struct PackAssetManifestV1 {
    dword buildId;
    helpers::Array<PackAssetManifestRecordV1> records ;
    helpers::Array<PackAssetManifestStreamV1> streams ;
};

typedef PackAssetManifestV1 Gw2StructMFST;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackAssetManifestRecordV0 {
    dword baseId;
    dword fileId;
    dword size;
};

struct PackAssetManifestV0 {
    dword buildId;
    helpers::Array<PackAssetManifestRecordV0> records ;
};

typedef PackAssetManifestV0 Gw2StructMFST;


/* ===============================================
 * Chunk: ARMF, versions: 2, strucTab: 0x14215BC88
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x1 */
struct PackAssetManifestFile {
    dword baseId;
    dword fileId;
    dword size;
    dword flags;
    helpers::WString name;
};

struct PackAssetExtraFile {
    dword baseId;
    dword fileId;
    dword size;
    dword fileType;
};

struct PackAssetRootManifest {
    dword buildId;
    helpers::Array<PackAssetManifestFile> manifests ;
    helpers::Array<PackAssetExtraFile> extraFiles ;
};

typedef PackAssetRootManifest Gw2StructARMF;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackAssetExtraFile {
    dword baseId;
    dword fileId;
    dword size;
    dword fileType;
};

struct PackAssetRootManifestV0 {
    dword buildId;
    helpers::Array<PackAssetExtraFile> extraFiles ;
};

typedef PackAssetRootManifestV0 Gw2StructARMF;


/* ===============================================
 * Chunk: TKAC, versions: 1, strucTab: 0x14215D660
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct KeyEntry {
    dword assetType;
    dword assetId;
    qword key;
};

struct KeyTableData {
    helpers::Array<KeyEntry> keyEntryArr ;
};

typedef KeyTableData Gw2StructTKAC;


/* ===============================================
 * Chunk: main, versions: 1, strucTab: 0x1421B3790
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct CollideNavMeshChunkRef {
    float3 boundsMin;
    float3 boundsMax;
    helpers::FileName chunkFilename;
};

struct CollideNavMesh {
    float3 boundsMin;
    float3 boundsMax;
    dword2 chunkDims;
    helpers::Array<CollideNavMeshChunkRef> chunkRefArray ;
};

typedef CollideNavMesh Gw2Structmain;


/* ===============================================
 * Chunk: main, versions: 1, strucTab: 0x1421B37B8
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct CollideNavMeshChunk {
    helpers::Array<byte> navMeshData ;
    helpers::Array<byte> coarseGraphData ;
    helpers::Array<byte> queryMediatorMoppData ;
};

typedef CollideNavMeshChunk Gw2Structmain;


/* ===============================================
 * Chunk: main, versions: 2, strucTab: 0x1421B37E0
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x1 */
struct CollideModelManifestFile {
    helpers::WString modelFileStr;
    helpers::FileName modelFile;
    helpers::FileName collisionFile;
    helpers::Array<float> scales ;
};

struct CollideModelManifest {
    helpers::Array<CollideModelManifestFile> files ;
};

typedef CollideModelManifest Gw2Structmain;

/* Version: 0, ReferencedFunction: 0x1 */
struct CollideModelManifestFile {
    helpers::FileName modelFile;
    helpers::FileName collisionFile;
    helpers::Array<float> scales ;
};

struct CollideModelManifest {
    helpers::Array<CollideModelManifestFile> files ;
};

typedef CollideModelManifest Gw2Structmain;


/* ===============================================
 * Chunk: mach, versions: 2, strucTab: 0x1421BF0F0
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x1 */
struct PackAnimMachineActionV1 {
    Unknown0x1C actionData;
};

struct PackAnimMachineActionBlockV1 {
    helpers::Array<PackAnimMachineActionV1> actions ;
};

struct PackAnimMachineActionVariantV1 {
    qword token;
    helpers::Ptr<PackAnimMachineActionBlockV1> actionBlock ;
};

struct PackAnimMachineActionVariantBlockV1 {
    helpers::Array<PackAnimMachineActionVariantV1> actionVariants ;
};

struct PackAnimMachineTransitionVariantV1 {
    qword token;
    helpers::Ptr<PackAnimMachineActionBlockV1> actionBlock ;
};

struct PackAnimMachineTransitionV1 {
    helpers::WString name;
    helpers::WString targetStateName;
    helpers::Ptr<PackAnimMachineActionBlockV1> actionBlock ;
    helpers::Array<PackAnimMachineTransitionVariantV1> variants ;
};

struct PackAnimMachineStateVariantV1 {
    qword token;
    helpers::Ptr<PackAnimMachineActionBlockV1> actionBlock ;
    helpers::Ptr<PackAnimMachineActionVariantBlockV1> actionVariantBlock ;
    helpers::Array<PackAnimMachineTransitionV1> transitions ;
};

struct PackAnimMachineStateV1 {
    helpers::WString name;
    helpers::Ptr<PackAnimMachineActionBlockV1> actionBlock ;
    helpers::Ptr<PackAnimMachineActionVariantBlockV1> actionVariantBlock ;
    helpers::Array<PackAnimMachineTransitionV1> transitions ;
    helpers::Array<PackAnimMachineStateVariantV1> variants ;
};

struct PackAnimMachineV1 {
    helpers::Array<PackAnimMachineStateV1> states ;
};

struct PackAnimModelV1 {
    helpers::FileName modelFileId;
    helpers::WString modelFileRaw;
    dword machineIndex;
    byte16 listeners;
};

struct PackAnimMachinesV1 {
    helpers::Array<PackAnimMachineV1> machines ;
    helpers::Array<PackAnimModelV1> models ;
};

typedef PackAnimMachinesV1 Gw2Structmach;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackAnimMachineActionV0 {
    Unknown0x1C actionData;
};

struct PackAnimMachineActionBlockV0 {
    helpers::Array<PackAnimMachineActionV0> actions ;
};

struct PackAnimMachineActionVariantV0 {
    qword token;
    helpers::Ptr<PackAnimMachineActionBlockV0> actionBlock ;
};

struct PackAnimMachineActionVariantBlockV0 {
    helpers::Array<PackAnimMachineActionVariantV0> actionVariants ;
};

struct PackAnimMachineTransitionVariantV0 {
    qword token;
    helpers::Ptr<PackAnimMachineActionBlockV0> actionBlock ;
};

struct PackAnimMachineTransitionV0 {
    helpers::WString name;
    helpers::WString targetStateName;
    helpers::Ptr<PackAnimMachineActionBlockV0> actionBlock ;
    helpers::Array<PackAnimMachineTransitionVariantV0> variants ;
};

struct PackAnimMachineStateVariantV0 {
    qword token;
    helpers::Ptr<PackAnimMachineActionBlockV0> actionBlock ;
    helpers::Ptr<PackAnimMachineActionVariantBlockV0> actionVariantBlock ;
    helpers::Array<PackAnimMachineTransitionV0> transitions ;
};

struct PackAnimMachineStateV0 {
    helpers::WString name;
    helpers::Ptr<PackAnimMachineActionBlockV0> actionBlock ;
    helpers::Ptr<PackAnimMachineActionVariantBlockV0> actionVariantBlock ;
    helpers::Array<PackAnimMachineTransitionV0> transitions ;
    helpers::Array<PackAnimMachineStateVariantV0> variants ;
};

struct PackAnimMachineV0 {
    helpers::Array<PackAnimMachineStateV0> states ;
};

struct PackAnimModelV0 {
    helpers::FileName modelFileId;
    helpers::WString modelFileRaw;
    dword machineIndex;
};

struct PackAnimMachinesV0 {
    helpers::Array<PackAnimMachineV0> machines ;
    helpers::Array<PackAnimModelV0> models ;
};

typedef PackAnimMachinesV0 Gw2Structmach;


/* ===============================================
 * Chunk: fall, versions: 1, strucTab: 0x1421BEFB0
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct PackAnimFallbackV0 {
    qword sourceAnim;
    helpers::Array<qword> targetAnims ;
};

struct PackAnimFallbacksV0 {
    helpers::Array<PackAnimFallbackV0> fallbacks ;
};

typedef PackAnimFallbacksV0 Gw2Structfall;


/* ===============================================
 * Chunk: seqn, versions: 1, strucTab: 0x1421BEF50
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct PackAnimSequenceChargeStageV0 {
    word duration;
    byte endingChargeLevel;
};

struct PackAnimSequenceStepActionV0 {
    dword duration;
};

struct PackAnimSequenceStepMoveV0 {
    dword duration;
    float4 moveRotation;
    float4 facingRotation;
    float2 velocity;
};

struct PackAnimSequenceStepV0 {
    byte type;
    float animationSpeed;
    dword flags;
    helpers::Ptr<PackAnimSequenceStepActionV0> action ;
    helpers::Ptr<PackAnimSequenceStepMoveV0> move ;
};

struct PackAnimSequenceTriggerV0 {
    byte trigger;
    dword time;
    dword flags;
};

struct PackAnimSequenceDataV0 {
    ERROR token
;
    dword flags;
    float blendInTime;
    float blendOutTime;
    helpers::Array<PackAnimSequenceChargeStageV0> chargeStages ;
    helpers::Array<PackAnimSequenceStepV0> steps ;
    helpers::Array<PackAnimSequenceTriggerV0> triggers ;
};

struct PackAnimSequenceV0 {
    qword sequence;
    helpers::Array<PackAnimSequenceDataV0> animationData ;
};

struct PackAnimSequencesV0 {
    helpers::Array<PackAnimSequenceV0> sequences ;
};

typedef PackAnimSequencesV0 Gw2Structseqn;


/* ===============================================
 * Chunk: cnfg, versions: 1, strucTab: 0x1421BF220
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct PackAnimAimIKBoneV0 {
    qword boneToken;
    float clampAngle;
    float weight;
    float smoothingWeight;
};

struct PackAnimAimIKConfigV0 {
    qword name;
    qword boneEye;
    qword boneSight;
    qword endEffector;
    float frustumHAngle;
    float frustumVAngle;
    float frustumLength;
    float targetVelocityConstraint;
    helpers::Array<PackAnimAimIKBoneV0> bones ;
    helpers::Array<qword> targets ;
    byte flags;
};

struct PackAnimIKRaycastTargetV0 {
    dword flags;
    float3 direction;
};

struct PackAnimIKChainV0 {
    qword name;
    float3 smoothWeight;
    float hyperExtensionStart;
    float hyperExtensionScale;
    helpers::Array<qword> bones ;
    helpers::Ptr<PackAnimIKRaycastTargetV0> targetRaycastInfo ;
    byte targetMode;
    byte chainType;
};

struct PackAnimIKChainGroupV0 {
    qword name;
    helpers::Array<PackAnimIKChainV0> chains ;
};

struct PackAnimConfigV0 {
    helpers::Array<PackAnimAimIKConfigV0> aimIKConfigs ;
    helpers::Array<PackAnimIKChainGroupV0> chainGroups ;
};

typedef PackAnimConfigV0 Gw2Structcnfg;


/* ===============================================
 * Chunk: comp, versions: 20, strucTab: 0x1421C07C0
 * ===============================================
 */

/* Version: 19, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV20 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeBoneScaleParamV20 {
    qword name;
    byte flags;
    float max;
    float min;
    float3 rotate;
    float3 scale;
    float3 translate;
};

struct PackCompositeBoneScaleRegionV20 {
    qword name;
    float value;
    helpers::Array<PackCompositeBoneScaleParamV20> Bone ;
};

struct PackCompositeMorphWeightV20 {
    qword name;
    float value;
};

struct PackCompositeBoneScaleV20 {
    helpers::Array<PackCompositeBoneScaleRegionV20> BodyRegion ;
    helpers::Array<PackCompositeMorphWeightV20> MorphWeight ;
};

struct PackCompositeBoneScaleFileV20 {
    helpers::WString fileName;
};

struct PackCompositeFileDataV20 {
    qword name;
    byte type;
    byte flags;
    qword animRoleOverride;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    byte blitRectIndex;
};

struct PackCompositeSkinPatternV20 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeSkinStyleV20 {
    qword chest;
    qword feet;
    qword hands;
    qword legs;
};

struct PackCompositeColorV20 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV20 {
    qword nameToken;
    PackCompositeColorV20 color0;
    PackCompositeColorV20 color1;
    PackCompositeColorV20 color2;
    PackCompositeColorV20 color3;
};

struct PackCompositeVariantV20 {
    qword token;
    dword boneScaleIndex;
    helpers::Array<PackCompositeVariantComponentV20> components ;
    PackCompositeColorV20 eyeColor;
    PackCompositeColorV20 hairColor;
    PackCompositeColorV20 hairColor2;
    PackCompositeColorV20 patternColor;
    PackCompositeColorV20 skinColor;
    dword skinIndex;
    dword skinStyle;
};

struct PackCompositeAnimOverrideV20 {
    qword animRole;
    helpers::FileName filepath;
};

struct PackCompositeRaceDataV20 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<PackCompositeBoneScaleV20> bodyBoneScales ;
    helpers::Array<PackCompositeBoneScaleFileV20> bodyBoneScaleFiles ;
    helpers::Array<qword> ears ;
    helpers::WString eyeColorPalette;
    helpers::Array<PackCompositeBoneScaleV20> faceBoneScales ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV20> fileData ;
    dword flags;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV20> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    helpers::Array<PackCompositeSkinStyleV20> skinStyles ;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV20> variants ;
    helpers::Array<PackCompositeAnimOverrideV20> animOverrides ;
};

struct PackCompositeV20 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV20> blitRects ;
    helpers::Array<PackCompositeBoneScaleV20> boneScales ;
    helpers::Array<PackCompositeRaceDataV20> raceSexData ;
    word configVersion;
};

typedef PackCompositeV20 Gw2Structcomp;

/* Version: 18, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV18 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeBoneScaleParamV18 {
    qword name;
    byte flags;
    float max;
    float min;
    float3 rotate;
    float3 scale;
    float3 translate;
};

struct PackCompositeBoneScaleRegionV18 {
    qword name;
    float value;
    helpers::Array<PackCompositeBoneScaleParamV18> Bone ;
};

struct PackCompositeMorphWeightV18 {
    qword name;
    float value;
};

struct PackCompositeBoneScaleV18 {
    helpers::Array<PackCompositeBoneScaleRegionV18> BodyRegion ;
    helpers::Array<PackCompositeMorphWeightV18> MorphWeight ;
};

struct PackCompositeBoneScaleFileV18 {
    helpers::WString fileName;
};

struct PackCompositeFileDataV18 {
    qword name;
    byte type;
    byte flags;
    qword animRoleOverride;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    byte blitRectIndex;
};

struct PackCompositeSkinPatternV18 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeSkinStyleV18 {
    qword chest;
    qword feet;
    qword hands;
    qword legs;
};

struct PackCompositeColorV18 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV18 {
    qword nameToken;
    PackCompositeColorV18 color0;
    PackCompositeColorV18 color1;
    PackCompositeColorV18 color2;
    PackCompositeColorV18 color3;
};

struct PackCompositeVariantV18 {
    qword token;
    dword boneScaleIndex;
    helpers::Array<PackCompositeVariantComponentV18> components ;
    PackCompositeColorV18 eyeColor;
    PackCompositeColorV18 hairColor;
    PackCompositeColorV18 hairColor2;
    PackCompositeColorV18 patternColor;
    PackCompositeColorV18 skinColor;
    dword skinIndex;
};

struct PackCompositeAnimOverrideV18 {
    qword animRole;
    helpers::FileName filepath;
};

struct PackCompositeRaceDataV18 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<PackCompositeBoneScaleV18> bodyBoneScales ;
    helpers::Array<PackCompositeBoneScaleFileV18> bodyBoneScaleFiles ;
    helpers::Array<qword> ears ;
    helpers::WString eyeColorPalette;
    helpers::Array<PackCompositeBoneScaleV18> faceBoneScales ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV18> fileData ;
    dword flags;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV18> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    helpers::Array<PackCompositeSkinStyleV18> skinStyles ;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV18> variants ;
    helpers::Array<PackCompositeAnimOverrideV18> animOverrides ;
};

struct PackCompositeV18 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV18> blitRects ;
    helpers::Array<PackCompositeBoneScaleV18> boneScales ;
    helpers::Array<PackCompositeRaceDataV18> raceSexData ;
    word configVersion;
};

typedef PackCompositeV18 Gw2Structcomp;

/* Version: 17, ReferencedFunction: 0x41377D1000000001 */
struct PackCompositeBlitRectSetV17 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeBoneScaleParamV17 {
    qword name;
    byte flags;
    float max;
    float min;
    float3 rotate;
    float3 scale;
    float3 translate;
};

struct PackCompositeBoneScaleRegionV17 {
    qword name;
    float value;
    helpers::Array<PackCompositeBoneScaleParamV17> Bone ;
};

struct PackCompositeMorphWeightV17 {
    qword name;
    float value;
};

struct PackCompositeBoneScaleV17 {
    helpers::Array<PackCompositeBoneScaleRegionV17> BodyRegion ;
    helpers::Array<PackCompositeMorphWeightV17> MorphWeight ;
};

struct PackCompositeBoneScaleFileV17 {
    helpers::WString fileName;
};

struct PackCompositeFileDataV17 {
    qword name;
    byte type;
    byte flags;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    byte blitRectIndex;
};

struct PackCompositeSkinPatternV17 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeSkinStyleV17 {
    qword chest;
    qword feet;
    qword hands;
    qword legs;
};

struct PackCompositeColorV17 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV17 {
    qword nameToken;
    PackCompositeColorV17 color0;
    PackCompositeColorV17 color1;
    PackCompositeColorV17 color2;
    PackCompositeColorV17 color3;
};

struct PackCompositeVariantV17 {
    qword token;
    dword boneScaleIndex;
    helpers::Array<PackCompositeVariantComponentV17> components ;
    PackCompositeColorV17 eyeColor;
    PackCompositeColorV17 hairColor;
    PackCompositeColorV17 hairColor2;
    PackCompositeColorV17 patternColor;
    PackCompositeColorV17 skinColor;
    dword skinIndex;
};

struct PackCompositeAnimOverrideV17 {
    qword animRole;
    helpers::FileName filepath;
};

struct PackCompositeRaceDataV17 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<PackCompositeBoneScaleV17> bodyBoneScales ;
    helpers::Array<PackCompositeBoneScaleFileV17> bodyBoneScaleFiles ;
    helpers::Array<qword> ears ;
    helpers::WString eyeColorPalette;
    helpers::Array<PackCompositeBoneScaleV17> faceBoneScales ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV17> fileData ;
    dword flags;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV17> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    helpers::Array<PackCompositeSkinStyleV17> skinStyles ;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV17> variants ;
    helpers::Array<PackCompositeAnimOverrideV17> animOverrides ;
};

struct PackCompositeV17 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV17> blitRects ;
    helpers::Array<PackCompositeBoneScaleV17> boneScales ;
    helpers::Array<PackCompositeRaceDataV17> raceSexData ;
    word configVersion;
};

typedef PackCompositeV17 Gw2Structcomp;

/* Version: 16, ReferencedFunction: 0x4137789000000001 */
struct PackCompositeBlitRectSetV16 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeBoneScaleParamV16 {
    qword name;
    byte flags;
    float max;
    float min;
    float3 rotate;
    float3 scale;
    float3 translate;
};

struct PackCompositeBoneScaleRegionV16 {
    qword name;
    float value;
    helpers::Array<PackCompositeBoneScaleParamV16> Bone ;
};

struct PackCompositeMorphWeightV16 {
    qword name;
    float value;
};

struct PackCompositeBoneScaleV16 {
    helpers::Array<PackCompositeBoneScaleRegionV16> BodyRegion ;
    helpers::Array<PackCompositeMorphWeightV16> MorphWeight ;
};

struct PackCompositeBoneScaleFileV16 {
    helpers::WString fileName;
};

struct PackCompositeFileDataV16 {
    qword name;
    byte type;
    byte flags;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    byte blitRectIndex;
};

struct PackCompositeSkinPatternV16 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeColorV16 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV16 {
    qword nameToken;
    PackCompositeColorV16 color0;
    PackCompositeColorV16 color1;
    PackCompositeColorV16 color2;
    PackCompositeColorV16 color3;
};

struct PackCompositeVariantV16 {
    qword token;
    dword boneScaleIndex;
    helpers::Array<PackCompositeVariantComponentV16> components ;
    PackCompositeColorV16 eyeColor;
    PackCompositeColorV16 hairColor;
    PackCompositeColorV16 hairColor2;
    PackCompositeColorV16 patternColor;
    PackCompositeColorV16 skinColor;
    dword skinIndex;
};

struct PackCompositeAnimOverrideV16 {
    qword animRole;
    helpers::FileName filepath;
};

struct PackCompositeRaceDataV16 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<PackCompositeBoneScaleV16> bodyBoneScales ;
    helpers::Array<PackCompositeBoneScaleFileV16> bodyBoneScaleFiles ;
    helpers::Array<qword> ears ;
    helpers::WString eyeColorPalette;
    helpers::Array<PackCompositeBoneScaleV16> faceBoneScales ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV16> fileData ;
    dword flags;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV16> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    byte skinStyleCount;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV16> variants ;
    helpers::Array<PackCompositeAnimOverrideV16> animOverrides ;
};

struct PackCompositeV16 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV16> blitRects ;
    helpers::Array<PackCompositeBoneScaleV16> boneScales ;
    helpers::Array<PackCompositeRaceDataV16> raceSexData ;
    word configVersion;
};

typedef PackCompositeV16 Gw2Structcomp;

/* Version: 15, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV15 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeBoneScaleParamV15 {
    qword name;
    byte flags;
    float max;
    float min;
    float3 rotate;
    float3 scale;
    float3 translate;
};

struct PackCompositeBoneScaleRegionV15 {
    qword name;
    float value;
    helpers::Array<PackCompositeBoneScaleParamV15> Bone ;
};

struct PackCompositeMorphWeightV15 {
    qword name;
    float value;
};

struct PackCompositeBoneScaleV15 {
    helpers::Array<PackCompositeBoneScaleRegionV15> BodyRegion ;
    helpers::Array<PackCompositeMorphWeightV15> MorphWeight ;
};

struct PackCompositeBoneScaleFileV15 {
    helpers::WString fileName;
};

struct PackCompositeFileDataV15 {
    qword name;
    byte type;
    byte flags;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    byte blitRectIndex;
};

struct PackCompositeSkinPatternV15 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeColorV15 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV15 {
    qword nameToken;
    PackCompositeColorV15 color0;
    PackCompositeColorV15 color1;
    PackCompositeColorV15 color2;
    PackCompositeColorV15 color3;
};

struct PackCompositeVariantV15 {
    qword token;
    dword boneScaleIndex;
    helpers::Array<PackCompositeVariantComponentV15> components ;
    PackCompositeColorV15 eyeColor;
    PackCompositeColorV15 hairColor;
    PackCompositeColorV15 hairColor2;
    PackCompositeColorV15 patternColor;
    PackCompositeColorV15 skinColor;
    dword skinIndex;
};

struct PackCompositeAnimOverrideV15 {
    qword animRole;
    helpers::FileName filepath;
};

struct PackCompositeRaceDataV15 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<PackCompositeBoneScaleV15> bodyBoneScales ;
    helpers::Array<PackCompositeBoneScaleFileV15> bodyBoneScaleFiles ;
    helpers::Array<qword> ears ;
    helpers::WString eyeColorPalette;
    helpers::Array<PackCompositeBoneScaleV15> faceBoneScales ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV15> fileData ;
    dword flags;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV15> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    byte skinStyleCount;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV15> variants ;
    helpers::Array<PackCompositeAnimOverrideV15> animOverrides ;
};

struct PackCompositeV15 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV15> blitRects ;
    helpers::Array<PackCompositeBoneScaleV15> boneScales ;
    helpers::Array<PackCompositeRaceDataV15> raceSexData ;
    word configVersion;
};

typedef PackCompositeV15 Gw2Structcomp;

/* Version: 14, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV14 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeBoneScaleParamV14 {
    qword name;
    byte flags;
    float max;
    float min;
    float3 rotate;
    float3 scale;
    float3 translate;
};

struct PackCompositeBoneScaleRegionV14 {
    qword name;
    float value;
    helpers::Array<PackCompositeBoneScaleParamV14> Bone ;
};

struct PackCompositeMorphWeightV14 {
    qword name;
    float value;
};

struct PackCompositeBoneScaleV14 {
    helpers::Array<PackCompositeBoneScaleRegionV14> BodyRegion ;
    helpers::Array<PackCompositeMorphWeightV14> MorphWeight ;
};

struct PackCompositeBoneScaleFileV14 {
    helpers::WString fileName;
};

struct PackCompositeFileDataV14 {
    qword name;
    byte type;
    byte flags;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    byte blitRectIndex;
};

struct PackCompositeSkinPatternV14 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeColorV14 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV14 {
    qword nameToken;
    PackCompositeColorV14 color0;
    PackCompositeColorV14 color1;
    PackCompositeColorV14 color2;
    PackCompositeColorV14 color3;
};

struct PackCompositeVariantV14 {
    qword token;
    dword boneScaleIndex;
    helpers::Array<PackCompositeVariantComponentV14> components ;
    PackCompositeColorV14 eyeColor;
    PackCompositeColorV14 hairColor;
    PackCompositeColorV14 hairColor2;
    PackCompositeColorV14 patternColor;
    PackCompositeColorV14 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV14 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<PackCompositeBoneScaleV14> bodyBoneScales ;
    helpers::Array<PackCompositeBoneScaleFileV14> bodyBoneScaleFiles ;
    helpers::Array<qword> ears ;
    helpers::WString eyeColorPalette;
    helpers::Array<PackCompositeBoneScaleV14> faceBoneScales ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV14> fileData ;
    dword flags;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV14> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    byte skinStyleCount;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV14> variants ;
};

struct PackCompositeV14 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV14> blitRects ;
    helpers::Array<PackCompositeBoneScaleV14> boneScales ;
    helpers::Array<PackCompositeRaceDataV14> raceSexData ;
    word configVersion;
};

typedef PackCompositeV14 Gw2Structcomp;

/* Version: 13, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV13 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeBoneScaleParamV13 {
    qword name;
    byte flags;
    float max;
    float min;
    float3 rotate;
    float3 scale;
    float3 translate;
};

struct PackCompositeBoneScaleRegionV13 {
    qword name;
    float value;
    helpers::Array<PackCompositeBoneScaleParamV13> Bone ;
};

struct PackCompositeMorphWeightV13 {
    float value;
    qword name;
};

struct PackCompositeBoneScaleV13 {
    helpers::Array<PackCompositeBoneScaleRegionV13> BodyRegion ;
    helpers::Array<PackCompositeMorphWeightV13> MorphWeight ;
};

struct PackCompositeBoneScaleFileV13 {
    helpers::WString fileName;
};

struct PackCompositeFileDataV13 {
    qword name;
    byte type;
    byte flags;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    byte blitRectIndex;
};

struct PackCompositeSkinPatternV13 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeColorV13 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV13 {
    qword nameToken;
    PackCompositeColorV13 color0;
    PackCompositeColorV13 color1;
    PackCompositeColorV13 color2;
    PackCompositeColorV13 color3;
};

struct PackCompositeVariantV13 {
    qword token;
    dword boneScaleIndex;
    helpers::Array<PackCompositeVariantComponentV13> components ;
    PackCompositeColorV13 hairColor;
    PackCompositeColorV13 hairColor2;
    PackCompositeColorV13 patternColor;
    PackCompositeColorV13 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV13 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<PackCompositeBoneScaleV13> bodyBoneScales ;
    helpers::Array<PackCompositeBoneScaleFileV13> bodyBoneScaleFiles ;
    helpers::Array<qword> ears ;
    helpers::Array<PackCompositeBoneScaleV13> faceBoneScales ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV13> fileData ;
    dword flags;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV13> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    byte skinStyleCount;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV13> variants ;
};

struct PackCompositeV13 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV13> blitRects ;
    helpers::Array<PackCompositeBoneScaleV13> boneScales ;
    helpers::Array<PackCompositeRaceDataV13> raceSexData ;
    word configVersion;
};

typedef PackCompositeV13 Gw2Structcomp;

/* Version: 12, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV12 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeBoneScaleParamV12 {
    qword name;
    byte flags;
    float max;
    float min;
    float3 rotate;
    float3 scale;
    float3 translate;
};

struct PackCompositeBoneScaleRegionV12 {
    qword name;
    float value;
    helpers::Array<PackCompositeBoneScaleParamV12> Bone ;
};

struct PackCompositeMorphWeightV12 {
    float value;
    qword name;
};

struct PackCompositeBoneScaleV12 {
    helpers::Array<PackCompositeBoneScaleRegionV12> BodyRegion ;
    helpers::Array<PackCompositeMorphWeightV12> MorphWeight ;
};

struct PackCompositeBoneScaleFileV12 {
    helpers::WString fileName;
};

struct PackCompositeFileDataV12 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV12 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeColorV12 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV12 {
    qword nameToken;
    PackCompositeColorV12 color0;
    PackCompositeColorV12 color1;
    PackCompositeColorV12 color2;
    PackCompositeColorV12 color3;
};

struct PackCompositeVariantV12 {
    qword token;
    dword boneScaleIndex;
    helpers::Array<PackCompositeVariantComponentV12> components ;
    PackCompositeColorV12 hairColor;
    PackCompositeColorV12 hairColor2;
    PackCompositeColorV12 patternColor;
    PackCompositeColorV12 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV12 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<PackCompositeBoneScaleV12> bodyBoneScales ;
    helpers::Array<PackCompositeBoneScaleFileV12> bodyBoneScaleFiles ;
    helpers::Array<qword> ears ;
    helpers::Array<PackCompositeBoneScaleV12> faceBoneScales ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV12> fileData ;
    dword flags;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV12> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    byte skinStyleCount;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV12> variants ;
};

struct PackCompositeV12 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV12> blitRects ;
    helpers::Array<PackCompositeBoneScaleV12> boneScales ;
    helpers::Array<PackCompositeRaceDataV12> raceSexData ;
    word configVersion;
};

typedef PackCompositeV12 Gw2Structcomp;

/* Version: 11, ReferencedFunction: 0x4137783000000001 */
struct PackCompositeBlitRectSetV11 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeBoneScaleParamV11 {
    qword name;
    byte flags;
    float max;
    float min;
    float3 rotate;
    float3 scale;
    float3 translate;
};

struct PackCompositeBoneScaleRegionV11 {
    float value;
    helpers::Array<PackCompositeBoneScaleParamV11> Bone ;
};

struct PackCompositeBoneScaleV11 {
    helpers::Array<PackCompositeBoneScaleRegionV11> BodyRegion ;
};

struct PackCompositeFileDataV11 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV11 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeColorV11 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV11 {
    qword nameToken;
    PackCompositeColorV11 color0;
    PackCompositeColorV11 color1;
    PackCompositeColorV11 color2;
    PackCompositeColorV11 color3;
};

struct PackCompositeVariantV11 {
    qword token;
    dword boneScaleIndex;
    helpers::Array<PackCompositeVariantComponentV11> components ;
    PackCompositeColorV11 hairColor;
    PackCompositeColorV11 hairColor2;
    PackCompositeColorV11 patternColor;
    PackCompositeColorV11 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV11 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV11> fileData ;
    dword flags;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV11> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV11> variants ;
};

struct PackCompositeV11 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV11> blitRects ;
    helpers::Array<PackCompositeBoneScaleV11> boneScales ;
    helpers::Array<PackCompositeRaceDataV11> raceSexData ;
    word configVersion;
};

typedef PackCompositeV11 Gw2Structcomp;

/* Version: 10, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV10 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeFileDataV10 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV10 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeColorV10 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV10 {
    qword nameToken;
    PackCompositeColorV10 color0;
    PackCompositeColorV10 color1;
    PackCompositeColorV10 color2;
    PackCompositeColorV10 color3;
};

struct PackCompositeVariantV10 {
    qword token;
    helpers::Array<PackCompositeVariantComponentV10> components ;
    PackCompositeColorV10 hairColor;
    PackCompositeColorV10 hairColor2;
    PackCompositeColorV10 patternColor;
    PackCompositeColorV10 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV10 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV10> fileData ;
    dword flags;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV10> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV10> variants ;
};

struct PackCompositeV10 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV10> blitRects ;
    helpers::Array<PackCompositeRaceDataV10> raceSexData ;
    word configVersion;
};

typedef PackCompositeV10 Gw2Structcomp;

/* Version: 9, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV9 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeFileDataV9 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV9 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeColorV9 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV9 {
    qword nameToken;
    PackCompositeColorV9 color0;
    PackCompositeColorV9 color1;
    PackCompositeColorV9 color2;
    PackCompositeColorV9 color3;
};

struct PackCompositeVariantV9 {
    qword token;
    helpers::Array<PackCompositeVariantComponentV9> components ;
    PackCompositeColorV9 hairColor;
    PackCompositeColorV9 hairColor2;
    PackCompositeColorV9 patternColor;
    PackCompositeColorV9 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV9 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV9> fileData ;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV9> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV9> variants ;
};

struct PackCompositeV9 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV9> blitRects ;
    helpers::Array<PackCompositeRaceDataV9> raceSexData ;
    word configVersion;
};

typedef PackCompositeV9 Gw2Structcomp;

/* Version: 8, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV8 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeFileDataV8 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV8 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeColorV8 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV8 {
    qword nameToken;
    PackCompositeColorV8 color0;
    PackCompositeColorV8 color1;
    PackCompositeColorV8 color2;
    PackCompositeColorV8 color3;
};

struct PackCompositeVariantV8 {
    qword token;
    helpers::Array<PackCompositeVariantComponentV8> components ;
    PackCompositeColorV8 hairColor;
    PackCompositeColorV8 hairColor2;
    PackCompositeColorV8 patternColor;
    PackCompositeColorV8 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV8 {
    helpers::WString name;
    qword nameToken;
    qword baseHeadToken;
    helpers::Array<qword> beard ;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV8> fileData ;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV8> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV8> variants ;
};

struct PackCompositeV8 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV8> blitRects ;
    helpers::Array<PackCompositeRaceDataV8> raceSexData ;
};

typedef PackCompositeV8 Gw2Structcomp;

/* Version: 7, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV7 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeFileDataV7 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV7 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeColorV7 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV7 {
    qword nameToken;
    PackCompositeColorV7 color0;
    PackCompositeColorV7 color1;
    PackCompositeColorV7 color2;
    PackCompositeColorV7 color3;
};

struct PackCompositeVariantV7 {
    qword token;
    helpers::Array<PackCompositeVariantComponentV7> components ;
    PackCompositeColorV7 hairColor;
    PackCompositeColorV7 hairColor2;
    PackCompositeColorV7 patternColor;
    PackCompositeColorV7 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV7 {
    helpers::WString name;
    qword nameToken;
    helpers::Array<qword> beard ;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV7> fileData ;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV7> skinPatterns ;
    helpers::WString skinColorPalette;
    helpers::WString skinPatternPalette;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV7> variants ;
};

struct PackCompositeV7 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV7> blitRects ;
    helpers::Array<PackCompositeRaceDataV7> raceSexData ;
};

typedef PackCompositeV7 Gw2Structcomp;

/* Version: 6, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV6 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeFileDataV6 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV6 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
    helpers::FileName ears;
};

struct PackCompositeColorV6 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV6 {
    qword nameToken;
    PackCompositeColorV6 color0;
    PackCompositeColorV6 color1;
    PackCompositeColorV6 color2;
    PackCompositeColorV6 color3;
};

struct PackCompositeVariantV6 {
    qword token;
    helpers::Array<PackCompositeVariantComponentV6> components ;
    PackCompositeColorV6 hairColor;
    PackCompositeColorV6 hairColor2;
    PackCompositeColorV6 patternColor;
    PackCompositeColorV6 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV6 {
    helpers::WString name;
    qword nameToken;
    helpers::Array<qword> beard ;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV6> fileData ;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV6> skinPatterns ;
    helpers::WString skinColorPalette;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV6> variants ;
};

struct PackCompositeV6 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV6> blitRects ;
    helpers::Array<PackCompositeRaceDataV6> raceSexData ;
};

typedef PackCompositeV6 Gw2Structcomp;

/* Version: 5, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV5 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeFileDataV5 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV5 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
};

struct PackCompositeColorV5 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV5 {
    qword nameToken;
    PackCompositeColorV5 color0;
    PackCompositeColorV5 color1;
    PackCompositeColorV5 color2;
    PackCompositeColorV5 color3;
};

struct PackCompositeVariantV5 {
    qword token;
    helpers::Array<PackCompositeVariantComponentV5> components ;
    PackCompositeColorV5 hairColor;
    PackCompositeColorV5 hairColor2;
    PackCompositeColorV5 patternColor;
    PackCompositeColorV5 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV5 {
    helpers::WString name;
    qword nameToken;
    helpers::Array<qword> beard ;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV5> fileData ;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV5> skinPatterns ;
    helpers::WString skinColorPalette;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV5> variants ;
};

struct PackCompositeV5 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV5> blitRects ;
    helpers::Array<PackCompositeRaceDataV5> raceSexData ;
};

typedef PackCompositeV5 Gw2Structcomp;

/* Version: 4, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV4 {
    helpers::WString name;
    dword2 size;
    helpers::Array<byte> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeFileDataV4 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV4 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
};

struct PackCompositeColorV4 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV4 {
    qword nameToken;
    PackCompositeColorV4 clothColor;
    PackCompositeColorV4 leatherColor;
    PackCompositeColorV4 metalColor;
};

struct PackCompositeVariantV4 {
    helpers::Array<PackCompositeVariantComponentV4> components ;
    PackCompositeColorV4 hairColor;
    PackCompositeColorV4 patternColor;
    PackCompositeColorV4 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV4 {
    helpers::WString name;
    qword nameToken;
    helpers::Array<qword> beard ;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV4> fileData ;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV4> skinPatterns ;
    helpers::WString skinColorPalette;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV4> variants ;
};

struct PackCompositeV4 {
    helpers::Array<dword> armorColorIds ;
    helpers::Array<PackCompositeBlitRectSetV4> blitRects ;
    helpers::Array<PackCompositeRaceDataV4> raceSexData ;
};

typedef PackCompositeV4 Gw2Structcomp;

/* Version: 3, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV3 {
    helpers::WString name;
    dword2 size;
    helpers::Array<dword> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeFileDataV3 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV3 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
};

struct PackCompositeColorV3 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV3 {
    qword nameToken;
    PackCompositeColorV3 clothColor;
    PackCompositeColorV3 leatherColor;
    PackCompositeColorV3 metalColor;
};

struct PackCompositeVariantV3 {
    helpers::Array<PackCompositeVariantComponentV3> components ;
    PackCompositeColorV3 hairColor;
    PackCompositeColorV3 patternColor;
    PackCompositeColorV3 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV3 {
    helpers::WString name;
    qword nameToken;
    helpers::Array<qword> beard ;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV3> fileData ;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV3> skinPatterns ;
    helpers::WString skinColorPalette;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV3> variants ;
};

struct PackCompositeV3 {
    helpers::Array<PackCompositeBlitRectSetV3> blitRects ;
    helpers::Array<PackCompositeRaceDataV3> raceSexData ;
};

typedef PackCompositeV3 Gw2Structcomp;

/* Version: 2, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV2 {
    helpers::WString name;
    dword2 size;
    helpers::Array<dword> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeFileDataV2 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV2 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
};

struct PackCompositeColorV2 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV2 {
    qword nameToken;
    PackCompositeColorV2 clothColor;
    PackCompositeColorV2 leatherColor;
    PackCompositeColorV2 metalColor;
};

struct PackCompositeVariantV2 {
    helpers::Array<PackCompositeVariantComponentV2> components ;
    PackCompositeColorV2 hairColor;
    PackCompositeColorV2 patternColor;
    PackCompositeColorV2 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV2 {
    helpers::WString name;
    qword nameToken;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV2> fileData ;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV2> skinPatterns ;
    helpers::WString skinColorPalette;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV2> variants ;
};

struct PackCompositeV2 {
    helpers::Array<PackCompositeBlitRectSetV2> blitRects ;
    helpers::Array<PackCompositeRaceDataV2> raceSexData ;
};

typedef PackCompositeV2 Gw2Structcomp;

/* Version: 1, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV1 {
    helpers::WString name;
    dword2 size;
    helpers::Array<dword> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeFileDataV1 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskDye1;
    helpers::FileName maskDye2;
    helpers::FileName maskDye3;
    helpers::FileName maskDye4;
    helpers::FileName maskCut;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword dyeFlags;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV1 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
};

struct PackCompositeColorV1 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV1 {
    qword nameToken;
    PackCompositeColorV1 clothColor;
    PackCompositeColorV1 leatherColor;
    PackCompositeColorV1 metalColor;
};

struct PackCompositeVariantV1 {
    helpers::Array<PackCompositeVariantComponentV1> components ;
    PackCompositeColorV1 hairColor;
    PackCompositeColorV1 patternColor;
    PackCompositeColorV1 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV1 {
    helpers::WString name;
    qword nameToken;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV1> fileData ;
    helpers::Array<qword> hairStyles ;
    helpers::WString hairColorPalette;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV1> skinPatterns ;
    helpers::WString skinColorPalette;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV1> variants ;
};

struct PackCompositeV1 {
    helpers::Array<PackCompositeBlitRectSetV1> blitRects ;
    helpers::Array<PackCompositeRaceDataV1> raceSexData ;
};

typedef PackCompositeV1 Gw2Structcomp;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackCompositeBlitRectSetV0 {
    helpers::WString name;
    dword2 size;
    helpers::Array<dword> rectIndex ;
    helpers::Array<dword4> rectArray ;
};

struct PackCompositeFileDataV0 {
    qword name;
    dword type;
    helpers::FileName meshBase;
    helpers::FileName meshOverlap;
    helpers::FileName maskClothSkin;
    helpers::FileName maskLeather;
    helpers::FileName maskMetal;
    helpers::FileName maskGlow;
    helpers::FileName textureBase;
    helpers::FileName textureNormal;
    dword hideFlags;
    dword skinFlags;
    dword blitRectIndex;
};

struct PackCompositeSkinPatternV0 {
    helpers::FileName chest;
    helpers::FileName face;
    helpers::FileName feet;
    helpers::FileName hands;
    helpers::FileName legs;
};

struct PackCompositeColorV0 {
    byte brightness;
    byte contrast;
    byte hue;
    byte saturation;
    byte lightness;
};

struct PackCompositeVariantComponentV0 {
    qword nameToken;
    PackCompositeColorV0 clothColor;
    PackCompositeColorV0 leatherColor;
    PackCompositeColorV0 metalColor;
};

struct PackCompositeVariantV0 {
    helpers::Array<PackCompositeVariantComponentV0> components ;
    PackCompositeColorV0 hairColor;
    PackCompositeColorV0 patternColor;
    PackCompositeColorV0 skinColor;
    dword skinIndex;
};

struct PackCompositeRaceDataV0 {
    helpers::WString name;
    qword nameToken;
    helpers::Array<qword> ears ;
    helpers::Array<qword> faces ;
    helpers::Array<PackCompositeFileDataV0> fileData ;
    helpers::Array<qword> hairStyles ;
    helpers::FileName skeletonFile;
    helpers::Array<PackCompositeSkinPatternV0> skinPatterns ;
    dword type;
    qword variantRefRace;
    helpers::Array<PackCompositeVariantV0> variants ;
};

struct PackCompositeV0 {
    helpers::Array<PackCompositeBlitRectSetV0> blitRects ;
    helpers::Array<PackCompositeRaceDataV0> raceSexData ;
};

typedef PackCompositeV0 Gw2Structcomp;


/* ===============================================
 * Chunk: Main, versions: 1, strucTab: 0x1421C0BF0
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct PackContentTypeInfo {
    dword guidOffset;
    dword uidOffset;
    dword dataIdOffset;
    dword nameOffset;
    byte trackReferences;
};

struct PackContentNamespace {
    helpers::WString name;
    dword domain;
    dword parentIndex;
};

struct PackContentIndexEntry {
    dword type;
    dword offset;
    dword namespaceIndex;
    dword rootIndex;
};

struct PackContentLocalOffsetFixup {
    dword relocOffset;
};

struct PackContentExternalOffsetFixup {
    dword relocOffset;
    dword targetFileIndex;
};

struct PackContentFileIndexFixup {
    dword relocOffset;
};

struct PackContentStringIndexFixup {
    dword relocOffset;
};

struct PackContentTrackedReference {
    dword sourceOffset;
    dword targetFileIndex;
    dword targetOffset;
};

struct PackContent {
    dword flags;
    helpers::Array<PackContentTypeInfo> typeInfos ;
    helpers::Array<PackContentNamespace> namespaces ;
    helpers::Array<fileref> fileRefs ;
    helpers::Array<PackContentIndexEntry> indexEntries ;
    helpers::Array<PackContentLocalOffsetFixup> localOffsets ;
    helpers::Array<PackContentExternalOffsetFixup> externalOffsets ;
    helpers::Array<PackContentFileIndexFixup> fileIndices ;
    helpers::Array<PackContentStringIndexFixup> stringIndices ;
    helpers::Array<PackContentTrackedReference> trackedReferences ;
    helpers::Array<wchar_ptr> strings ;
    helpers::Array<byte> content ;
};

typedef PackContent Gw2StructMain;


/* ===============================================
 * Chunk: Main, versions: 1, strucTab: 0x1421C0C60
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct PackMapMetadataMap {
    word mapId;
    byte mapType;
};

struct PackMapMetadata {
    helpers::Array<PackMapMetadataMap> maps ;
};

typedef PackMapMetadata Gw2StructMain;


/* ===============================================
 * Chunk: anim, versions: 4, strucTab: 0x1421C0D90
 * ===============================================
 */

/* Version: 3, ReferencedFunction: 0x1 */
struct PackEmoteTimingV3 {
    helpers::FileName ModelFile;
    float BlendIn;
    float BlendOut;
    dword IntroDuration;
    dword LoopDuration;
    dword OutroDuration;
    dword StartOffset;
};

struct PackEmoteAnimationV3 {
    qword Token;
    helpers::Array<PackEmoteTimingV3> Timing ;
};

struct PackEmoteAnimationsV3 {
    helpers::Array<PackEmoteAnimationV3> Animation ;
};

typedef PackEmoteAnimationsV3 Gw2Structanim;

/* Version: 2, ReferencedFunction: 0x41377DE000000001 */
struct PackEmoteTimingV2 {
    helpers::FileName ModelFile;
    float BlendIn;
    float BlendOut;
    dword IntroDuration;
    dword LoopDuration;
    dword OutroDuration;
};

struct PackEmoteAnimationV2 {
    qword Token;
    helpers::Array<PackEmoteTimingV2> Timing ;
};

struct PackEmoteAnimationsV2 {
    helpers::Array<PackEmoteAnimationV2> Animation ;
};

typedef PackEmoteAnimationsV2 Gw2Structanim;

/* Version: 1, ReferencedFunction: 0x1 */
struct PackEmoteTimingV1 {
    helpers::FileName modelFileId;
    float blendInTime;
    float blendOutTime;
    dword duration;
    dword loopDuration;
};

struct PackEmoteAnimationV1 {
    qword token;
    helpers::Array<PackEmoteTimingV1> timings ;
};

struct PackEmoteAnimationsV1 {
    helpers::Array<PackEmoteAnimationV1> animations ;
};

typedef PackEmoteAnimationsV1 Gw2Structanim;

/* Version: 0, ReferencedFunction: 0x1 */
struct PackEmoteTimingV0 {
    helpers::FileName modelFileId;
    float blendInTime;
    float blendOutTime;
    dword duration;
};

struct PackEmoteAnimationV0 {
    qword token;
    helpers::Array<PackEmoteTimingV0> timings ;
};

struct PackEmoteAnimationsV0 {
    helpers::Array<PackEmoteAnimationV0> animations ;
};

typedef PackEmoteAnimationsV0 Gw2Structanim;


/* ===============================================
 * Chunk: eula, versions: 1, strucTab: 0x1421C0FA0
 * ===============================================
 */

/* Version: 0, ReferencedFunction: 0x1 */
struct PackEulaLanguageV0 {
    byte Language;
    helpers::WString Text;
};

struct PackEulaV0 {
    helpers::Array<PackEulaLanguageV0> Language ;
    byte Version;
};

typedef PackEulaV0 Gw2Structeula;


/* ===============================================
 * Chunk: mfst, versions: 3, strucTab: 0x142256F20
 * ===============================================
 */

/* Version: 2, ReferencedFunction: 0x4176AEF000000001 */
struct ContentMapRedirector {
    byte16 mapGUID;
    dword token;
    float3 position;
    float radius;
};

struct ContentMapModel {
    helpers::FileName filename;
    dword flags;
    dword type;
    qword permutation;
};

struct ContentMapStart {
    dword token;
    helpers::Array<ContentMapModel> modelArray ;
    float3 position;
    float radius;
};

struct ContentMap {
    byte16 mapGUID;
    helpers::Array<ContentMapRedirector> mapRedirectorArray ;
    helpers::Array<ContentMapStart> mapStartArray ;
};

struct ContentPortalManifest {
    helpers::Array<ContentMap> mapArray ;
};

typedef ContentPortalManifest Gw2Structmfst;

/* Version: 1, ReferencedFunction: 0x1 */
struct ContentMapRedirectorV1 {
    dword mapId;
    dword token;
    float3 position;
    float radius;
};

struct ContentMapModelV1 {
    helpers::FileName filename;
    dword flags;
    dword type;
    qword permutation;
};

struct ContentMapStartV1 {
    dword token;
    helpers::Array<ContentMapModelV1> modelArray ;
    float3 position;
    float radius;
};

struct ContentMapV1 {
    dword mapId;
    helpers::Array<ContentMapRedirectorV1> mapRedirectorArray ;
    helpers::Array<ContentMapStartV1> mapStartArray ;
};

struct ContentPortalManifestV1 {
    helpers::Array<ContentMapV1> mapArray ;
};

typedef ContentPortalManifestV1 Gw2Structmfst;

/* Version: 0, ReferencedFunction: 0x1 */
struct ContentMapRedirectorV0 {
    dword mapId;
    dword token;
    float3 position;
    float radius;
};

struct ContentMapModelV0 {
    helpers::FileName filename;
    dword flags;
    dword type;
};

struct ContentMapStartV0 {
    dword token;
    helpers::Array<ContentMapModelV0> modelArray ;
    float3 position;
    float radius;
};

struct ContentMapV0 {
    dword mapId;
    helpers::Array<ContentMapRedirectorV0> mapRedirectorArray ;
    helpers::Array<ContentMapStartV0> mapStartArray ;
};

struct ContentPortalManifestV0 {
    helpers::Array<ContentMapV0> mapArray ;
};

typedef ContentPortalManifestV0 Gw2Structmfst;


/* ===============================================
 * Chunk: hzPB, versions: 1, strucTab: 0x14228BFD0
 * ===============================================
 */


/* ===============================================
 * Chunk: 0kmB, versions: 1, strucTab: 0x14189F128
 * ===============================================
 */


