//------------------------------------------------
//--- 010 Editor v15.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
LittleEndian();
// Stack utlity in case of recursion of types like struct*, array<struct>* etc..
#define STACK_SIZE 256
// Stack utility for counts (uint32) and offsets (uint64)


void pushData(uint32 ioStack[], uint32& ioStackSize, uint32 iValue)
{
    ioStack[ioStackSize] = iValue;
    ++ioStackSize;
}

uint32 getValueData(uint32 ioStack[], uint32& ioStackSize, uint16 iOffset)
{
    return ioStack[ioStackSize - 1 - iOffset];
}

void popData(uint32& ioStackSize)
{
    --ioStackSize;
}

// For counts (32-bit)
void pushCountData(uint32 ioStack[], uint32& ioStackSize, uint32 iValue)
{
    ioStack[ioStackSize] = iValue;
    ++ioStackSize;
}

uint32 getCountValueData(uint32 ioStack[], uint32& ioStackSize, uint16 iOffset)
{
    return ioStack[ioStackSize - 1 - iOffset];
}

void popCountData(uint32& ioStackSize)
{
    --ioStackSize;
}

// For offsets (64-bit)
void pushOffsetData(uint64 ioStack[], uint32& ioStackSize, uint64 iValue)
{
    ioStack[ioStackSize] = iValue;
    ++ioStackSize;
}

uint64 getOffsetValueData(uint64 ioStack[], uint32& ioStackSize, uint16 iOffset)
{
    return ioStack[ioStackSize - 1 - iOffset];
}

void popOffsetData(uint32& ioStackSize)
{
    --ioStackSize;
}

// Global stacks

local uint64 sOffsetStack[STACK_SIZE];
local uint32 sOffsetStackSize = 0;

local uint32 sCountStack[STACK_SIZE];
local uint32 sCountStackSize = 0;

local uint32 sLoopIndexStack[STACK_SIZE];
local uint32 sLoopIndexStackSize = 0;

// Wrapper functions

void pushOffset(uint64 iValue) { pushOffsetData(sOffsetStack, sOffsetStackSize, iValue); }
uint64 getOffsetValue(uint16 iOffset) { return getOffsetValueData(sOffsetStack, sOffsetStackSize, iOffset); }
void popOffset() { popOffsetData(sOffsetStackSize); }

void pushCount(uint32 iValue) { pushCountData(sCountStack, sCountStackSize, iValue); }
uint32 getCountValue(uint16 iOffset) { return getCountValueData(sCountStack, sCountStackSize, iOffset); }
void popCount() { popCountData(sCountStackSize); }

void pushLoopIndex(uint32 iValue) { pushData(sLoopIndexStack, sLoopIndexStackSize, iValue); }
uint32 getLoopIndexValue(uint16 iOffset) { return getValueData(sLoopIndexStack, sLoopIndexStackSize, iOffset); }
void popLoopIndex() { popData(sLoopIndexStackSize); }

// Temporary variable
local uint32 sTempLoopIndex<hidden=true>;


// Macros - counts are 32-bit, offsets are 64-bit

#define TSTRUCT_ARRAY_PTR_START \
    pushCount(ReadUInt(FTell())); /* count is 32-bit */ \
    FSkip(4); /* skip 4 bytes (uint32) */ \
    pushOffset(FTell()); /* offset stack stores 64-bit */ \
    pushOffset(ReadUInt64(FTell())); /* read 64-bit offset */ \
    FSkip(8); /* skip 8 bytes (uint64) */ \
    if (getOffsetValue(0) != 0 && getCountValue(0) != 0) \
    { \
        FSeek(getOffsetValue(1) + getOffsetValue(0));

#define TSTRUCT_ARRAY_PTR_END \
        [getCountValue(0)]; \
        FSeek(getOffsetValue(1) + 8); /* after 64-bit pointer */ \
    } \
    popOffset(); \
    popOffset(); \
    popCount();


#define TSTRUCT_PTR_ARRAY_PTR_START \
    pushCount(ReadUInt(FTell())); \
    FSkip(4); \
    pushOffset(FTell()); \
    pushOffset(ReadUInt64(FTell())); \
    FSkip(8); \
    if (getOffsetValue(0) != 0 && getCountValue(0) != 0) \
    { \
        FSeek(getOffsetValue(1) + getOffsetValue(0)); \
        pushLoopIndex(0); \
        while (getLoopIndexValue(0) < getCountValue(0)) \
        { \
            pushOffset(FTell()); \
            pushOffset(ReadUInt64(FTell())); \
            FSkip(8); \
            if (getOffsetValue(0) != 0) \
            { \
                FSeek(getOffsetValue(1) + getOffsetValue(0));

#define TSTRUCT_PTR_ARRAY_PTR_END \
                ; \
                FSeek(getOffsetValue(1) + 8); \
            } \
            popOffset(); \
            popOffset(); \
            sTempLoopIndex = getLoopIndexValue(0) + 1; \
            popLoopIndex(); \
            pushLoopIndex(sTempLoopIndex); \
        } \
        popLoopIndex(); \
        FSeek(getOffsetValue(1) + 8); \
    } \
    popOffset(); \
    popOffset(); \
    popCount();


#define TPTR_START \
    pushOffset(FTell()); \
    pushOffset(ReadUInt64(FTell())); \
    FSkip(8); \
    if (getOffsetValue(0) != 0) \
    { \
        FSeek(getOffsetValue(1) + getOffsetValue(0));

#define TPTR_END \
        ; \
        FSeek(getOffsetValue(1) + 8); \
    } \
    popOffset(); \
    popOffset();


// 0x04 -- 
// 0x05 -- byte
// 0x06 -- byte4

typedef struct
{
    byte data[4];
} byte4;

// 0x07 -- double
// 0x08 -- 
// 0x09 -- 
// 0x0A -- dword

typedef int32 dword;

// 0x0B -- filename

struct filename;

string readFilename(const filename& iFilename)
{
    if (exists(iFilename.data))
    {
        string result; 
        SPrintf(result, "%d", 0xFF00 * (iFilename.data.highValue - 0x100) + (iFilename.data.lowValue - 0x100) + 1);
        return result;
    }
    return "0";
}

typedef struct
{
    TPTR_START 
    struct
    {
        uint16 lowValue;
        uint16 highValue;
        uint16 zero;
    } data TPTR_END;
} filename<read=readFilename, optimize=false>;

// 0x0C -- float
// 0x0D -- float2

typedef struct
{
    float data[2];
} float2;


// 0x0E -- float3

typedef struct
{
    float data[3];
} float3;

// 0x0F -- float4

typedef struct
{
    float data[4];
} float4;

// 0x11 -- qword

typedef int64 qword;

// 0x12 -- wchar*

struct wchar_ptr;

wstring readWCharPtr(wchar_ptr& iWCharPtr)
{
    if (exists(iWCharPtr.data))
    {
        return iWCharPtr.data;
    }
    return "0";
}

typedef struct
{
    TPTR_START wstring data TPTR_END;
} wchar_ptr<read=readWCharPtr, optimize=false>;

// 0x13 -- char*

struct char_ptr;

wstring readCharPtr(char_ptr& iCharPtr)
{
    if (exists(iCharPtr.data))
    {
        return iCharPtr.data;
    }
    return "0";
}

typedef struct
{
    TPTR_START string data TPTR_END;
} char_ptr<read=readCharPtr, optimize=false>;

// 0x14 -- struct
// 0x15 -- word

typedef int16 word;

// 0x16 -- byte16

typedef struct
{
    byte data[16];
} byte16;

// 0x17 -- byte3

typedef struct
{
    byte data[3];
} byte3;

// 0x18 -- dword2

typedef struct
{
    dword data[2];
} dword2;

// 0x19 -- dword4

typedef struct
{
    dword data[4];
} dword4;

// 0x1A -- word3

typedef struct
{
    word data[3];
} word3;

// 0x1B -- fileref

typedef int32 fileref;

// 0x1C -- 
// 0x1D -- struct

typedef struct
{
    char   magic[2];
    uint16 version;
    uint16 zero;
    uint16 headerSize;
    char   type[4];
} headerDat;

struct ChunkHeader
{
char magic[4];
uint32 chunkSize;
uint16 version;
uint16 headerSize;
uint32 offsetToOffsetTable;
};


struct ChunkData
{
    ChunkHeader chunkHeader;
    local uint32 nbOfOffsetsData=0;

    if(chunkHeader.offsetToOffsetTable!=0)
    {
        ubyte data[chunkHeader.offsetToOffsetTable]<optimize=false>;
        uint32 nbOfOffsets;
        nbOfOffsetsData=nbOfOffsets;
        uint32 offsets[nbOfOffsets]<optimize=false>;
        ubyte unknown[(chunkHeader.chunkSize - 8 - chunkHeader.offsetToOffsetTable - 4 - (nbOfOffsets * 4))]<optimize=false>;

    }else{
        ubyte data[chunkHeader.chunkSize - 8]<optimize=false>;
    }
   
};





/* ===============================================
 * Chunk: GEOM, versions: 2, strucTab: 0x141F53A20
 * ===============================================
 */

/* Version: 1, ReferencedFunction: 0x40D484C000000001 */
typedef struct {
    word index;
    float3 vector;
} ModelMeshMorphVertV66;

typedef struct {
    TSTRUCT_ARRAY_PTR_START ModelMeshMorphVertV66 positions TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelMeshMorphVertV66 normals TSTRUCT_ARRAY_PTR_END;
    qword mesh;
} ModelMeshMorphTargetV66;

typedef struct {
    float3 center;
    float3 boxExtent;
    float sphereRadius;
} GrBoundData;

typedef struct {
    dword fvf;
    TSTRUCT_ARRAY_PTR_START byte vertices TSTRUCT_ARRAY_PTR_END;
} PackVertexType;

typedef struct {
    dword vertexCount;
    PackVertexType mesh;
} ModelMeshVertexDataV1;

typedef struct {
    TSTRUCT_ARRAY_PTR_START word indices TSTRUCT_ARRAY_PTR_END;
} ModelMeshIndexDataV1;

typedef struct {
    ModelMeshVertexDataV1 verts;
    ModelMeshIndexDataV1 indices;
    TSTRUCT_ARRAY_PTR_START ModelMeshIndexDataV1 lods TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START dword transforms TSTRUCT_ARRAY_PTR_END;
} ModelMeshGeometryV1;

typedef struct {
    qword visBone;
    TSTRUCT_ARRAY_PTR_START ModelMeshMorphTargetV66 morphTargets TSTRUCT_ARRAY_PTR_END;
    dword flags;
    TSTRUCT_ARRAY_PTR_START dword seamVertIndices TSTRUCT_ARRAY_PTR_END;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    TSTRUCT_ARRAY_PTR_START GrBoundData bounds TSTRUCT_ARRAY_PTR_END;
    dword materialIndex;
    char_ptr materialName;
    TSTRUCT_ARRAY_PTR_START qword boneBindings TSTRUCT_ARRAY_PTR_END;
    TPTR_START ModelMeshGeometryV1 geometry TPTR_END;
} ModelMeshDataV66;

typedef struct {
    TSTRUCT_PTR_ARRAY_PTR_START ModelMeshDataV66 meshes TSTRUCT_PTR_ARRAY_PTR_END;
} ModelFileGeometryV1;

/* Version: 0, ReferencedFunction: 0x1 */
typedef struct {
    word index;
    float3 vector;
} ModelMeshMorphVertV65;

typedef struct {
    TSTRUCT_ARRAY_PTR_START ModelMeshMorphVertV65 positions TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelMeshMorphVertV65 normals TSTRUCT_ARRAY_PTR_END;
    qword mesh;
} ModelMeshMorphTargetV65;


typedef struct {
    dword vertexCount;
    PackVertexType mesh;
} ModelMeshVertexDataV0;

typedef struct {
    TSTRUCT_ARRAY_PTR_START word indices TSTRUCT_ARRAY_PTR_END;
} ModelMeshIndexDataV0;

typedef struct {
    ModelMeshVertexDataV0 verts;
    ModelMeshIndexDataV0 indices;
    TSTRUCT_ARRAY_PTR_START ModelMeshIndexDataV0 lods TSTRUCT_ARRAY_PTR_END;
} ModelMeshGeometryV0;

typedef struct {
    qword visBone;
    TSTRUCT_ARRAY_PTR_START ModelMeshMorphTargetV65 morphTargets TSTRUCT_ARRAY_PTR_END;
    dword flags;
    TSTRUCT_ARRAY_PTR_START dword seamVertIndices TSTRUCT_ARRAY_PTR_END;
    qword meshName;
    float3 minBound;
    float3 maxBound;
    TSTRUCT_ARRAY_PTR_START GrBoundData bounds TSTRUCT_ARRAY_PTR_END;
    dword materialIndex;
    char_ptr materialName;
    TSTRUCT_ARRAY_PTR_START char_ptr boneNames TSTRUCT_ARRAY_PTR_END;
    TPTR_START ModelMeshGeometryV0 geometry TPTR_END;
} ModelMeshDataV65;

typedef struct {
    TSTRUCT_PTR_ARRAY_PTR_START ModelMeshDataV65 meshes TSTRUCT_PTR_ARRAY_PTR_END;
} ModelFileGeometryV0;


/* Version: 69, ReferencedFunction: 0x40D4E5B000000001 */
typedef struct {
    filename filenameData;
    dword textureFlags;
    qword token;
    qword blitId;
    dword uvAnimId;
    byte uvPSInputIndex;
} ModelTextureDataV66;

typedef struct {
    dword name;
    float4 value;
    dword constantFlags;
} ModelConstantDataV66;

typedef struct {
    qword linkToken;
    dword constantToken;
} ModelMatConstLinkV66;

typedef struct {
    qword linkToken;
    dword uvAnimId;
    byte type;
} ModelUVTransLinkV66;

typedef struct {
    dword flags;
    byte uvIndex;
    byte columns;
    byte rows;
    word count;
    float fps;
    float2 scroll;
    float2 scrollFreq;
    float2 scale;
    float2 scaleFreq;
    float rotate;
    float rotate;
} ModelMaterialTexTransformV66;

typedef struct {
    qword token;
    dword materialId;
    filename filenameData;
    dword materialFlags;
    dword sortOrder;
    TSTRUCT_ARRAY_PTR_START ModelTextureDataV66 textures TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelConstantDataV66 constants TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelMatConstLinkV66 matConstLinks TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelUVTransLinkV66 uvTransLinks TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelMaterialTexTransformV66 texTransforms TSTRUCT_ARRAY_PTR_END;
    byte texCoordCount;
    dword sortLayer;
} ModelMaterialDataV66;

typedef struct {
    qword token;
    TSTRUCT_PTR_ARRAY_PTR_START ModelMaterialDataV66 materials TSTRUCT_PTR_ARRAY_PTR_END;
} ModelPermutationDataV66;

typedef struct {
    float3 acceleration;
    qword bone;
    float drag;
    TSTRUCT_ARRAY_PTR_START dword emitterIndices TSTRUCT_ARRAY_PTR_END;
    dword fvf;
    dword flags;
    dword materialIndex;
    TSTRUCT_ARRAY_PTR_START dword obstacleIndices TSTRUCT_ARRAY_PTR_END;
    float3 velocity;
} ModelParticleCloudV66;

typedef struct {
    byte curveType;
    TSTRUCT_ARRAY_PTR_START float2 keys TSTRUCT_ARRAY_PTR_END;
} ModelParticleCurveV66;

typedef struct {
    float4 x;
    float4 y;
    float4 z;
} ModelMatrix43V66;

typedef struct {
    byte columns;
    byte count;
    float fps;
    byte rows;
    byte start;
} ModelParticleFlipbookV66;

typedef struct {
    float3 alignmentDir;
    byte alignmentType;
    TPTR_START ModelParticleFlipbookV66 flipbook TPTR_END;
    float2 rotationChange;
    float rotationDrag;
    float2 rotationInitial;
    float2 scaleChange[2];
    float2 scaleInitial[2];
    float4 texCoordRect;
} PlaneEmitterSettingsV69;

typedef struct {
    dword alignment;
    float bankThreshold;
    float bankScale;
    filename filenameData;
    float obstacleRadius;
    float2 rotation[3];
    float2 scaleChange[3];
    float2 scaleInitial[3];
    float2 spin[3];
} MeshEmitterSettingsV69;

typedef struct {
    float2 acceleration[4];
    float2 accelerationDistRange;
    float2 accelerationDistSpeed;
    dword affinity;
    qword bone;
    float4 colorBegin;
    float4 colorEnd;
    float colorPeriod;
    float2 colorFalloff;
    dword emitterFlags;
    float offset;
    TPTR_START ModelParticleCurveV66 opacityCurve TPTR_END;
    dword opacityCurvePreset;
    dword flags;
    float2 lifetime;
    TPTR_START ModelParticleCurveV66 scaleCurve TPTR_END;
    dword scaleCurvePreset;
    float drag;
    float2 velocity[4];
    float2 velocityDistRange;
    float2 velocityDistSpeed;
    float2 velocityInherit;
    float2 spawnGroupSize;
    float spawnPeriod;
    float spawnProbability;
    float2 spawnRadius;
    float2 spawnWindEmit;
    float2 spawnWindSpeed;
    TPTR_START ModelMatrix43V66 transform TPTR_END;
    byte windInfluence;
    byte spawnShape;
    TPTR_START PlaneEmitterSettingsV69 planeEmitterSettings TPTR_END;
    TPTR_START MeshEmitterSettingsV69 meshEmitterSettings TPTR_END;
} ModelParticleEmitterV69;

typedef struct {
    TSTRUCT_ARRAY_PTR_START ModelParticleCloudV66 clouds TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelParticleEmitterV69 emitters TSTRUCT_ARRAY_PTR_END;
} ModelCloudDataV69;

typedef struct {
    dword affinity;
    qword bone;
    byte type;
    byte response;
    dword flags;
    float dragCoef;
    float gravityCoef;
    float length;
    float width;
    float height;
    float radius;
    TPTR_START ModelMatrix43V66 transform TPTR_END;
} ModelObstacleDataV66;

typedef struct {
    float3 acceleration;
    float3 velocity;
    TSTRUCT_ARRAY_PTR_START dword anchorIndices TSTRUCT_ARRAY_PTR_END;
    qword bone;
    dword flags;
    float jitter;
    dword materialIndex;
    float noise;
    float spawnDist;
    float texScale;
    float wind;
} ModelStreakV66;

typedef struct {
    qword bone;
    dword colorStart;
    dword colorEnd;
    float falloff;
    float lifetime;
    dword flags;
    float texV;
} ModelStreakAnchorV66;

typedef struct {
    TSTRUCT_ARRAY_PTR_START ModelStreakV66 streaks TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelStreakAnchorV66 anchors TSTRUCT_ARRAY_PTR_END;
} ModelStreakDataV66;

typedef struct {
    qword bone;
    byte color[3];
    float farDistance;
    float intensity;
    float nearDistance;
} ModelEffectLightV66;

typedef struct {
    TSTRUCT_ARRAY_PTR_START ModelEffectLightV66 effectLights TSTRUCT_ARRAY_PTR_END;
} ModelLightDataV66;


typedef struct {
    qword token;
    byte weight;
} ModelClothBoneWeightV66;

typedef struct {
    TSTRUCT_ARRAY_PTR_START ModelClothBoneWeightV66 weights TSTRUCT_ARRAY_PTR_END;
} ModelClothMeshGroupV66;

typedef struct {
    qword strippedToken;
    char_ptr boneName;
    float3 OBBMin;
    float3 OBBMax;
} ModelClothGroupBindingV66;

typedef struct {
    byte weight;
    word vertIndex;
} ModelClothSoftLockV66;

typedef struct {
    word distance;
    word relationship;
    word vertIndexA;
    word vertIndexB;
} ModelClothConstraintV66;

typedef struct {
    dword materialIndex;
    float drag;
    float gravity;
    float compressibility;
    float slack;
    float stretchiness;
    float weight;
    float wind;
    PackVertexType mesh;
    TSTRUCT_ARRAY_PTR_START word indices TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelClothMeshGroupV66 groups TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelClothGroupBindingV66 groupBindings TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelClothSoftLockV66 softLocks TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelClothConstraintV66 lod0Constraints TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelClothConstraintV66 lod1Constraints TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START word lod1Indices TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START float3 barycentricCoords TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START word barycentricIndices TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START dword obstacleIndices TSTRUCT_ARRAY_PTR_END;
    word lockCount;
    TSTRUCT_ARRAY_PTR_START dword lockedNormals TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START dword lockedTanegents TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START dword lockedBitangents TSTRUCT_ARRAY_PTR_END;
    word lod1VertexCount;
    byte flags;
    byte rigidness;
    float translateWeight;
    qword visBone;
} ModelClothDataV66;

typedef struct {
    qword bone;
    float farDistance;
    float intensity;
    float nearDistance;
} ModelEffectWindV66;

typedef struct {
    TSTRUCT_ARRAY_PTR_START ModelEffectWindV66 effectWind TSTRUCT_ARRAY_PTR_END;
} ModelWindDataV66;

typedef struct {
    qword bone;
    TSTRUCT_ARRAY_PTR_START word boltIndices TSTRUCT_ARRAY_PTR_END;
    dword flags;
    dword fvf;
    dword materialIndex;
} ModelLightningSystemV66;

typedef struct {
    qword bone;
    TSTRUCT_ARRAY_PTR_START word nodeIndices TSTRUCT_ARRAY_PTR_END;
    dword colorBegin[3];
    dword colorEnd[3];
    float colorPeriod;
    float2 colorFalloff;
    dword flags;
    TPTR_START ModelParticleFlipbookV66 flipbook TPTR_END;
    float fps;
    float frequency;
    dword groupMax;
    dword groupMin;
    float probability;
    float2 lifetime;
    word numSegments;
    float2 opacity;
    byte opacityPreset;
    float texOffset;
    float2 texRange;
    float texScale;
    float texSpeed;
    byte thicknessPreset;
    float2 thicknessRange;
    byte type;
    float variance;
    byte variancePreset;
    float noise;
} ModelLightningBoltV66;

typedef struct {
    qword bone;
    TSTRUCT_ARRAY_PTR_START word childrenIndices TSTRUCT_ARRAY_PTR_END;
    dword flags;
    float probability;
    float2 radius;
    byte shape;
    float updatePos;
} ModelLightningNodeV66;

typedef struct {
    TSTRUCT_ARRAY_PTR_START ModelLightningSystemV66 systems TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelLightningBoltV66 bolts TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelLightningNodeV66 nodes TSTRUCT_ARRAY_PTR_END;
} ModelLightningDataV66;

typedef struct {
    dword materialIndex;
    dword flags;
    dword vertexFvf;
    TSTRUCT_ARRAY_PTR_START byte vertBytes TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START word indices TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START qword bones TSTRUCT_ARRAY_PTR_END;
} ModelSoftBodyDataV66;

typedef struct {
    qword bone;
    float3 translation;
    float4 rotation;
    float4 boneInverseOffset[3];
} ModelBoneOffsetDataV66;

typedef struct {
    float3 center;
    float radius;
} ModelBoundingSphereV66;

typedef struct {
    TSTRUCT_ARRAY_PTR_START ModelPermutationDataV66 permutations TSTRUCT_ARRAY_PTR_END;
    TPTR_START ModelCloudDataV69 cloudData TPTR_END;
    TSTRUCT_ARRAY_PTR_START ModelObstacleDataV66 obstacles TSTRUCT_ARRAY_PTR_END;
    TPTR_START ModelStreakDataV66 streakData TPTR_END;
    TPTR_START ModelLightDataV66 lightData TPTR_END;
    TSTRUCT_ARRAY_PTR_START ModelClothDataV66 clothData TSTRUCT_ARRAY_PTR_END;
    TPTR_START ModelWindDataV66 windData TPTR_END;
    TSTRUCT_ARRAY_PTR_START qword actionOffsetNames TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START float3 actionOffsets TSTRUCT_ARRAY_PTR_END;
    float lodOverride[2];
    filename soundScript;
    TPTR_START ModelLightningDataV66 lightningData TPTR_END;
    TSTRUCT_ARRAY_PTR_START ModelSoftBodyDataV66 softBodyData TSTRUCT_ARRAY_PTR_END;
    TSTRUCT_ARRAY_PTR_START ModelBoneOffsetDataV66 boneOffsetData TSTRUCT_ARRAY_PTR_END;
    TPTR_START ModelBoundingSphereV66 boundingSphere TPTR_END;
} ModelFileDataV69;


struct ChunkData2
{
    ChunkHeader chunkHeader;
    local uint32 nbOfOffsetsData=0;

    if(chunkHeader.offsetToOffsetTable!=0)
    {
                  ModelFileDataV69 ModelFileDataV69_data;
        uint32 nbOfOffsets;
        nbOfOffsetsData=nbOfOffsets;
        uint32 offsets[nbOfOffsets]<optimize=false>;
        ubyte unknown[(chunkHeader.chunkSize - 8 - chunkHeader.offsetToOffsetTable - 4 - (nbOfOffsets * 4))]<optimize=false>;

    }else{
    ModelFileDataV69 ModelFileDataV69_data;
        }
   
};


struct ChunkData3
{
    ChunkHeader chunkHeader;
    local uint32 nbOfOffsetsData=0;

    if(chunkHeader.offsetToOffsetTable!=0)
    {
                  ModelFileGeometryV1 ModelFileGeometryV1_data;
        uint32 nbOfOffsets;
        nbOfOffsetsData=nbOfOffsets;
        uint32 offsets[nbOfOffsets]<optimize=false>;
        ubyte unknown[(chunkHeader.chunkSize - 8 - chunkHeader.offsetToOffsetTable - 4 - (nbOfOffsets * 4))]<optimize=false>;

    }else{
                  ModelFileGeometryV1 ModelFileGeometryV1_data;
    }
   
};


                  ModelFileGeometryV1 ModelFileGeometryV1_data;
